<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cs" #>

<#

// This needs to be set to the .edmx file that you want to process.
//string edmxFile = FindEDMXFileName(); // @"Model1.edmx";

string[] edmxFiles = FindEDMXFiles();

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
  
#>
//------------------------------------------------------------------------------
// <auto-generated>
// Este código es autogenerado T4
// </auto-generated>
//------------------------------------------------------------------------------

<#

List<EntityType> entidades = new List<EntityType>();
foreach (string file in edmxFiles)
{
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(file);

	entidades.AddRange(ItemCollection.GetItems<EntityType>());
}

//EdmItemCollection ItemCollection = new EdmItemCollection(edmxFiles);
////EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(edmxFile);
////EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);


//foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
foreach (EntityType entity in entidades.OrderBy(e => e.Name))
{;

    if(!DoesFileExist("IRepository" + entity.Name + ".cs"))
    {
        fileManager.StartNewFile("IRepository" + entity.Name + ".cs");
        #>
 
     
namespace <#= code.VsNamespaceSuggestion() #>
{   
    <#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial interface IRepository<#=code.Escape(entity)#> : IRepositoryBase<<#=code.Escape(entity)#>>
    {
		 
		 
    }
}<#
    }
    else
    {
        fileManager.StartNewFile("IRepository" + entity.Name + ".cs");
        this.Write(OutputFile("IRepository" + entity.Name + ".cs"));
    }
}



fileManager.StartNewFile("IRepositoryBase.cs");
#>using System.Data.Entity;
using System.Linq.Expressions;
using System;
using System.Linq;
using TK_ECAR.Domain.Specifications;
using System.Collections.Generic;

namespace <#= code.VsNamespaceSuggestion() #>
{
    public partial interface IRepositoryBase<T> where T : class
    {
         T GetByID(object id); 
         void Insert(T entity);	 		 
		 void Delete(object id);
         void Delete(T entityToDelete);
		 void RemoveRange(IEnumerable<T> entity);
         void Update(T entityToUpdate);
         IQueryable<T> FindAll(Expression<Func<T, bool>> filter = null);
         IQueryable<T> FindAll(out int totalRows, Expression<Func<T, bool>> filter = null, int skip = 0, int take = 10);		  
         T FindOne(Expression<Func<T, bool>> filter);
         IQueryable<T> Fetch();   
		 IQueryable<T> Where(ISpecification<T> specfication);
		 IQueryable<T> Include(params Expression<Func<T, object>>[] includes);
         DbContext InternalContext { get; }
        
    }
}<#fileManager.StartNewFile("IUnitOfWork.cs");
#>

namespace <#= code.VsNamespaceSuggestion() #>
{
    public partial interface IUnitOfWork
    {
         
        void Commit();
        bool LazyLoadingEnabled { get; set; }
        bool ProxyCreationEnabled { get; set; }
        string ConnectionString { get; set; }
		<# 
		//foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		 foreach (EntityType entity in entidades.OrderBy(e => e.Name))
 
{ #>
		IRepository<#=code.Escape(entity)#> Repository<#=code.Escape(entity)#> { get; }
           
<# } // end of foreach
#>


    }
}
 
  
<#    fileManager.Process();
#>

 

<#+

bool DoesFileExist(string filename)
{            
    return File.Exists(Path.Combine(GetCurrentDirectory(),filename));    
}

string OutputFile(string filename)
{
    using(StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(),filename)))
    {
        string contents = sr.ReadToEnd();
        return contents;
    }
}

string GetCurrentDirectory()
{
    string executingDirectoryName = "";
    string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
    if (String.IsNullOrEmpty(stackTraceFileName))
    {
        throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
            ", and we could not figure out the file name from the stack trace (most likely because of running " +
            "the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
    }
    else
    {        
        executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
    }    
    return executingDirectoryName;
}

string FindEDMXFileName()
{
    string edmxFile = "";
                
    string[] entityFrameworkFiles = Directory.GetFiles(GetCurrentDirectory(), "Model.edmx");
    if(entityFrameworkFiles.Length > 0)
        edmxFile = entityFrameworkFiles[0];
    
    return edmxFile;
}

string[] FindEDMXFiles()
{
    return Directory.GetFiles(GetCurrentDirectory(), "*.edmx");
}


#>
