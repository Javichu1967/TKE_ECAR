//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_PREGUNTAS_FRECUENTESSpecification : ISpecification<T_G_PREGUNTAS_FRECUENTES>
    {
    
        public Nullable<int> ID_PREGUNTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_PREGUNTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_PREGUNTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_PREGUNTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_CATEGORIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_CATEGORIAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_CATEGORIAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_CATEGORIATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string PREGUNTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PREGUNTAIN
    	{
    		get;
    		set;
    	}
    
    	public string PREGUNTAContains
    	{
    		get;
    		set;
    	}
    	
    	public string PREGUNTAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PREGUNTAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string RESPUESTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> RESPUESTAIN
    	{
    		get;
    		set;
    	}
    
    	public string RESPUESTAContains
    	{
    		get;
    		set;
    	}
    	
    	public string RESPUESTAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string RESPUESTAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> BAJA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BAJAIN
    	{
    		get;
    		set;
    	}
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_PREGUNTAS_FRECUENTESSpecification"/> class.
    	/// </summary>
    	public T_G_PREGUNTAS_FRECUENTESSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_PREGUNTAS_FRECUENTESSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_PREGUNTAS_FRECUENTESSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_PREGUNTAS_FRECUENTES, bool>> GetExpression()
    	{
    		Expression<Func<T_G_PREGUNTAS_FRECUENTES, bool>> expression = x => true;
    
    		if(ID_PREGUNTA.HasValue)
    			expression = expression.And(x => x.ID_PREGUNTA == ID_PREGUNTA.Value);
    
    		if(ID_PREGUNTAIN != null && ID_PREGUNTAIN.Count() > 0)
    			expression = expression.And(x => ID_PREGUNTAIN.Contains(x.ID_PREGUNTA));
    	
    		if(ID_PREGUNTAFrom.HasValue)
    			expression = expression.And(x => x.ID_PREGUNTA >= ID_PREGUNTAFrom.Value);
    			
    		if(ID_PREGUNTATo.HasValue)
    			expression = expression.And(x => x.ID_PREGUNTA <= ID_PREGUNTATo.Value);
    				
    
    
    		if(ID_CATEGORIA.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA == ID_CATEGORIA.Value);
    
    		if(ID_CATEGORIAIN != null && ID_CATEGORIAIN.Count() > 0)
    			expression = expression.And(x => ID_CATEGORIAIN.Contains(x.ID_CATEGORIA));
    	
    		if(ID_CATEGORIAFrom.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA >= ID_CATEGORIAFrom.Value);
    			
    		if(ID_CATEGORIATo.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA <= ID_CATEGORIATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(PREGUNTA))  
    			expression = expression.And(x => x.PREGUNTA.Equals(PREGUNTA));
    			
    		if(!string.IsNullOrWhiteSpace(PREGUNTAContains))  
    			expression = expression.And(x => x.PREGUNTA.Contains(PREGUNTAContains));
    			
    		if(!string.IsNullOrWhiteSpace(PREGUNTAStartsWith))
    			expression = expression.And(x => x.PREGUNTA.StartsWith(PREGUNTAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PREGUNTAEndsWith))
    			expression = expression.And(x => x.PREGUNTA.EndsWith(PREGUNTAEndsWith));
    
    		if(PREGUNTAIN != null && PREGUNTAIN.Count() > 0)
    			expression = expression.And(x => PREGUNTAIN.Contains(x.PREGUNTA));
    	
    		if(!string.IsNullOrWhiteSpace(RESPUESTA))  
    			expression = expression.And(x => x.RESPUESTA.Equals(RESPUESTA));
    			
    		if(!string.IsNullOrWhiteSpace(RESPUESTAContains))  
    			expression = expression.And(x => x.RESPUESTA.Contains(RESPUESTAContains));
    			
    		if(!string.IsNullOrWhiteSpace(RESPUESTAStartsWith))
    			expression = expression.And(x => x.RESPUESTA.StartsWith(RESPUESTAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(RESPUESTAEndsWith))
    			expression = expression.And(x => x.RESPUESTA.EndsWith(RESPUESTAEndsWith));
    
    		if(RESPUESTAIN != null && RESPUESTAIN.Count() > 0)
    			expression = expression.And(x => RESPUESTAIN.Contains(x.RESPUESTA));
    
    		if(BAJA.HasValue)
    			expression = expression.And(x => x.BAJA == BAJA.Value);
    
    		if(BAJAIN != null && BAJAIN.Count() > 0)
    			expression = expression.And(x => BAJAIN.Contains(x.BAJA));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_PREGUNTAS_FRECUENTES entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_PREGUNTAS_FRECUENTES> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
