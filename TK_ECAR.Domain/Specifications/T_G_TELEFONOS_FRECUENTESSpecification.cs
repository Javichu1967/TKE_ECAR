//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_TELEFONOS_FRECUENTESSpecification : ISpecification<T_G_TELEFONOS_FRECUENTES>
    {
    
        public string NUMERO_TELEFONO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NUMERO_TELEFONOIN
    	{
    		get;
    		set;
    	}
    
    	public string NUMERO_TELEFONOContains
    	{
    		get;
    		set;
    	}
    	
    	public string NUMERO_TELEFONOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NUMERO_TELEFONOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ID_EMPRESA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string DESCRIPCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DESCRIPCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DESCRIPCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_TELEFONOS_FRECUENTESSpecification"/> class.
    	/// </summary>
    	public T_G_TELEFONOS_FRECUENTESSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_TELEFONOS_FRECUENTESSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_TELEFONOS_FRECUENTESSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_TELEFONOS_FRECUENTES, bool>> GetExpression()
    	{
    		Expression<Func<T_G_TELEFONOS_FRECUENTES, bool>> expression = x => true;
    	
    		if(!string.IsNullOrWhiteSpace(NUMERO_TELEFONO))  
    			expression = expression.And(x => x.NUMERO_TELEFONO.Equals(NUMERO_TELEFONO));
    			
    		if(!string.IsNullOrWhiteSpace(NUMERO_TELEFONOContains))  
    			expression = expression.And(x => x.NUMERO_TELEFONO.Contains(NUMERO_TELEFONOContains));
    			
    		if(!string.IsNullOrWhiteSpace(NUMERO_TELEFONOStartsWith))
    			expression = expression.And(x => x.NUMERO_TELEFONO.StartsWith(NUMERO_TELEFONOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NUMERO_TELEFONOEndsWith))
    			expression = expression.And(x => x.NUMERO_TELEFONO.EndsWith(NUMERO_TELEFONOEndsWith));
    
    		if(NUMERO_TELEFONOIN != null && NUMERO_TELEFONOIN.Count() > 0)
    			expression = expression.And(x => NUMERO_TELEFONOIN.Contains(x.NUMERO_TELEFONO));
    
    		if(ID_EMPRESA.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA == ID_EMPRESA.Value);
    
    		if(ID_EMPRESAIN != null && ID_EMPRESAIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESAIN.Contains(x.ID_EMPRESA));
    	
    		if(ID_EMPRESAFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA >= ID_EMPRESAFrom.Value);
    			
    		if(ID_EMPRESATo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA <= ID_EMPRESATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(DESCRIPCION))  
    			expression = expression.And(x => x.DESCRIPCION.Equals(DESCRIPCION));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONContains))  
    			expression = expression.And(x => x.DESCRIPCION.Contains(DESCRIPCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONStartsWith))
    			expression = expression.And(x => x.DESCRIPCION.StartsWith(DESCRIPCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONEndsWith))
    			expression = expression.And(x => x.DESCRIPCION.EndsWith(DESCRIPCIONEndsWith));
    
    		if(DESCRIPCIONIN != null && DESCRIPCIONIN.Count() > 0)
    			expression = expression.And(x => DESCRIPCIONIN.Contains(x.DESCRIPCION));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_TELEFONOS_FRECUENTES entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_TELEFONOS_FRECUENTES> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
