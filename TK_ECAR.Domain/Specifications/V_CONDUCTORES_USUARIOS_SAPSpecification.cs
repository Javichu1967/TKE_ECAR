//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class V_CONDUCTORES_USUARIOS_SAPSpecification : ISpecification<V_CONDUCTORES_USUARIOS_SAP>
    {
    
        public Nullable<int> Cod_Conductor
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Cod_ConductorIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Cod_ConductorFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Cod_ConductorTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<System.DateTime> Fecha_Vencimiento_Carnet
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_Vencimiento_CarnetIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_Vencimiento_CarnetFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_Vencimiento_CarnetTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_Vencimiento_CarnetFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_Vencimiento_CarnetToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<bool> Personal_Interno
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> Personal_InternoIN
    	{
    		get;
    		set;
    	}
    
        public string Tlf
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TlfIN
    	{
    		get;
    		set;
    	}
    
    	public string TlfContains
    	{
    		get;
    		set;
    	}
    	
    	public string TlfStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TlfEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Movil
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MovilIN
    	{
    		get;
    		set;
    	}
    
    	public string MovilContains
    	{
    		get;
    		set;
    	}
    	
    	public string MovilStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MovilEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Fecha_Carnet
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_CarnetIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_CarnetFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_CarnetTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_CarnetFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_CarnetToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<int> Num_Empleado
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Num_EmpleadoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Num_EmpleadoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Num_EmpleadoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Num_Empleado_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Num_Empleado_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Num_Empleado_SAPFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Num_Empleado_SAPTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string CentroCoste
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CentroCosteIN
    	{
    		get;
    		set;
    	}
    
    	public string CentroCosteContains
    	{
    		get;
    		set;
    	}
    	
    	public string CentroCosteStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CentroCosteEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CentroCoste_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CentroCoste_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string CentroCoste_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string CentroCoste_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CentroCoste_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ID_EMPRESA_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESA_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESA_SAPFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESA_SAPTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string NombreEmpresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreEmpresaIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreEmpresaContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEmpresaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEmpresaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Direccion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DireccionIN
    	{
    		get;
    		set;
    	}
    
    	public string DireccionContains
    	{
    		get;
    		set;
    	}
    	
    	public string DireccionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DireccionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Direccion_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Direccion_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Direccion_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Direccion_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Direccion_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Fecha_Nacimiento
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_NacimientoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_NacimientoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_NacimientoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_NacimientoFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_NacimientoToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> Fecha_Nacimiento_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_Nacimiento_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_Nacimiento_SAPFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_Nacimiento_SAPTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_Nacimiento_SAPFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_Nacimiento_SAPToOrNull
        {
            get;
            set;
        }
    		
    
        public string Cod_Postal
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Cod_PostalIN
    	{
    		get;
    		set;
    	}
    
    	public string Cod_PostalContains
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_PostalStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_PostalEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Cod_Postal_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Cod_Postal_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Cod_Postal_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_Postal_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_Postal_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Poblacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PoblacionIN
    	{
    		get;
    		set;
    	}
    
    	public string PoblacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Poblacion_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Poblacion_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Poblacion_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Poblacion_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Poblacion_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Provincia
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ProvinciaIN
    	{
    		get;
    		set;
    	}
    
    	public string ProvinciaContains
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Provincia_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Provincia_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Provincia_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Provincia_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Provincia_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Nombre
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Nombre_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Nombre_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Nombre_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Nombre_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Nombre_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Apellidos
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ApellidosIN
    	{
    		get;
    		set;
    	}
    
    	public string ApellidosContains
    	{
    		get;
    		set;
    	}
    	
    	public string ApellidosStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ApellidosEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Apellidos_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Apellidos_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Apellidos_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Apellidos_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Apellidos_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DNI_CONDUCTOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DNI_CONDUCTORIN
    	{
    		get;
    		set;
    	}
    
    	public string DNI_CONDUCTORContains
    	{
    		get;
    		set;
    	}
    	
    	public string DNI_CONDUCTORStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DNI_CONDUCTOREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DNI_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DNI_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string DNI_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string DNI_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DNI_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Email
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EmailIN
    	{
    		get;
    		set;
    	}
    
    	public string EmailContains
    	{
    		get;
    		set;
    	}
    	
    	public string EmailStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EmailEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Email_SAP
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Email_SAPIN
    	{
    		get;
    		set;
    	}
    
    	public string Email_SAPContains
    	{
    		get;
    		set;
    	}
    	
    	public string Email_SAPStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Email_SAPEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FechaAlta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaAltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaAltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaAltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaAltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaAltaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<bool> Baja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BajaIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> PendienteDefinir
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> PendienteDefinirIN
    	{
    		get;
    		set;
    	}
    
        public string NombreCECO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreCECOIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreCECOContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreCECOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreCECOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> IDTipoDocIdentificacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IDTipoDocIdentificacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> IDTipoDocIdentificacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> IDTipoDocIdentificacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string NumeroCarnetConducir
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NumeroCarnetConducirIN
    	{
    		get;
    		set;
    	}
    
    	public string NumeroCarnetConducirContains
    	{
    		get;
    		set;
    	}
    	
    	public string NumeroCarnetConducirStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NumeroCarnetConducirEndsWith
    	{
    		get;
    		set;
    	}
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="V_CONDUCTORES_USUARIOS_SAPSpecification"/> class.
    	/// </summary>
    	public V_CONDUCTORES_USUARIOS_SAPSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="V_CONDUCTORES_USUARIOS_SAPSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public V_CONDUCTORES_USUARIOS_SAPSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<V_CONDUCTORES_USUARIOS_SAP, bool>> GetExpression()
    	{
    		Expression<Func<V_CONDUCTORES_USUARIOS_SAP, bool>> expression = x => true;
    
    		if(Cod_Conductor.HasValue)
    			expression = expression.And(x => x.Cod_Conductor == Cod_Conductor.Value);
    
    		if(Cod_ConductorIN != null && Cod_ConductorIN.Count() > 0)
    			expression = expression.And(x => Cod_ConductorIN.Contains(x.Cod_Conductor));
    	
    		if(Cod_ConductorFrom.HasValue)
    			expression = expression.And(x => x.Cod_Conductor >= Cod_ConductorFrom.Value);
    			
    		if(Cod_ConductorTo.HasValue)
    			expression = expression.And(x => x.Cod_Conductor <= Cod_ConductorTo.Value);
    				
    
    
    		if(Fecha_Vencimiento_Carnet.HasValue)
    			expression = expression.And(x => x.Fecha_Vencimiento_Carnet == Fecha_Vencimiento_Carnet.Value);
    
    		if(Fecha_Vencimiento_CarnetIN != null && Fecha_Vencimiento_CarnetIN.Count() > 0)
    			expression = expression.And(x => Fecha_Vencimiento_CarnetIN.Contains(x.Fecha_Vencimiento_Carnet));
    	
    		if(Fecha_Vencimiento_CarnetFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Vencimiento_Carnet >= Fecha_Vencimiento_CarnetFrom.Value);
    			
    		if(Fecha_Vencimiento_CarnetTo.HasValue)
    			expression = expression.And(x => x.Fecha_Vencimiento_Carnet <= Fecha_Vencimiento_CarnetTo.Value);
    				
    
    		if(Fecha_Vencimiento_CarnetFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Vencimiento_Carnet >= Fecha_Vencimiento_CarnetFromOrNull.Value || x.Fecha_Vencimiento_Carnet == null);
    
            if(Fecha_Vencimiento_CarnetToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Vencimiento_Carnet <= Fecha_Vencimiento_CarnetToOrNull.Value || x.Fecha_Vencimiento_Carnet == null);
    
    		if(Personal_Interno.HasValue)
    			expression = expression.And(x => x.Personal_Interno == Personal_Interno.Value);
    
    		if(Personal_InternoIN != null && Personal_InternoIN.Count() > 0)
    			expression = expression.And(x => Personal_InternoIN.Contains(x.Personal_Interno));
    	
    		if(!string.IsNullOrWhiteSpace(Tlf))  
    			expression = expression.And(x => x.Tlf.Equals(Tlf));
    			
    		if(!string.IsNullOrWhiteSpace(TlfContains))  
    			expression = expression.And(x => x.Tlf.Contains(TlfContains));
    			
    		if(!string.IsNullOrWhiteSpace(TlfStartsWith))
    			expression = expression.And(x => x.Tlf.StartsWith(TlfStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TlfEndsWith))
    			expression = expression.And(x => x.Tlf.EndsWith(TlfEndsWith));
    
    		if(TlfIN != null && TlfIN.Count() > 0)
    			expression = expression.And(x => TlfIN.Contains(x.Tlf));
    	
    		if(!string.IsNullOrWhiteSpace(Movil))  
    			expression = expression.And(x => x.Movil.Equals(Movil));
    			
    		if(!string.IsNullOrWhiteSpace(MovilContains))  
    			expression = expression.And(x => x.Movil.Contains(MovilContains));
    			
    		if(!string.IsNullOrWhiteSpace(MovilStartsWith))
    			expression = expression.And(x => x.Movil.StartsWith(MovilStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MovilEndsWith))
    			expression = expression.And(x => x.Movil.EndsWith(MovilEndsWith));
    
    		if(MovilIN != null && MovilIN.Count() > 0)
    			expression = expression.And(x => MovilIN.Contains(x.Movil));
    
    		if(Fecha_Carnet.HasValue)
    			expression = expression.And(x => x.Fecha_Carnet == Fecha_Carnet.Value);
    
    		if(Fecha_CarnetIN != null && Fecha_CarnetIN.Count() > 0)
    			expression = expression.And(x => Fecha_CarnetIN.Contains(x.Fecha_Carnet));
    	
    		if(Fecha_CarnetFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Carnet >= Fecha_CarnetFrom.Value);
    			
    		if(Fecha_CarnetTo.HasValue)
    			expression = expression.And(x => x.Fecha_Carnet <= Fecha_CarnetTo.Value);
    				
    
    		if(Fecha_CarnetFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Carnet >= Fecha_CarnetFromOrNull.Value || x.Fecha_Carnet == null);
    
            if(Fecha_CarnetToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Carnet <= Fecha_CarnetToOrNull.Value || x.Fecha_Carnet == null);
    
    		if(Num_Empleado.HasValue)
    			expression = expression.And(x => x.Num_Empleado == Num_Empleado.Value);
    
    		if(Num_EmpleadoIN != null && Num_EmpleadoIN.Count() > 0)
    			expression = expression.And(x => Num_EmpleadoIN.Contains(x.Num_Empleado));
    	
    		if(Num_EmpleadoFrom.HasValue)
    			expression = expression.And(x => x.Num_Empleado >= Num_EmpleadoFrom.Value);
    			
    		if(Num_EmpleadoTo.HasValue)
    			expression = expression.And(x => x.Num_Empleado <= Num_EmpleadoTo.Value);
    				
    
    
    		if(Num_Empleado_SAP.HasValue)
    			expression = expression.And(x => x.Num_Empleado_SAP == Num_Empleado_SAP.Value);
    
    		if(Num_Empleado_SAPIN != null && Num_Empleado_SAPIN.Count() > 0)
    			expression = expression.And(x => Num_Empleado_SAPIN.Contains(x.Num_Empleado_SAP));
    	
    		if(Num_Empleado_SAPFrom.HasValue)
    			expression = expression.And(x => x.Num_Empleado_SAP >= Num_Empleado_SAPFrom.Value);
    			
    		if(Num_Empleado_SAPTo.HasValue)
    			expression = expression.And(x => x.Num_Empleado_SAP <= Num_Empleado_SAPTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(CentroCoste))  
    			expression = expression.And(x => x.CentroCoste.Equals(CentroCoste));
    			
    		if(!string.IsNullOrWhiteSpace(CentroCosteContains))  
    			expression = expression.And(x => x.CentroCoste.Contains(CentroCosteContains));
    			
    		if(!string.IsNullOrWhiteSpace(CentroCosteStartsWith))
    			expression = expression.And(x => x.CentroCoste.StartsWith(CentroCosteStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CentroCosteEndsWith))
    			expression = expression.And(x => x.CentroCoste.EndsWith(CentroCosteEndsWith));
    
    		if(CentroCosteIN != null && CentroCosteIN.Count() > 0)
    			expression = expression.And(x => CentroCosteIN.Contains(x.CentroCoste));
    	
    		if(!string.IsNullOrWhiteSpace(CentroCoste_SAP))  
    			expression = expression.And(x => x.CentroCoste_SAP.Equals(CentroCoste_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(CentroCoste_SAPContains))  
    			expression = expression.And(x => x.CentroCoste_SAP.Contains(CentroCoste_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(CentroCoste_SAPStartsWith))
    			expression = expression.And(x => x.CentroCoste_SAP.StartsWith(CentroCoste_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CentroCoste_SAPEndsWith))
    			expression = expression.And(x => x.CentroCoste_SAP.EndsWith(CentroCoste_SAPEndsWith));
    
    		if(CentroCoste_SAPIN != null && CentroCoste_SAPIN.Count() > 0)
    			expression = expression.And(x => CentroCoste_SAPIN.Contains(x.CentroCoste_SAP));
    
    		if(ID_EMPRESA_SAP.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_SAP == ID_EMPRESA_SAP.Value);
    
    		if(ID_EMPRESA_SAPIN != null && ID_EMPRESA_SAPIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESA_SAPIN.Contains(x.ID_EMPRESA_SAP));
    	
    		if(ID_EMPRESA_SAPFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_SAP >= ID_EMPRESA_SAPFrom.Value);
    			
    		if(ID_EMPRESA_SAPTo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_SAP <= ID_EMPRESA_SAPTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(NombreEmpresa))  
    			expression = expression.And(x => x.NombreEmpresa.Equals(NombreEmpresa));
    			
    		if(!string.IsNullOrWhiteSpace(NombreEmpresaContains))  
    			expression = expression.And(x => x.NombreEmpresa.Contains(NombreEmpresaContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreEmpresaStartsWith))
    			expression = expression.And(x => x.NombreEmpresa.StartsWith(NombreEmpresaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreEmpresaEndsWith))
    			expression = expression.And(x => x.NombreEmpresa.EndsWith(NombreEmpresaEndsWith));
    
    		if(NombreEmpresaIN != null && NombreEmpresaIN.Count() > 0)
    			expression = expression.And(x => NombreEmpresaIN.Contains(x.NombreEmpresa));
    	
    		if(!string.IsNullOrWhiteSpace(Direccion))  
    			expression = expression.And(x => x.Direccion.Equals(Direccion));
    			
    		if(!string.IsNullOrWhiteSpace(DireccionContains))  
    			expression = expression.And(x => x.Direccion.Contains(DireccionContains));
    			
    		if(!string.IsNullOrWhiteSpace(DireccionStartsWith))
    			expression = expression.And(x => x.Direccion.StartsWith(DireccionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DireccionEndsWith))
    			expression = expression.And(x => x.Direccion.EndsWith(DireccionEndsWith));
    
    		if(DireccionIN != null && DireccionIN.Count() > 0)
    			expression = expression.And(x => DireccionIN.Contains(x.Direccion));
    	
    		if(!string.IsNullOrWhiteSpace(Direccion_SAP))  
    			expression = expression.And(x => x.Direccion_SAP.Equals(Direccion_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Direccion_SAPContains))  
    			expression = expression.And(x => x.Direccion_SAP.Contains(Direccion_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Direccion_SAPStartsWith))
    			expression = expression.And(x => x.Direccion_SAP.StartsWith(Direccion_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Direccion_SAPEndsWith))
    			expression = expression.And(x => x.Direccion_SAP.EndsWith(Direccion_SAPEndsWith));
    
    		if(Direccion_SAPIN != null && Direccion_SAPIN.Count() > 0)
    			expression = expression.And(x => Direccion_SAPIN.Contains(x.Direccion_SAP));
    
    		if(Fecha_Nacimiento.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento == Fecha_Nacimiento.Value);
    
    		if(Fecha_NacimientoIN != null && Fecha_NacimientoIN.Count() > 0)
    			expression = expression.And(x => Fecha_NacimientoIN.Contains(x.Fecha_Nacimiento));
    	
    		if(Fecha_NacimientoFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento >= Fecha_NacimientoFrom.Value);
    			
    		if(Fecha_NacimientoTo.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento <= Fecha_NacimientoTo.Value);
    				
    
    		if(Fecha_NacimientoFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Nacimiento >= Fecha_NacimientoFromOrNull.Value || x.Fecha_Nacimiento == null);
    
            if(Fecha_NacimientoToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Nacimiento <= Fecha_NacimientoToOrNull.Value || x.Fecha_Nacimiento == null);
    
    		if(Fecha_Nacimiento_SAP.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento_SAP == Fecha_Nacimiento_SAP.Value);
    
    		if(Fecha_Nacimiento_SAPIN != null && Fecha_Nacimiento_SAPIN.Count() > 0)
    			expression = expression.And(x => Fecha_Nacimiento_SAPIN.Contains(x.Fecha_Nacimiento_SAP));
    	
    		if(Fecha_Nacimiento_SAPFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento_SAP >= Fecha_Nacimiento_SAPFrom.Value);
    			
    		if(Fecha_Nacimiento_SAPTo.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento_SAP <= Fecha_Nacimiento_SAPTo.Value);
    				
    
    		if(Fecha_Nacimiento_SAPFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Nacimiento_SAP >= Fecha_Nacimiento_SAPFromOrNull.Value || x.Fecha_Nacimiento_SAP == null);
    
            if(Fecha_Nacimiento_SAPToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Nacimiento_SAP <= Fecha_Nacimiento_SAPToOrNull.Value || x.Fecha_Nacimiento_SAP == null);
    	
    		if(!string.IsNullOrWhiteSpace(Cod_Postal))  
    			expression = expression.And(x => x.Cod_Postal.Equals(Cod_Postal));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_PostalContains))  
    			expression = expression.And(x => x.Cod_Postal.Contains(Cod_PostalContains));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_PostalStartsWith))
    			expression = expression.And(x => x.Cod_Postal.StartsWith(Cod_PostalStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Cod_PostalEndsWith))
    			expression = expression.And(x => x.Cod_Postal.EndsWith(Cod_PostalEndsWith));
    
    		if(Cod_PostalIN != null && Cod_PostalIN.Count() > 0)
    			expression = expression.And(x => Cod_PostalIN.Contains(x.Cod_Postal));
    	
    		if(!string.IsNullOrWhiteSpace(Cod_Postal_SAP))  
    			expression = expression.And(x => x.Cod_Postal_SAP.Equals(Cod_Postal_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_Postal_SAPContains))  
    			expression = expression.And(x => x.Cod_Postal_SAP.Contains(Cod_Postal_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_Postal_SAPStartsWith))
    			expression = expression.And(x => x.Cod_Postal_SAP.StartsWith(Cod_Postal_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Cod_Postal_SAPEndsWith))
    			expression = expression.And(x => x.Cod_Postal_SAP.EndsWith(Cod_Postal_SAPEndsWith));
    
    		if(Cod_Postal_SAPIN != null && Cod_Postal_SAPIN.Count() > 0)
    			expression = expression.And(x => Cod_Postal_SAPIN.Contains(x.Cod_Postal_SAP));
    	
    		if(!string.IsNullOrWhiteSpace(Poblacion))  
    			expression = expression.And(x => x.Poblacion.Equals(Poblacion));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionContains))  
    			expression = expression.And(x => x.Poblacion.Contains(PoblacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionStartsWith))
    			expression = expression.And(x => x.Poblacion.StartsWith(PoblacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PoblacionEndsWith))
    			expression = expression.And(x => x.Poblacion.EndsWith(PoblacionEndsWith));
    
    		if(PoblacionIN != null && PoblacionIN.Count() > 0)
    			expression = expression.And(x => PoblacionIN.Contains(x.Poblacion));
    	
    		if(!string.IsNullOrWhiteSpace(Poblacion_SAP))  
    			expression = expression.And(x => x.Poblacion_SAP.Equals(Poblacion_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Poblacion_SAPContains))  
    			expression = expression.And(x => x.Poblacion_SAP.Contains(Poblacion_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Poblacion_SAPStartsWith))
    			expression = expression.And(x => x.Poblacion_SAP.StartsWith(Poblacion_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Poblacion_SAPEndsWith))
    			expression = expression.And(x => x.Poblacion_SAP.EndsWith(Poblacion_SAPEndsWith));
    
    		if(Poblacion_SAPIN != null && Poblacion_SAPIN.Count() > 0)
    			expression = expression.And(x => Poblacion_SAPIN.Contains(x.Poblacion_SAP));
    	
    		if(!string.IsNullOrWhiteSpace(Provincia))  
    			expression = expression.And(x => x.Provincia.Equals(Provincia));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaContains))  
    			expression = expression.And(x => x.Provincia.Contains(ProvinciaContains));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaStartsWith))
    			expression = expression.And(x => x.Provincia.StartsWith(ProvinciaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ProvinciaEndsWith))
    			expression = expression.And(x => x.Provincia.EndsWith(ProvinciaEndsWith));
    
    		if(ProvinciaIN != null && ProvinciaIN.Count() > 0)
    			expression = expression.And(x => ProvinciaIN.Contains(x.Provincia));
    	
    		if(!string.IsNullOrWhiteSpace(Provincia_SAP))  
    			expression = expression.And(x => x.Provincia_SAP.Equals(Provincia_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Provincia_SAPContains))  
    			expression = expression.And(x => x.Provincia_SAP.Contains(Provincia_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Provincia_SAPStartsWith))
    			expression = expression.And(x => x.Provincia_SAP.StartsWith(Provincia_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Provincia_SAPEndsWith))
    			expression = expression.And(x => x.Provincia_SAP.EndsWith(Provincia_SAPEndsWith));
    
    		if(Provincia_SAPIN != null && Provincia_SAPIN.Count() > 0)
    			expression = expression.And(x => Provincia_SAPIN.Contains(x.Provincia_SAP));
    	
    		if(!string.IsNullOrWhiteSpace(Nombre))  
    			expression = expression.And(x => x.Nombre.Equals(Nombre));
    			
    		if(!string.IsNullOrWhiteSpace(NombreContains))  
    			expression = expression.And(x => x.Nombre.Contains(NombreContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreStartsWith))
    			expression = expression.And(x => x.Nombre.StartsWith(NombreStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreEndsWith))
    			expression = expression.And(x => x.Nombre.EndsWith(NombreEndsWith));
    
    		if(NombreIN != null && NombreIN.Count() > 0)
    			expression = expression.And(x => NombreIN.Contains(x.Nombre));
    	
    		if(!string.IsNullOrWhiteSpace(Nombre_SAP))  
    			expression = expression.And(x => x.Nombre_SAP.Equals(Nombre_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Nombre_SAPContains))  
    			expression = expression.And(x => x.Nombre_SAP.Contains(Nombre_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Nombre_SAPStartsWith))
    			expression = expression.And(x => x.Nombre_SAP.StartsWith(Nombre_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Nombre_SAPEndsWith))
    			expression = expression.And(x => x.Nombre_SAP.EndsWith(Nombre_SAPEndsWith));
    
    		if(Nombre_SAPIN != null && Nombre_SAPIN.Count() > 0)
    			expression = expression.And(x => Nombre_SAPIN.Contains(x.Nombre_SAP));
    	
    		if(!string.IsNullOrWhiteSpace(Apellidos))  
    			expression = expression.And(x => x.Apellidos.Equals(Apellidos));
    			
    		if(!string.IsNullOrWhiteSpace(ApellidosContains))  
    			expression = expression.And(x => x.Apellidos.Contains(ApellidosContains));
    			
    		if(!string.IsNullOrWhiteSpace(ApellidosStartsWith))
    			expression = expression.And(x => x.Apellidos.StartsWith(ApellidosStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ApellidosEndsWith))
    			expression = expression.And(x => x.Apellidos.EndsWith(ApellidosEndsWith));
    
    		if(ApellidosIN != null && ApellidosIN.Count() > 0)
    			expression = expression.And(x => ApellidosIN.Contains(x.Apellidos));
    	
    		if(!string.IsNullOrWhiteSpace(Apellidos_SAP))  
    			expression = expression.And(x => x.Apellidos_SAP.Equals(Apellidos_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Apellidos_SAPContains))  
    			expression = expression.And(x => x.Apellidos_SAP.Contains(Apellidos_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Apellidos_SAPStartsWith))
    			expression = expression.And(x => x.Apellidos_SAP.StartsWith(Apellidos_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Apellidos_SAPEndsWith))
    			expression = expression.And(x => x.Apellidos_SAP.EndsWith(Apellidos_SAPEndsWith));
    
    		if(Apellidos_SAPIN != null && Apellidos_SAPIN.Count() > 0)
    			expression = expression.And(x => Apellidos_SAPIN.Contains(x.Apellidos_SAP));
    	
    		if(!string.IsNullOrWhiteSpace(DNI_CONDUCTOR))  
    			expression = expression.And(x => x.DNI_CONDUCTOR.Equals(DNI_CONDUCTOR));
    			
    		if(!string.IsNullOrWhiteSpace(DNI_CONDUCTORContains))  
    			expression = expression.And(x => x.DNI_CONDUCTOR.Contains(DNI_CONDUCTORContains));
    			
    		if(!string.IsNullOrWhiteSpace(DNI_CONDUCTORStartsWith))
    			expression = expression.And(x => x.DNI_CONDUCTOR.StartsWith(DNI_CONDUCTORStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DNI_CONDUCTOREndsWith))
    			expression = expression.And(x => x.DNI_CONDUCTOR.EndsWith(DNI_CONDUCTOREndsWith));
    
    		if(DNI_CONDUCTORIN != null && DNI_CONDUCTORIN.Count() > 0)
    			expression = expression.And(x => DNI_CONDUCTORIN.Contains(x.DNI_CONDUCTOR));
    	
    		if(!string.IsNullOrWhiteSpace(DNI_SAP))  
    			expression = expression.And(x => x.DNI_SAP.Equals(DNI_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(DNI_SAPContains))  
    			expression = expression.And(x => x.DNI_SAP.Contains(DNI_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(DNI_SAPStartsWith))
    			expression = expression.And(x => x.DNI_SAP.StartsWith(DNI_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DNI_SAPEndsWith))
    			expression = expression.And(x => x.DNI_SAP.EndsWith(DNI_SAPEndsWith));
    
    		if(DNI_SAPIN != null && DNI_SAPIN.Count() > 0)
    			expression = expression.And(x => DNI_SAPIN.Contains(x.DNI_SAP));
    	
    		if(!string.IsNullOrWhiteSpace(Email))  
    			expression = expression.And(x => x.Email.Equals(Email));
    			
    		if(!string.IsNullOrWhiteSpace(EmailContains))  
    			expression = expression.And(x => x.Email.Contains(EmailContains));
    			
    		if(!string.IsNullOrWhiteSpace(EmailStartsWith))
    			expression = expression.And(x => x.Email.StartsWith(EmailStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EmailEndsWith))
    			expression = expression.And(x => x.Email.EndsWith(EmailEndsWith));
    
    		if(EmailIN != null && EmailIN.Count() > 0)
    			expression = expression.And(x => EmailIN.Contains(x.Email));
    	
    		if(!string.IsNullOrWhiteSpace(Email_SAP))  
    			expression = expression.And(x => x.Email_SAP.Equals(Email_SAP));
    			
    		if(!string.IsNullOrWhiteSpace(Email_SAPContains))  
    			expression = expression.And(x => x.Email_SAP.Contains(Email_SAPContains));
    			
    		if(!string.IsNullOrWhiteSpace(Email_SAPStartsWith))
    			expression = expression.And(x => x.Email_SAP.StartsWith(Email_SAPStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Email_SAPEndsWith))
    			expression = expression.And(x => x.Email_SAP.EndsWith(Email_SAPEndsWith));
    
    		if(Email_SAPIN != null && Email_SAPIN.Count() > 0)
    			expression = expression.And(x => Email_SAPIN.Contains(x.Email_SAP));
    
    		if(FechaAlta.HasValue)
    			expression = expression.And(x => x.FechaAlta == FechaAlta.Value);
    
    		if(FechaAltaIN != null && FechaAltaIN.Count() > 0)
    			expression = expression.And(x => FechaAltaIN.Contains(x.FechaAlta));
    	
    		if(FechaAltaFrom.HasValue)
    			expression = expression.And(x => x.FechaAlta >= FechaAltaFrom.Value);
    			
    		if(FechaAltaTo.HasValue)
    			expression = expression.And(x => x.FechaAlta <= FechaAltaTo.Value);
    				
    
    		if(FechaAltaFromOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta >= FechaAltaFromOrNull.Value || x.FechaAlta == null);
    
            if(FechaAltaToOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta <= FechaAltaToOrNull.Value || x.FechaAlta == null);
    
    		if(Baja.HasValue)
    			expression = expression.And(x => x.Baja == Baja.Value);
    
    		if(BajaIN != null && BajaIN.Count() > 0)
    			expression = expression.And(x => BajaIN.Contains(x.Baja));
    
    		if(PendienteDefinir.HasValue)
    			expression = expression.And(x => x.PendienteDefinir == PendienteDefinir.Value);
    
    		if(PendienteDefinirIN != null && PendienteDefinirIN.Count() > 0)
    			expression = expression.And(x => PendienteDefinirIN.Contains(x.PendienteDefinir));
    	
    		if(!string.IsNullOrWhiteSpace(NombreCECO))  
    			expression = expression.And(x => x.NombreCECO.Equals(NombreCECO));
    			
    		if(!string.IsNullOrWhiteSpace(NombreCECOContains))  
    			expression = expression.And(x => x.NombreCECO.Contains(NombreCECOContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreCECOStartsWith))
    			expression = expression.And(x => x.NombreCECO.StartsWith(NombreCECOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreCECOEndsWith))
    			expression = expression.And(x => x.NombreCECO.EndsWith(NombreCECOEndsWith));
    
    		if(NombreCECOIN != null && NombreCECOIN.Count() > 0)
    			expression = expression.And(x => NombreCECOIN.Contains(x.NombreCECO));
    
    		if(IDTipoDocIdentificacion.HasValue)
    			expression = expression.And(x => x.IDTipoDocIdentificacion == IDTipoDocIdentificacion.Value);
    
    		if(IDTipoDocIdentificacionIN != null && IDTipoDocIdentificacionIN.Count() > 0)
    			expression = expression.And(x => IDTipoDocIdentificacionIN.Contains(x.IDTipoDocIdentificacion));
    	
    		if(IDTipoDocIdentificacionFrom.HasValue)
    			expression = expression.And(x => x.IDTipoDocIdentificacion >= IDTipoDocIdentificacionFrom.Value);
    			
    		if(IDTipoDocIdentificacionTo.HasValue)
    			expression = expression.And(x => x.IDTipoDocIdentificacion <= IDTipoDocIdentificacionTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducir))  
    			expression = expression.And(x => x.NumeroCarnetConducir.Equals(NumeroCarnetConducir));
    			
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducirContains))  
    			expression = expression.And(x => x.NumeroCarnetConducir.Contains(NumeroCarnetConducirContains));
    			
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducirStartsWith))
    			expression = expression.And(x => x.NumeroCarnetConducir.StartsWith(NumeroCarnetConducirStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducirEndsWith))
    			expression = expression.And(x => x.NumeroCarnetConducir.EndsWith(NumeroCarnetConducirEndsWith));
    
    		if(NumeroCarnetConducirIN != null && NumeroCarnetConducirIN.Count() > 0)
    			expression = expression.And(x => NumeroCarnetConducirIN.Contains(x.NumeroCarnetConducir));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(V_CONDUCTORES_USUARIOS_SAP entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<V_CONDUCTORES_USUARIOS_SAP> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
