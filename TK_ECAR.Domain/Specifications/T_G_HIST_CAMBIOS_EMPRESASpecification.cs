//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_HIST_CAMBIOS_EMPRESASpecification : ISpecification<T_G_HIST_CAMBIOS_EMPRESA>
    {
    
        public Nullable<int> ID_HIST_CAMBIOS_EMPRESA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_HIST_CAMBIOS_EMPRESAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_HIST_CAMBIOS_EMPRESAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_HIST_CAMBIOS_EMPRESATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_EMPRESA_ANT
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESA_ANTIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESA_ANTFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESA_ANTTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_EMPRESA_NUEVA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESA_NUEVAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESA_NUEVAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESA_NUEVATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string MATRICULA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MATRICULAIN
    	{
    		get;
    		set;
    	}
    
    	public string MATRICULAContains
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string USUARIO_CREACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> USUARIO_CREACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string USUARIO_CREACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_CREACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_CREACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_ALTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_ALTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_ALTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_ALTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_ALTAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_ALTAToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<int> ID_ESTADO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ESTADOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_ESTADOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_ESTADOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_HIST_CAMBIOS_EMPRESASpecification"/> class.
    	/// </summary>
    	public T_G_HIST_CAMBIOS_EMPRESASpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_HIST_CAMBIOS_EMPRESASpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_HIST_CAMBIOS_EMPRESASpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_HIST_CAMBIOS_EMPRESA, bool>> GetExpression()
    	{
    		Expression<Func<T_G_HIST_CAMBIOS_EMPRESA, bool>> expression = x => true;
    
    		if(ID_HIST_CAMBIOS_EMPRESA.HasValue)
    			expression = expression.And(x => x.ID_HIST_CAMBIOS_EMPRESA == ID_HIST_CAMBIOS_EMPRESA.Value);
    
    		if(ID_HIST_CAMBIOS_EMPRESAIN != null && ID_HIST_CAMBIOS_EMPRESAIN.Count() > 0)
    			expression = expression.And(x => ID_HIST_CAMBIOS_EMPRESAIN.Contains(x.ID_HIST_CAMBIOS_EMPRESA));
    	
    		if(ID_HIST_CAMBIOS_EMPRESAFrom.HasValue)
    			expression = expression.And(x => x.ID_HIST_CAMBIOS_EMPRESA >= ID_HIST_CAMBIOS_EMPRESAFrom.Value);
    			
    		if(ID_HIST_CAMBIOS_EMPRESATo.HasValue)
    			expression = expression.And(x => x.ID_HIST_CAMBIOS_EMPRESA <= ID_HIST_CAMBIOS_EMPRESATo.Value);
    				
    
    
    		if(ID_EMPRESA_ANT.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_ANT == ID_EMPRESA_ANT.Value);
    
    		if(ID_EMPRESA_ANTIN != null && ID_EMPRESA_ANTIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESA_ANTIN.Contains(x.ID_EMPRESA_ANT));
    	
    		if(ID_EMPRESA_ANTFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_ANT >= ID_EMPRESA_ANTFrom.Value);
    			
    		if(ID_EMPRESA_ANTTo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_ANT <= ID_EMPRESA_ANTTo.Value);
    				
    
    
    		if(ID_EMPRESA_NUEVA.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_NUEVA == ID_EMPRESA_NUEVA.Value);
    
    		if(ID_EMPRESA_NUEVAIN != null && ID_EMPRESA_NUEVAIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESA_NUEVAIN.Contains(x.ID_EMPRESA_NUEVA));
    	
    		if(ID_EMPRESA_NUEVAFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_NUEVA >= ID_EMPRESA_NUEVAFrom.Value);
    			
    		if(ID_EMPRESA_NUEVATo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_NUEVA <= ID_EMPRESA_NUEVATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(MATRICULA))  
    			expression = expression.And(x => x.MATRICULA.Equals(MATRICULA));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAContains))  
    			expression = expression.And(x => x.MATRICULA.Contains(MATRICULAContains));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAStartsWith))
    			expression = expression.And(x => x.MATRICULA.StartsWith(MATRICULAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MATRICULAEndsWith))
    			expression = expression.And(x => x.MATRICULA.EndsWith(MATRICULAEndsWith));
    
    		if(MATRICULAIN != null && MATRICULAIN.Count() > 0)
    			expression = expression.And(x => MATRICULAIN.Contains(x.MATRICULA));
    	
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACION))  
    			expression = expression.And(x => x.USUARIO_CREACION.Equals(USUARIO_CREACION));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONContains))  
    			expression = expression.And(x => x.USUARIO_CREACION.Contains(USUARIO_CREACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONStartsWith))
    			expression = expression.And(x => x.USUARIO_CREACION.StartsWith(USUARIO_CREACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONEndsWith))
    			expression = expression.And(x => x.USUARIO_CREACION.EndsWith(USUARIO_CREACIONEndsWith));
    
    		if(USUARIO_CREACIONIN != null && USUARIO_CREACIONIN.Count() > 0)
    			expression = expression.And(x => USUARIO_CREACIONIN.Contains(x.USUARIO_CREACION));
    
    		if(FECHA_ALTA.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA == FECHA_ALTA.Value);
    
    		if(FECHA_ALTAIN != null && FECHA_ALTAIN.Count() > 0)
    			expression = expression.And(x => FECHA_ALTAIN.Contains(x.FECHA_ALTA));
    	
    		if(FECHA_ALTAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA >= FECHA_ALTAFrom.Value);
    			
    		if(FECHA_ALTATo.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA <= FECHA_ALTATo.Value);
    				
    
    		if(FECHA_ALTAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ALTA >= FECHA_ALTAFromOrNull.Value || x.FECHA_ALTA == null);
    
            if(FECHA_ALTAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ALTA <= FECHA_ALTAToOrNull.Value || x.FECHA_ALTA == null);
    
    		if(ID_ESTADO.HasValue)
    			expression = expression.And(x => x.ID_ESTADO == ID_ESTADO.Value);
    
    		if(ID_ESTADOIN != null && ID_ESTADOIN.Count() > 0)
    			expression = expression.And(x => ID_ESTADOIN.Contains(x.ID_ESTADO));
    	
    		if(ID_ESTADOFrom.HasValue)
    			expression = expression.And(x => x.ID_ESTADO >= ID_ESTADOFrom.Value);
    			
    		if(ID_ESTADOTo.HasValue)
    			expression = expression.And(x => x.ID_ESTADO <= ID_ESTADOTo.Value);
    				
    
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_HIST_CAMBIOS_EMPRESA entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_HIST_CAMBIOS_EMPRESA> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
