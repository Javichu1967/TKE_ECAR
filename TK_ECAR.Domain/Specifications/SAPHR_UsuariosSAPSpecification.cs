//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class SAPHR_UsuariosSAPSpecification : ISpecification<SAPHR_UsuariosSAP>
    {
    
        public Nullable<int> NumeroEmpleado
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> NumeroEmpleadoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> NumeroEmpleadoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> NumeroEmpleadoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Logon
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LogonIN
    	{
    		get;
    		set;
    	}
    
    	public string LogonContains
    	{
    		get;
    		set;
    	}
    	
    	public string LogonStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LogonEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Nombre
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Apellido1
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Apellido1IN
    	{
    		get;
    		set;
    	}
    
    	public string Apellido1Contains
    	{
    		get;
    		set;
    	}
    	
    	public string Apellido1StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Apellido1EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Apellido2
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Apellido2IN
    	{
    		get;
    		set;
    	}
    
    	public string Apellido2Contains
    	{
    		get;
    		set;
    	}
    	
    	public string Apellido2StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Apellido2EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Email
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EmailIN
    	{
    		get;
    		set;
    	}
    
    	public string EmailContains
    	{
    		get;
    		set;
    	}
    	
    	public string EmailStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EmailEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdPuesto
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdPuestoIN
    	{
    		get;
    		set;
    	}
    
    	public string IdPuestoContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdPuestoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdPuestoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Puesto
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PuestoIN
    	{
    		get;
    		set;
    	}
    
    	public string PuestoContains
    	{
    		get;
    		set;
    	}
    	
    	public string PuestoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PuestoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdDivision
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdDivisionIN
    	{
    		get;
    		set;
    	}
    
    	public string IdDivisionContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdDivisionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdDivisionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Division
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DivisionIN
    	{
    		get;
    		set;
    	}
    
    	public string DivisionContains
    	{
    		get;
    		set;
    	}
    	
    	public string DivisionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DivisionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdSubdivision
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdSubdivisionIN
    	{
    		get;
    		set;
    	}
    
    	public string IdSubdivisionContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdSubdivisionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdSubdivisionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string SubDivision
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> SubDivisionIN
    	{
    		get;
    		set;
    	}
    
    	public string SubDivisionContains
    	{
    		get;
    		set;
    	}
    	
    	public string SubDivisionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string SubDivisionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdUniOrganizativa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdUniOrganizativaIN
    	{
    		get;
    		set;
    	}
    
    	public string IdUniOrganizativaContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdUniOrganizativaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdUniOrganizativaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string UniOrganizativa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> UniOrganizativaIN
    	{
    		get;
    		set;
    	}
    
    	public string UniOrganizativaContains
    	{
    		get;
    		set;
    	}
    	
    	public string UniOrganizativaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string UniOrganizativaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdCeco
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdCecoIN
    	{
    		get;
    		set;
    	}
    
    	public string IdCecoContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdCecoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdCecoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CentroCoste
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CentroCosteIN
    	{
    		get;
    		set;
    	}
    
    	public string CentroCosteContains
    	{
    		get;
    		set;
    	}
    	
    	public string CentroCosteStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CentroCosteEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdDelegacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdDelegacionIN
    	{
    		get;
    		set;
    	}
    
    	public string IdDelegacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdDelegacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdDelegacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Delegacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DelegacionIN
    	{
    		get;
    		set;
    	}
    
    	public string DelegacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string DelegacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DelegacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdDT
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdDTIN
    	{
    		get;
    		set;
    	}
    
    	public string IdDTContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdDTStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdDTEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DT
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DTIN
    	{
    		get;
    		set;
    	}
    
    	public string DTContains
    	{
    		get;
    		set;
    	}
    	
    	public string DTStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DTEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> IdDirArea
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IdDirAreaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> IdDirAreaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> IdDirAreaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string DirArea
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DirAreaIN
    	{
    		get;
    		set;
    	}
    
    	public string DirAreaContains
    	{
    		get;
    		set;
    	}
    	
    	public string DirAreaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DirAreaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdFuncion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdFuncionIN
    	{
    		get;
    		set;
    	}
    
    	public string IdFuncionContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdFuncionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdFuncionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Funcion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FuncionIN
    	{
    		get;
    		set;
    	}
    
    	public string FuncionContains
    	{
    		get;
    		set;
    	}
    	
    	public string FuncionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FuncionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdCategoriaProfesional
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdCategoriaProfesionalIN
    	{
    		get;
    		set;
    	}
    
    	public string IdCategoriaProfesionalContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdCategoriaProfesionalStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdCategoriaProfesionalEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CategoriaProfesional
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CategoriaProfesionalIN
    	{
    		get;
    		set;
    	}
    
    	public string CategoriaProfesionalContains
    	{
    		get;
    		set;
    	}
    	
    	public string CategoriaProfesionalStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CategoriaProfesionalEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> CodigoEmpresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> CodigoEmpresaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> CodigoEmpresaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> CodigoEmpresaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Empresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EmpresaIN
    	{
    		get;
    		set;
    	}
    
    	public string EmpresaContains
    	{
    		get;
    		set;
    	}
    	
    	public string EmpresaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EmpresaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdRelaLaboral
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdRelaLaboralIN
    	{
    		get;
    		set;
    	}
    
    	public string IdRelaLaboralContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdRelaLaboralStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdRelaLaboralEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string RelaLaboral
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> RelaLaboralIN
    	{
    		get;
    		set;
    	}
    
    	public string RelaLaboralContains
    	{
    		get;
    		set;
    	}
    	
    	public string RelaLaboralStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string RelaLaboralEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FechaAlta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaAltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaAltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaAltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaAltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaAltaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> FechaBaja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaBajaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaBajaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaBajaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaBajaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaBajaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<bool> Baja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BajaIN
    	{
    		get;
    		set;
    	}
    
        public string Dni
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DniIN
    	{
    		get;
    		set;
    	}
    
    	public string DniContains
    	{
    		get;
    		set;
    	}
    	
    	public string DniStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DniEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Domicilio
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DomicilioIN
    	{
    		get;
    		set;
    	}
    
    	public string DomicilioContains
    	{
    		get;
    		set;
    	}
    	
    	public string DomicilioStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DomicilioEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CodPostal
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CodPostalIN
    	{
    		get;
    		set;
    	}
    
    	public string CodPostalContains
    	{
    		get;
    		set;
    	}
    	
    	public string CodPostalStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CodPostalEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Poblacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PoblacionIN
    	{
    		get;
    		set;
    	}
    
    	public string PoblacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Provincia
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ProvinciaIN
    	{
    		get;
    		set;
    	}
    
    	public string ProvinciaContains
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FecNacimiento
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FecNacimientoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FecNacimientoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FecNacimientoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FecNacimientoFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FecNacimientoToOrNull
        {
            get;
            set;
        }
    		
    
        public string PaisNac
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PaisNacIN
    	{
    		get;
    		set;
    	}
    
    	public string PaisNacContains
    	{
    		get;
    		set;
    	}
    	
    	public string PaisNacStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PaisNacEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string LugarNac
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LugarNacIN
    	{
    		get;
    		set;
    	}
    
    	public string LugarNacContains
    	{
    		get;
    		set;
    	}
    	
    	public string LugarNacStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LugarNacEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string ProvinciaNac
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ProvinciaNacIN
    	{
    		get;
    		set;
    	}
    
    	public string ProvinciaNacContains
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaNacStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaNacEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NacionalidadNac
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NacionalidadNacIN
    	{
    		get;
    		set;
    	}
    
    	public string NacionalidadNacContains
    	{
    		get;
    		set;
    	}
    	
    	public string NacionalidadNacStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NacionalidadNacEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdProvincia
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdProvinciaIN
    	{
    		get;
    		set;
    	}
    
    	public string IdProvinciaContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdProvinciaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdProvinciaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FechaVolcado
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaVolcadoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaVolcadoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaVolcadoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaVolcadoFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaVolcadoToOrNull
        {
            get;
            set;
        }
    		
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="SAPHR_UsuariosSAPSpecification"/> class.
    	/// </summary>
    	public SAPHR_UsuariosSAPSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="SAPHR_UsuariosSAPSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public SAPHR_UsuariosSAPSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<SAPHR_UsuariosSAP, bool>> GetExpression()
    	{
    		Expression<Func<SAPHR_UsuariosSAP, bool>> expression = x => true;
    
    		if(NumeroEmpleado.HasValue)
    			expression = expression.And(x => x.NumeroEmpleado == NumeroEmpleado.Value);
    
    		if(NumeroEmpleadoIN != null && NumeroEmpleadoIN.Count() > 0)
    			expression = expression.And(x => NumeroEmpleadoIN.Contains(x.NumeroEmpleado));
    	
    		if(NumeroEmpleadoFrom.HasValue)
    			expression = expression.And(x => x.NumeroEmpleado >= NumeroEmpleadoFrom.Value);
    			
    		if(NumeroEmpleadoTo.HasValue)
    			expression = expression.And(x => x.NumeroEmpleado <= NumeroEmpleadoTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Logon))  
    			expression = expression.And(x => x.Logon.Equals(Logon));
    			
    		if(!string.IsNullOrWhiteSpace(LogonContains))  
    			expression = expression.And(x => x.Logon.Contains(LogonContains));
    			
    		if(!string.IsNullOrWhiteSpace(LogonStartsWith))
    			expression = expression.And(x => x.Logon.StartsWith(LogonStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LogonEndsWith))
    			expression = expression.And(x => x.Logon.EndsWith(LogonEndsWith));
    
    		if(LogonIN != null && LogonIN.Count() > 0)
    			expression = expression.And(x => LogonIN.Contains(x.Logon));
    	
    		if(!string.IsNullOrWhiteSpace(Nombre))  
    			expression = expression.And(x => x.Nombre.Equals(Nombre));
    			
    		if(!string.IsNullOrWhiteSpace(NombreContains))  
    			expression = expression.And(x => x.Nombre.Contains(NombreContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreStartsWith))
    			expression = expression.And(x => x.Nombre.StartsWith(NombreStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreEndsWith))
    			expression = expression.And(x => x.Nombre.EndsWith(NombreEndsWith));
    
    		if(NombreIN != null && NombreIN.Count() > 0)
    			expression = expression.And(x => NombreIN.Contains(x.Nombre));
    	
    		if(!string.IsNullOrWhiteSpace(Apellido1))  
    			expression = expression.And(x => x.Apellido1.Equals(Apellido1));
    			
    		if(!string.IsNullOrWhiteSpace(Apellido1Contains))  
    			expression = expression.And(x => x.Apellido1.Contains(Apellido1Contains));
    			
    		if(!string.IsNullOrWhiteSpace(Apellido1StartsWith))
    			expression = expression.And(x => x.Apellido1.StartsWith(Apellido1StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Apellido1EndsWith))
    			expression = expression.And(x => x.Apellido1.EndsWith(Apellido1EndsWith));
    
    		if(Apellido1IN != null && Apellido1IN.Count() > 0)
    			expression = expression.And(x => Apellido1IN.Contains(x.Apellido1));
    	
    		if(!string.IsNullOrWhiteSpace(Apellido2))  
    			expression = expression.And(x => x.Apellido2.Equals(Apellido2));
    			
    		if(!string.IsNullOrWhiteSpace(Apellido2Contains))  
    			expression = expression.And(x => x.Apellido2.Contains(Apellido2Contains));
    			
    		if(!string.IsNullOrWhiteSpace(Apellido2StartsWith))
    			expression = expression.And(x => x.Apellido2.StartsWith(Apellido2StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Apellido2EndsWith))
    			expression = expression.And(x => x.Apellido2.EndsWith(Apellido2EndsWith));
    
    		if(Apellido2IN != null && Apellido2IN.Count() > 0)
    			expression = expression.And(x => Apellido2IN.Contains(x.Apellido2));
    	
    		if(!string.IsNullOrWhiteSpace(Email))  
    			expression = expression.And(x => x.Email.Equals(Email));
    			
    		if(!string.IsNullOrWhiteSpace(EmailContains))  
    			expression = expression.And(x => x.Email.Contains(EmailContains));
    			
    		if(!string.IsNullOrWhiteSpace(EmailStartsWith))
    			expression = expression.And(x => x.Email.StartsWith(EmailStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EmailEndsWith))
    			expression = expression.And(x => x.Email.EndsWith(EmailEndsWith));
    
    		if(EmailIN != null && EmailIN.Count() > 0)
    			expression = expression.And(x => EmailIN.Contains(x.Email));
    	
    		if(!string.IsNullOrWhiteSpace(IdPuesto))  
    			expression = expression.And(x => x.IdPuesto.Equals(IdPuesto));
    			
    		if(!string.IsNullOrWhiteSpace(IdPuestoContains))  
    			expression = expression.And(x => x.IdPuesto.Contains(IdPuestoContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdPuestoStartsWith))
    			expression = expression.And(x => x.IdPuesto.StartsWith(IdPuestoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdPuestoEndsWith))
    			expression = expression.And(x => x.IdPuesto.EndsWith(IdPuestoEndsWith));
    
    		if(IdPuestoIN != null && IdPuestoIN.Count() > 0)
    			expression = expression.And(x => IdPuestoIN.Contains(x.IdPuesto));
    	
    		if(!string.IsNullOrWhiteSpace(Puesto))  
    			expression = expression.And(x => x.Puesto.Equals(Puesto));
    			
    		if(!string.IsNullOrWhiteSpace(PuestoContains))  
    			expression = expression.And(x => x.Puesto.Contains(PuestoContains));
    			
    		if(!string.IsNullOrWhiteSpace(PuestoStartsWith))
    			expression = expression.And(x => x.Puesto.StartsWith(PuestoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PuestoEndsWith))
    			expression = expression.And(x => x.Puesto.EndsWith(PuestoEndsWith));
    
    		if(PuestoIN != null && PuestoIN.Count() > 0)
    			expression = expression.And(x => PuestoIN.Contains(x.Puesto));
    	
    		if(!string.IsNullOrWhiteSpace(IdDivision))  
    			expression = expression.And(x => x.IdDivision.Equals(IdDivision));
    			
    		if(!string.IsNullOrWhiteSpace(IdDivisionContains))  
    			expression = expression.And(x => x.IdDivision.Contains(IdDivisionContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdDivisionStartsWith))
    			expression = expression.And(x => x.IdDivision.StartsWith(IdDivisionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdDivisionEndsWith))
    			expression = expression.And(x => x.IdDivision.EndsWith(IdDivisionEndsWith));
    
    		if(IdDivisionIN != null && IdDivisionIN.Count() > 0)
    			expression = expression.And(x => IdDivisionIN.Contains(x.IdDivision));
    	
    		if(!string.IsNullOrWhiteSpace(Division))  
    			expression = expression.And(x => x.Division.Equals(Division));
    			
    		if(!string.IsNullOrWhiteSpace(DivisionContains))  
    			expression = expression.And(x => x.Division.Contains(DivisionContains));
    			
    		if(!string.IsNullOrWhiteSpace(DivisionStartsWith))
    			expression = expression.And(x => x.Division.StartsWith(DivisionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DivisionEndsWith))
    			expression = expression.And(x => x.Division.EndsWith(DivisionEndsWith));
    
    		if(DivisionIN != null && DivisionIN.Count() > 0)
    			expression = expression.And(x => DivisionIN.Contains(x.Division));
    	
    		if(!string.IsNullOrWhiteSpace(IdSubdivision))  
    			expression = expression.And(x => x.IdSubdivision.Equals(IdSubdivision));
    			
    		if(!string.IsNullOrWhiteSpace(IdSubdivisionContains))  
    			expression = expression.And(x => x.IdSubdivision.Contains(IdSubdivisionContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdSubdivisionStartsWith))
    			expression = expression.And(x => x.IdSubdivision.StartsWith(IdSubdivisionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdSubdivisionEndsWith))
    			expression = expression.And(x => x.IdSubdivision.EndsWith(IdSubdivisionEndsWith));
    
    		if(IdSubdivisionIN != null && IdSubdivisionIN.Count() > 0)
    			expression = expression.And(x => IdSubdivisionIN.Contains(x.IdSubdivision));
    	
    		if(!string.IsNullOrWhiteSpace(SubDivision))  
    			expression = expression.And(x => x.SubDivision.Equals(SubDivision));
    			
    		if(!string.IsNullOrWhiteSpace(SubDivisionContains))  
    			expression = expression.And(x => x.SubDivision.Contains(SubDivisionContains));
    			
    		if(!string.IsNullOrWhiteSpace(SubDivisionStartsWith))
    			expression = expression.And(x => x.SubDivision.StartsWith(SubDivisionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(SubDivisionEndsWith))
    			expression = expression.And(x => x.SubDivision.EndsWith(SubDivisionEndsWith));
    
    		if(SubDivisionIN != null && SubDivisionIN.Count() > 0)
    			expression = expression.And(x => SubDivisionIN.Contains(x.SubDivision));
    	
    		if(!string.IsNullOrWhiteSpace(IdUniOrganizativa))  
    			expression = expression.And(x => x.IdUniOrganizativa.Equals(IdUniOrganizativa));
    			
    		if(!string.IsNullOrWhiteSpace(IdUniOrganizativaContains))  
    			expression = expression.And(x => x.IdUniOrganizativa.Contains(IdUniOrganizativaContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdUniOrganizativaStartsWith))
    			expression = expression.And(x => x.IdUniOrganizativa.StartsWith(IdUniOrganizativaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdUniOrganizativaEndsWith))
    			expression = expression.And(x => x.IdUniOrganizativa.EndsWith(IdUniOrganizativaEndsWith));
    
    		if(IdUniOrganizativaIN != null && IdUniOrganizativaIN.Count() > 0)
    			expression = expression.And(x => IdUniOrganizativaIN.Contains(x.IdUniOrganizativa));
    	
    		if(!string.IsNullOrWhiteSpace(UniOrganizativa))  
    			expression = expression.And(x => x.UniOrganizativa.Equals(UniOrganizativa));
    			
    		if(!string.IsNullOrWhiteSpace(UniOrganizativaContains))  
    			expression = expression.And(x => x.UniOrganizativa.Contains(UniOrganizativaContains));
    			
    		if(!string.IsNullOrWhiteSpace(UniOrganizativaStartsWith))
    			expression = expression.And(x => x.UniOrganizativa.StartsWith(UniOrganizativaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(UniOrganizativaEndsWith))
    			expression = expression.And(x => x.UniOrganizativa.EndsWith(UniOrganizativaEndsWith));
    
    		if(UniOrganizativaIN != null && UniOrganizativaIN.Count() > 0)
    			expression = expression.And(x => UniOrganizativaIN.Contains(x.UniOrganizativa));
    	
    		if(!string.IsNullOrWhiteSpace(IdCeco))  
    			expression = expression.And(x => x.IdCeco.Equals(IdCeco));
    			
    		if(!string.IsNullOrWhiteSpace(IdCecoContains))  
    			expression = expression.And(x => x.IdCeco.Contains(IdCecoContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdCecoStartsWith))
    			expression = expression.And(x => x.IdCeco.StartsWith(IdCecoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdCecoEndsWith))
    			expression = expression.And(x => x.IdCeco.EndsWith(IdCecoEndsWith));
    
    		if(IdCecoIN != null && IdCecoIN.Count() > 0)
    			expression = expression.And(x => IdCecoIN.Contains(x.IdCeco));
    	
    		if(!string.IsNullOrWhiteSpace(CentroCoste))  
    			expression = expression.And(x => x.CentroCoste.Equals(CentroCoste));
    			
    		if(!string.IsNullOrWhiteSpace(CentroCosteContains))  
    			expression = expression.And(x => x.CentroCoste.Contains(CentroCosteContains));
    			
    		if(!string.IsNullOrWhiteSpace(CentroCosteStartsWith))
    			expression = expression.And(x => x.CentroCoste.StartsWith(CentroCosteStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CentroCosteEndsWith))
    			expression = expression.And(x => x.CentroCoste.EndsWith(CentroCosteEndsWith));
    
    		if(CentroCosteIN != null && CentroCosteIN.Count() > 0)
    			expression = expression.And(x => CentroCosteIN.Contains(x.CentroCoste));
    	
    		if(!string.IsNullOrWhiteSpace(IdDelegacion))  
    			expression = expression.And(x => x.IdDelegacion.Equals(IdDelegacion));
    			
    		if(!string.IsNullOrWhiteSpace(IdDelegacionContains))  
    			expression = expression.And(x => x.IdDelegacion.Contains(IdDelegacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdDelegacionStartsWith))
    			expression = expression.And(x => x.IdDelegacion.StartsWith(IdDelegacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdDelegacionEndsWith))
    			expression = expression.And(x => x.IdDelegacion.EndsWith(IdDelegacionEndsWith));
    
    		if(IdDelegacionIN != null && IdDelegacionIN.Count() > 0)
    			expression = expression.And(x => IdDelegacionIN.Contains(x.IdDelegacion));
    	
    		if(!string.IsNullOrWhiteSpace(Delegacion))  
    			expression = expression.And(x => x.Delegacion.Equals(Delegacion));
    			
    		if(!string.IsNullOrWhiteSpace(DelegacionContains))  
    			expression = expression.And(x => x.Delegacion.Contains(DelegacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(DelegacionStartsWith))
    			expression = expression.And(x => x.Delegacion.StartsWith(DelegacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DelegacionEndsWith))
    			expression = expression.And(x => x.Delegacion.EndsWith(DelegacionEndsWith));
    
    		if(DelegacionIN != null && DelegacionIN.Count() > 0)
    			expression = expression.And(x => DelegacionIN.Contains(x.Delegacion));
    	
    		if(!string.IsNullOrWhiteSpace(IdDT))  
    			expression = expression.And(x => x.IdDT.Equals(IdDT));
    			
    		if(!string.IsNullOrWhiteSpace(IdDTContains))  
    			expression = expression.And(x => x.IdDT.Contains(IdDTContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdDTStartsWith))
    			expression = expression.And(x => x.IdDT.StartsWith(IdDTStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdDTEndsWith))
    			expression = expression.And(x => x.IdDT.EndsWith(IdDTEndsWith));
    
    		if(IdDTIN != null && IdDTIN.Count() > 0)
    			expression = expression.And(x => IdDTIN.Contains(x.IdDT));
    	
    		if(!string.IsNullOrWhiteSpace(DT))  
    			expression = expression.And(x => x.DT.Equals(DT));
    			
    		if(!string.IsNullOrWhiteSpace(DTContains))  
    			expression = expression.And(x => x.DT.Contains(DTContains));
    			
    		if(!string.IsNullOrWhiteSpace(DTStartsWith))
    			expression = expression.And(x => x.DT.StartsWith(DTStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DTEndsWith))
    			expression = expression.And(x => x.DT.EndsWith(DTEndsWith));
    
    		if(DTIN != null && DTIN.Count() > 0)
    			expression = expression.And(x => DTIN.Contains(x.DT));
    
    		if(IdDirArea.HasValue)
    			expression = expression.And(x => x.IdDirArea == IdDirArea.Value);
    
    		if(IdDirAreaIN != null && IdDirAreaIN.Count() > 0)
    			expression = expression.And(x => IdDirAreaIN.Contains(x.IdDirArea));
    	
    		if(IdDirAreaFrom.HasValue)
    			expression = expression.And(x => x.IdDirArea >= IdDirAreaFrom.Value);
    			
    		if(IdDirAreaTo.HasValue)
    			expression = expression.And(x => x.IdDirArea <= IdDirAreaTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(DirArea))  
    			expression = expression.And(x => x.DirArea.Equals(DirArea));
    			
    		if(!string.IsNullOrWhiteSpace(DirAreaContains))  
    			expression = expression.And(x => x.DirArea.Contains(DirAreaContains));
    			
    		if(!string.IsNullOrWhiteSpace(DirAreaStartsWith))
    			expression = expression.And(x => x.DirArea.StartsWith(DirAreaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DirAreaEndsWith))
    			expression = expression.And(x => x.DirArea.EndsWith(DirAreaEndsWith));
    
    		if(DirAreaIN != null && DirAreaIN.Count() > 0)
    			expression = expression.And(x => DirAreaIN.Contains(x.DirArea));
    	
    		if(!string.IsNullOrWhiteSpace(IdFuncion))  
    			expression = expression.And(x => x.IdFuncion.Equals(IdFuncion));
    			
    		if(!string.IsNullOrWhiteSpace(IdFuncionContains))  
    			expression = expression.And(x => x.IdFuncion.Contains(IdFuncionContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdFuncionStartsWith))
    			expression = expression.And(x => x.IdFuncion.StartsWith(IdFuncionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdFuncionEndsWith))
    			expression = expression.And(x => x.IdFuncion.EndsWith(IdFuncionEndsWith));
    
    		if(IdFuncionIN != null && IdFuncionIN.Count() > 0)
    			expression = expression.And(x => IdFuncionIN.Contains(x.IdFuncion));
    	
    		if(!string.IsNullOrWhiteSpace(Funcion))  
    			expression = expression.And(x => x.Funcion.Equals(Funcion));
    			
    		if(!string.IsNullOrWhiteSpace(FuncionContains))  
    			expression = expression.And(x => x.Funcion.Contains(FuncionContains));
    			
    		if(!string.IsNullOrWhiteSpace(FuncionStartsWith))
    			expression = expression.And(x => x.Funcion.StartsWith(FuncionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FuncionEndsWith))
    			expression = expression.And(x => x.Funcion.EndsWith(FuncionEndsWith));
    
    		if(FuncionIN != null && FuncionIN.Count() > 0)
    			expression = expression.And(x => FuncionIN.Contains(x.Funcion));
    	
    		if(!string.IsNullOrWhiteSpace(IdCategoriaProfesional))  
    			expression = expression.And(x => x.IdCategoriaProfesional.Equals(IdCategoriaProfesional));
    			
    		if(!string.IsNullOrWhiteSpace(IdCategoriaProfesionalContains))  
    			expression = expression.And(x => x.IdCategoriaProfesional.Contains(IdCategoriaProfesionalContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdCategoriaProfesionalStartsWith))
    			expression = expression.And(x => x.IdCategoriaProfesional.StartsWith(IdCategoriaProfesionalStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdCategoriaProfesionalEndsWith))
    			expression = expression.And(x => x.IdCategoriaProfesional.EndsWith(IdCategoriaProfesionalEndsWith));
    
    		if(IdCategoriaProfesionalIN != null && IdCategoriaProfesionalIN.Count() > 0)
    			expression = expression.And(x => IdCategoriaProfesionalIN.Contains(x.IdCategoriaProfesional));
    	
    		if(!string.IsNullOrWhiteSpace(CategoriaProfesional))  
    			expression = expression.And(x => x.CategoriaProfesional.Equals(CategoriaProfesional));
    			
    		if(!string.IsNullOrWhiteSpace(CategoriaProfesionalContains))  
    			expression = expression.And(x => x.CategoriaProfesional.Contains(CategoriaProfesionalContains));
    			
    		if(!string.IsNullOrWhiteSpace(CategoriaProfesionalStartsWith))
    			expression = expression.And(x => x.CategoriaProfesional.StartsWith(CategoriaProfesionalStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CategoriaProfesionalEndsWith))
    			expression = expression.And(x => x.CategoriaProfesional.EndsWith(CategoriaProfesionalEndsWith));
    
    		if(CategoriaProfesionalIN != null && CategoriaProfesionalIN.Count() > 0)
    			expression = expression.And(x => CategoriaProfesionalIN.Contains(x.CategoriaProfesional));
    
    		if(CodigoEmpresa.HasValue)
    			expression = expression.And(x => x.CodigoEmpresa == CodigoEmpresa.Value);
    
    		if(CodigoEmpresaIN != null && CodigoEmpresaIN.Count() > 0)
    			expression = expression.And(x => CodigoEmpresaIN.Contains(x.CodigoEmpresa));
    	
    		if(CodigoEmpresaFrom.HasValue)
    			expression = expression.And(x => x.CodigoEmpresa >= CodigoEmpresaFrom.Value);
    			
    		if(CodigoEmpresaTo.HasValue)
    			expression = expression.And(x => x.CodigoEmpresa <= CodigoEmpresaTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Empresa))  
    			expression = expression.And(x => x.Empresa.Equals(Empresa));
    			
    		if(!string.IsNullOrWhiteSpace(EmpresaContains))  
    			expression = expression.And(x => x.Empresa.Contains(EmpresaContains));
    			
    		if(!string.IsNullOrWhiteSpace(EmpresaStartsWith))
    			expression = expression.And(x => x.Empresa.StartsWith(EmpresaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EmpresaEndsWith))
    			expression = expression.And(x => x.Empresa.EndsWith(EmpresaEndsWith));
    
    		if(EmpresaIN != null && EmpresaIN.Count() > 0)
    			expression = expression.And(x => EmpresaIN.Contains(x.Empresa));
    	
    		if(!string.IsNullOrWhiteSpace(IdRelaLaboral))  
    			expression = expression.And(x => x.IdRelaLaboral.Equals(IdRelaLaboral));
    			
    		if(!string.IsNullOrWhiteSpace(IdRelaLaboralContains))  
    			expression = expression.And(x => x.IdRelaLaboral.Contains(IdRelaLaboralContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdRelaLaboralStartsWith))
    			expression = expression.And(x => x.IdRelaLaboral.StartsWith(IdRelaLaboralStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdRelaLaboralEndsWith))
    			expression = expression.And(x => x.IdRelaLaboral.EndsWith(IdRelaLaboralEndsWith));
    
    		if(IdRelaLaboralIN != null && IdRelaLaboralIN.Count() > 0)
    			expression = expression.And(x => IdRelaLaboralIN.Contains(x.IdRelaLaboral));
    	
    		if(!string.IsNullOrWhiteSpace(RelaLaboral))  
    			expression = expression.And(x => x.RelaLaboral.Equals(RelaLaboral));
    			
    		if(!string.IsNullOrWhiteSpace(RelaLaboralContains))  
    			expression = expression.And(x => x.RelaLaboral.Contains(RelaLaboralContains));
    			
    		if(!string.IsNullOrWhiteSpace(RelaLaboralStartsWith))
    			expression = expression.And(x => x.RelaLaboral.StartsWith(RelaLaboralStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(RelaLaboralEndsWith))
    			expression = expression.And(x => x.RelaLaboral.EndsWith(RelaLaboralEndsWith));
    
    		if(RelaLaboralIN != null && RelaLaboralIN.Count() > 0)
    			expression = expression.And(x => RelaLaboralIN.Contains(x.RelaLaboral));
    
    		if(FechaAlta.HasValue)
    			expression = expression.And(x => x.FechaAlta == FechaAlta.Value);
    
    		if(FechaAltaIN != null && FechaAltaIN.Count() > 0)
    			expression = expression.And(x => FechaAltaIN.Contains(x.FechaAlta));
    	
    		if(FechaAltaFrom.HasValue)
    			expression = expression.And(x => x.FechaAlta >= FechaAltaFrom.Value);
    			
    		if(FechaAltaTo.HasValue)
    			expression = expression.And(x => x.FechaAlta <= FechaAltaTo.Value);
    				
    
    		if(FechaAltaFromOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta >= FechaAltaFromOrNull.Value || x.FechaAlta == null);
    
            if(FechaAltaToOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta <= FechaAltaToOrNull.Value || x.FechaAlta == null);
    
    		if(FechaBaja.HasValue)
    			expression = expression.And(x => x.FechaBaja == FechaBaja.Value);
    
    		if(FechaBajaIN != null && FechaBajaIN.Count() > 0)
    			expression = expression.And(x => FechaBajaIN.Contains(x.FechaBaja));
    	
    		if(FechaBajaFrom.HasValue)
    			expression = expression.And(x => x.FechaBaja >= FechaBajaFrom.Value);
    			
    		if(FechaBajaTo.HasValue)
    			expression = expression.And(x => x.FechaBaja <= FechaBajaTo.Value);
    				
    
    		if(FechaBajaFromOrNull.HasValue)
                expression = expression.And(x => x.FechaBaja >= FechaBajaFromOrNull.Value || x.FechaBaja == null);
    
            if(FechaBajaToOrNull.HasValue)
                expression = expression.And(x => x.FechaBaja <= FechaBajaToOrNull.Value || x.FechaBaja == null);
    
    		if(Baja.HasValue)
    			expression = expression.And(x => x.Baja == Baja.Value);
    
    		if(BajaIN != null && BajaIN.Count() > 0)
    			expression = expression.And(x => BajaIN.Contains(x.Baja));
    	
    		if(!string.IsNullOrWhiteSpace(Dni))  
    			expression = expression.And(x => x.Dni.Equals(Dni));
    			
    		if(!string.IsNullOrWhiteSpace(DniContains))  
    			expression = expression.And(x => x.Dni.Contains(DniContains));
    			
    		if(!string.IsNullOrWhiteSpace(DniStartsWith))
    			expression = expression.And(x => x.Dni.StartsWith(DniStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DniEndsWith))
    			expression = expression.And(x => x.Dni.EndsWith(DniEndsWith));
    
    		if(DniIN != null && DniIN.Count() > 0)
    			expression = expression.And(x => DniIN.Contains(x.Dni));
    	
    		if(!string.IsNullOrWhiteSpace(Domicilio))  
    			expression = expression.And(x => x.Domicilio.Equals(Domicilio));
    			
    		if(!string.IsNullOrWhiteSpace(DomicilioContains))  
    			expression = expression.And(x => x.Domicilio.Contains(DomicilioContains));
    			
    		if(!string.IsNullOrWhiteSpace(DomicilioStartsWith))
    			expression = expression.And(x => x.Domicilio.StartsWith(DomicilioStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DomicilioEndsWith))
    			expression = expression.And(x => x.Domicilio.EndsWith(DomicilioEndsWith));
    
    		if(DomicilioIN != null && DomicilioIN.Count() > 0)
    			expression = expression.And(x => DomicilioIN.Contains(x.Domicilio));
    	
    		if(!string.IsNullOrWhiteSpace(CodPostal))  
    			expression = expression.And(x => x.CodPostal.Equals(CodPostal));
    			
    		if(!string.IsNullOrWhiteSpace(CodPostalContains))  
    			expression = expression.And(x => x.CodPostal.Contains(CodPostalContains));
    			
    		if(!string.IsNullOrWhiteSpace(CodPostalStartsWith))
    			expression = expression.And(x => x.CodPostal.StartsWith(CodPostalStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CodPostalEndsWith))
    			expression = expression.And(x => x.CodPostal.EndsWith(CodPostalEndsWith));
    
    		if(CodPostalIN != null && CodPostalIN.Count() > 0)
    			expression = expression.And(x => CodPostalIN.Contains(x.CodPostal));
    	
    		if(!string.IsNullOrWhiteSpace(Poblacion))  
    			expression = expression.And(x => x.Poblacion.Equals(Poblacion));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionContains))  
    			expression = expression.And(x => x.Poblacion.Contains(PoblacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionStartsWith))
    			expression = expression.And(x => x.Poblacion.StartsWith(PoblacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PoblacionEndsWith))
    			expression = expression.And(x => x.Poblacion.EndsWith(PoblacionEndsWith));
    
    		if(PoblacionIN != null && PoblacionIN.Count() > 0)
    			expression = expression.And(x => PoblacionIN.Contains(x.Poblacion));
    	
    		if(!string.IsNullOrWhiteSpace(Provincia))  
    			expression = expression.And(x => x.Provincia.Equals(Provincia));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaContains))  
    			expression = expression.And(x => x.Provincia.Contains(ProvinciaContains));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaStartsWith))
    			expression = expression.And(x => x.Provincia.StartsWith(ProvinciaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ProvinciaEndsWith))
    			expression = expression.And(x => x.Provincia.EndsWith(ProvinciaEndsWith));
    
    		if(ProvinciaIN != null && ProvinciaIN.Count() > 0)
    			expression = expression.And(x => ProvinciaIN.Contains(x.Provincia));
    
    		if(FecNacimiento.HasValue)
    			expression = expression.And(x => x.FecNacimiento == FecNacimiento.Value);
    
    		if(FecNacimientoIN != null && FecNacimientoIN.Count() > 0)
    			expression = expression.And(x => FecNacimientoIN.Contains(x.FecNacimiento));
    	
    		if(FecNacimientoFrom.HasValue)
    			expression = expression.And(x => x.FecNacimiento >= FecNacimientoFrom.Value);
    			
    		if(FecNacimientoTo.HasValue)
    			expression = expression.And(x => x.FecNacimiento <= FecNacimientoTo.Value);
    				
    
    		if(FecNacimientoFromOrNull.HasValue)
                expression = expression.And(x => x.FecNacimiento >= FecNacimientoFromOrNull.Value || x.FecNacimiento == null);
    
            if(FecNacimientoToOrNull.HasValue)
                expression = expression.And(x => x.FecNacimiento <= FecNacimientoToOrNull.Value || x.FecNacimiento == null);
    	
    		if(!string.IsNullOrWhiteSpace(PaisNac))  
    			expression = expression.And(x => x.PaisNac.Equals(PaisNac));
    			
    		if(!string.IsNullOrWhiteSpace(PaisNacContains))  
    			expression = expression.And(x => x.PaisNac.Contains(PaisNacContains));
    			
    		if(!string.IsNullOrWhiteSpace(PaisNacStartsWith))
    			expression = expression.And(x => x.PaisNac.StartsWith(PaisNacStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PaisNacEndsWith))
    			expression = expression.And(x => x.PaisNac.EndsWith(PaisNacEndsWith));
    
    		if(PaisNacIN != null && PaisNacIN.Count() > 0)
    			expression = expression.And(x => PaisNacIN.Contains(x.PaisNac));
    	
    		if(!string.IsNullOrWhiteSpace(LugarNac))  
    			expression = expression.And(x => x.LugarNac.Equals(LugarNac));
    			
    		if(!string.IsNullOrWhiteSpace(LugarNacContains))  
    			expression = expression.And(x => x.LugarNac.Contains(LugarNacContains));
    			
    		if(!string.IsNullOrWhiteSpace(LugarNacStartsWith))
    			expression = expression.And(x => x.LugarNac.StartsWith(LugarNacStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LugarNacEndsWith))
    			expression = expression.And(x => x.LugarNac.EndsWith(LugarNacEndsWith));
    
    		if(LugarNacIN != null && LugarNacIN.Count() > 0)
    			expression = expression.And(x => LugarNacIN.Contains(x.LugarNac));
    	
    		if(!string.IsNullOrWhiteSpace(ProvinciaNac))  
    			expression = expression.And(x => x.ProvinciaNac.Equals(ProvinciaNac));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaNacContains))  
    			expression = expression.And(x => x.ProvinciaNac.Contains(ProvinciaNacContains));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaNacStartsWith))
    			expression = expression.And(x => x.ProvinciaNac.StartsWith(ProvinciaNacStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ProvinciaNacEndsWith))
    			expression = expression.And(x => x.ProvinciaNac.EndsWith(ProvinciaNacEndsWith));
    
    		if(ProvinciaNacIN != null && ProvinciaNacIN.Count() > 0)
    			expression = expression.And(x => ProvinciaNacIN.Contains(x.ProvinciaNac));
    	
    		if(!string.IsNullOrWhiteSpace(NacionalidadNac))  
    			expression = expression.And(x => x.NacionalidadNac.Equals(NacionalidadNac));
    			
    		if(!string.IsNullOrWhiteSpace(NacionalidadNacContains))  
    			expression = expression.And(x => x.NacionalidadNac.Contains(NacionalidadNacContains));
    			
    		if(!string.IsNullOrWhiteSpace(NacionalidadNacStartsWith))
    			expression = expression.And(x => x.NacionalidadNac.StartsWith(NacionalidadNacStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NacionalidadNacEndsWith))
    			expression = expression.And(x => x.NacionalidadNac.EndsWith(NacionalidadNacEndsWith));
    
    		if(NacionalidadNacIN != null && NacionalidadNacIN.Count() > 0)
    			expression = expression.And(x => NacionalidadNacIN.Contains(x.NacionalidadNac));
    	
    		if(!string.IsNullOrWhiteSpace(IdProvincia))  
    			expression = expression.And(x => x.IdProvincia.Equals(IdProvincia));
    			
    		if(!string.IsNullOrWhiteSpace(IdProvinciaContains))  
    			expression = expression.And(x => x.IdProvincia.Contains(IdProvinciaContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdProvinciaStartsWith))
    			expression = expression.And(x => x.IdProvincia.StartsWith(IdProvinciaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdProvinciaEndsWith))
    			expression = expression.And(x => x.IdProvincia.EndsWith(IdProvinciaEndsWith));
    
    		if(IdProvinciaIN != null && IdProvinciaIN.Count() > 0)
    			expression = expression.And(x => IdProvinciaIN.Contains(x.IdProvincia));
    
    		if(FechaVolcado.HasValue)
    			expression = expression.And(x => x.FechaVolcado == FechaVolcado.Value);
    
    		if(FechaVolcadoIN != null && FechaVolcadoIN.Count() > 0)
    			expression = expression.And(x => FechaVolcadoIN.Contains(x.FechaVolcado));
    	
    		if(FechaVolcadoFrom.HasValue)
    			expression = expression.And(x => x.FechaVolcado >= FechaVolcadoFrom.Value);
    			
    		if(FechaVolcadoTo.HasValue)
    			expression = expression.And(x => x.FechaVolcado <= FechaVolcadoTo.Value);
    				
    
    		if(FechaVolcadoFromOrNull.HasValue)
                expression = expression.And(x => x.FechaVolcado >= FechaVolcadoFromOrNull.Value || x.FechaVolcado == null);
    
            if(FechaVolcadoToOrNull.HasValue)
                expression = expression.And(x => x.FechaVolcado <= FechaVolcadoToOrNull.Value || x.FechaVolcado == null);
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(SAPHR_UsuariosSAP entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<SAPHR_UsuariosSAP> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
