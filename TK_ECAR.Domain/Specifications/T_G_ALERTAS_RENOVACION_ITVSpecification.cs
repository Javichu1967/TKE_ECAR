//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_ALERTAS_RENOVACION_ITVSpecification : ISpecification<T_G_ALERTAS_RENOVACION_ITV>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FECHA_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_ITVFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_ITVTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_ITVFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_ITVToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> FECHA_CADUCIDAD_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_CADUCIDAD_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVToOrNull
        {
            get;
            set;
        }
    		
    
        public string FICHERO_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHERO_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHERO_ITVContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_ITVStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_ITVEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_G_ALERTASSpecification T_G_ALERTAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_RENOVACION_ITVSpecification"/> class.
    	/// </summary>
    	public T_G_ALERTAS_RENOVACION_ITVSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_RENOVACION_ITVSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_ALERTAS_RENOVACION_ITVSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS = new T_G_ALERTASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_ALERTAS_RENOVACION_ITV, bool>> GetExpression()
    	{
    		Expression<Func<T_G_ALERTAS_RENOVACION_ITV, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    
    		if(FECHA_ITV.HasValue)
    			expression = expression.And(x => x.FECHA_ITV == FECHA_ITV.Value);
    
    		if(FECHA_ITVIN != null && FECHA_ITVIN.Count() > 0)
    			expression = expression.And(x => FECHA_ITVIN.Contains(x.FECHA_ITV));
    	
    		if(FECHA_ITVFrom.HasValue)
    			expression = expression.And(x => x.FECHA_ITV >= FECHA_ITVFrom.Value);
    			
    		if(FECHA_ITVTo.HasValue)
    			expression = expression.And(x => x.FECHA_ITV <= FECHA_ITVTo.Value);
    				
    
    		if(FECHA_ITVFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ITV >= FECHA_ITVFromOrNull.Value || x.FECHA_ITV == null);
    
            if(FECHA_ITVToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ITV <= FECHA_ITVToOrNull.Value || x.FECHA_ITV == null);
    
    		if(FECHA_CADUCIDAD_ITV.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_ITV == FECHA_CADUCIDAD_ITV.Value);
    
    		if(FECHA_CADUCIDAD_ITVIN != null && FECHA_CADUCIDAD_ITVIN.Count() > 0)
    			expression = expression.And(x => FECHA_CADUCIDAD_ITVIN.Contains(x.FECHA_CADUCIDAD_ITV));
    	
    		if(FECHA_CADUCIDAD_ITVFrom.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_ITV >= FECHA_CADUCIDAD_ITVFrom.Value);
    			
    		if(FECHA_CADUCIDAD_ITVTo.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_ITV <= FECHA_CADUCIDAD_ITVTo.Value);
    				
    
    		if(FECHA_CADUCIDAD_ITVFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CADUCIDAD_ITV >= FECHA_CADUCIDAD_ITVFromOrNull.Value || x.FECHA_CADUCIDAD_ITV == null);
    
            if(FECHA_CADUCIDAD_ITVToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CADUCIDAD_ITV <= FECHA_CADUCIDAD_ITVToOrNull.Value || x.FECHA_CADUCIDAD_ITV == null);
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITV))  
    			expression = expression.And(x => x.FICHERO_ITV.Equals(FICHERO_ITV));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITVContains))  
    			expression = expression.And(x => x.FICHERO_ITV.Contains(FICHERO_ITVContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITVStartsWith))
    			expression = expression.And(x => x.FICHERO_ITV.StartsWith(FICHERO_ITVStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITVEndsWith))
    			expression = expression.And(x => x.FICHERO_ITV.EndsWith(FICHERO_ITVEndsWith));
    
    		if(FICHERO_ITVIN != null && FICHERO_ITVIN.Count() > 0)
    			expression = expression.And(x => FICHERO_ITVIN.Contains(x.FICHERO_ITV));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS != null)
    		{
    			var subExpression = T_G_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_ALERTAS_RENOVACION_ITV entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_ALERTAS_RENOVACION_ITV> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
