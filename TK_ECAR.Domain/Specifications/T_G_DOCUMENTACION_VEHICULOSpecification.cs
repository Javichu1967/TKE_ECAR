//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_DOCUMENTACION_VEHICULOSpecification : ISpecification<T_G_DOCUMENTACION_VEHICULO>
    {
    
        public Nullable<int> ID_DOCUMENTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_DOCUMENTOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_DOCUMENTOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_DOCUMENTOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string MATRICULA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MATRICULAIN
    	{
    		get;
    		set;
    	}
    
    	public string MATRICULAContains
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DESCRIPCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DESCRIPCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DESCRIPCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string FICHERO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHEROIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHEROContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHEROStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHEROEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_ALTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_ALTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_ALTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_ALTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_ALTAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_ALTAToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<int> ID_TIPO_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_TIPO_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        #region Navigation Properties
    
    	public T_M_TIPOS_ALERTASSpecification T_M_TIPOS_ALERTAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_DOCUMENTACION_VEHICULOSpecification"/> class.
    	/// </summary>
    	public T_G_DOCUMENTACION_VEHICULOSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_DOCUMENTACION_VEHICULOSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_DOCUMENTACION_VEHICULOSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_M_TIPOS_ALERTAS = new T_M_TIPOS_ALERTASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_DOCUMENTACION_VEHICULO, bool>> GetExpression()
    	{
    		Expression<Func<T_G_DOCUMENTACION_VEHICULO, bool>> expression = x => true;
    
    		if(ID_DOCUMENTO.HasValue)
    			expression = expression.And(x => x.ID_DOCUMENTO == ID_DOCUMENTO.Value);
    
    		if(ID_DOCUMENTOIN != null && ID_DOCUMENTOIN.Count() > 0)
    			expression = expression.And(x => ID_DOCUMENTOIN.Contains(x.ID_DOCUMENTO));
    	
    		if(ID_DOCUMENTOFrom.HasValue)
    			expression = expression.And(x => x.ID_DOCUMENTO >= ID_DOCUMENTOFrom.Value);
    			
    		if(ID_DOCUMENTOTo.HasValue)
    			expression = expression.And(x => x.ID_DOCUMENTO <= ID_DOCUMENTOTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(MATRICULA))  
    			expression = expression.And(x => x.MATRICULA.Equals(MATRICULA));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAContains))  
    			expression = expression.And(x => x.MATRICULA.Contains(MATRICULAContains));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAStartsWith))
    			expression = expression.And(x => x.MATRICULA.StartsWith(MATRICULAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MATRICULAEndsWith))
    			expression = expression.And(x => x.MATRICULA.EndsWith(MATRICULAEndsWith));
    
    		if(MATRICULAIN != null && MATRICULAIN.Count() > 0)
    			expression = expression.And(x => MATRICULAIN.Contains(x.MATRICULA));
    	
    		if(!string.IsNullOrWhiteSpace(DESCRIPCION))  
    			expression = expression.And(x => x.DESCRIPCION.Equals(DESCRIPCION));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONContains))  
    			expression = expression.And(x => x.DESCRIPCION.Contains(DESCRIPCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONStartsWith))
    			expression = expression.And(x => x.DESCRIPCION.StartsWith(DESCRIPCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONEndsWith))
    			expression = expression.And(x => x.DESCRIPCION.EndsWith(DESCRIPCIONEndsWith));
    
    		if(DESCRIPCIONIN != null && DESCRIPCIONIN.Count() > 0)
    			expression = expression.And(x => DESCRIPCIONIN.Contains(x.DESCRIPCION));
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO))  
    			expression = expression.And(x => x.FICHERO.Equals(FICHERO));
    			
    		if(!string.IsNullOrWhiteSpace(FICHEROContains))  
    			expression = expression.And(x => x.FICHERO.Contains(FICHEROContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHEROStartsWith))
    			expression = expression.And(x => x.FICHERO.StartsWith(FICHEROStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHEROEndsWith))
    			expression = expression.And(x => x.FICHERO.EndsWith(FICHEROEndsWith));
    
    		if(FICHEROIN != null && FICHEROIN.Count() > 0)
    			expression = expression.And(x => FICHEROIN.Contains(x.FICHERO));
    
    		if(FECHA_ALTA.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA == FECHA_ALTA.Value);
    
    		if(FECHA_ALTAIN != null && FECHA_ALTAIN.Count() > 0)
    			expression = expression.And(x => FECHA_ALTAIN.Contains(x.FECHA_ALTA));
    	
    		if(FECHA_ALTAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA >= FECHA_ALTAFrom.Value);
    			
    		if(FECHA_ALTATo.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA <= FECHA_ALTATo.Value);
    				
    
    		if(FECHA_ALTAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ALTA >= FECHA_ALTAFromOrNull.Value || x.FECHA_ALTA == null);
    
            if(FECHA_ALTAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ALTA <= FECHA_ALTAToOrNull.Value || x.FECHA_ALTA == null);
    
    		if(ID_TIPO_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_TIPO_ALERTA == ID_TIPO_ALERTA.Value);
    
    		if(ID_TIPO_ALERTAIN != null && ID_TIPO_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_TIPO_ALERTAIN.Contains(x.ID_TIPO_ALERTA));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_M_TIPOS_ALERTAS != null)
    		{
    			var subExpression = T_M_TIPOS_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_TIPOS_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_DOCUMENTACION_VEHICULO entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_DOCUMENTACION_VEHICULO> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
