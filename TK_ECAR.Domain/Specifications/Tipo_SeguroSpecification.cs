//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class Tipo_SeguroSpecification : ISpecification<Tipo_Seguro>
    {
    
        public Nullable<int> Cod_Tipo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Cod_TipoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Cod_TipoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Cod_TipoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Tipo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TipoIN
    	{
    		get;
    		set;
    	}
    
    	public string TipoContains
    	{
    		get;
    		set;
    	}
    	
    	public string TipoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TipoEndsWith
    	{
    		get;
    		set;
    	}
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="Tipo_SeguroSpecification"/> class.
    	/// </summary>
    	public Tipo_SeguroSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="Tipo_SeguroSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public Tipo_SeguroSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<Tipo_Seguro, bool>> GetExpression()
    	{
    		Expression<Func<Tipo_Seguro, bool>> expression = x => true;
    
    		if(Cod_Tipo.HasValue)
    			expression = expression.And(x => x.Cod_Tipo == Cod_Tipo.Value);
    
    		if(Cod_TipoIN != null && Cod_TipoIN.Count() > 0)
    			expression = expression.And(x => Cod_TipoIN.Contains(x.Cod_Tipo));
    	
    		if(Cod_TipoFrom.HasValue)
    			expression = expression.And(x => x.Cod_Tipo >= Cod_TipoFrom.Value);
    			
    		if(Cod_TipoTo.HasValue)
    			expression = expression.And(x => x.Cod_Tipo <= Cod_TipoTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Tipo))  
    			expression = expression.And(x => x.Tipo.Equals(Tipo));
    			
    		if(!string.IsNullOrWhiteSpace(TipoContains))  
    			expression = expression.And(x => x.Tipo.Contains(TipoContains));
    			
    		if(!string.IsNullOrWhiteSpace(TipoStartsWith))
    			expression = expression.And(x => x.Tipo.StartsWith(TipoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TipoEndsWith))
    			expression = expression.And(x => x.Tipo.EndsWith(TipoEndsWith));
    
    		if(TipoIN != null && TipoIN.Count() > 0)
    			expression = expression.And(x => TipoIN.Contains(x.Tipo));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(Tipo_Seguro entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<Tipo_Seguro> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
