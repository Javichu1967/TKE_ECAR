//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_M_EMPRESAS_VEHICULOSSpecification : ISpecification<T_M_EMPRESAS_VEHICULOS>
    {
    
        public Nullable<int> ID_EMPRESA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string NOMBRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBREIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBREContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NUM_DOCUMENTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NUM_DOCUMENTOIN
    	{
    		get;
    		set;
    	}
    
    	public string NUM_DOCUMENTOContains
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_DOCUMENTOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_DOCUMENTOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DIRECCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DIRECCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DIRECCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DIRECCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DIRECCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string POBLACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> POBLACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string POBLACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string POBLACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string POBLACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CODPOSTAL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CODPOSTALIN
    	{
    		get;
    		set;
    	}
    
    	public string CODPOSTALContains
    	{
    		get;
    		set;
    	}
    	
    	public string CODPOSTALStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CODPOSTALEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string PERSONA_CONTACTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PERSONA_CONTACTOIN
    	{
    		get;
    		set;
    	}
    
    	public string PERSONA_CONTACTOContains
    	{
    		get;
    		set;
    	}
    	
    	public string PERSONA_CONTACTOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PERSONA_CONTACTOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TELEFONO1
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TELEFONO1IN
    	{
    		get;
    		set;
    	}
    
    	public string TELEFONO1Contains
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO1StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO1EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TELEFONO2
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TELEFONO2IN
    	{
    		get;
    		set;
    	}
    
    	public string TELEFONO2Contains
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO2StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO2EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string EMAIL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EMAILIN
    	{
    		get;
    		set;
    	}
    
    	public string EMAILContains
    	{
    		get;
    		set;
    	}
    	
    	public string EMAILStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EMAILEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> RENTING
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> RENTINGIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> ASEGURADORA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> ASEGURADORAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> BAJA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BAJAIN
    	{
    		get;
    		set;
    	}
    
        #region Navigation Properties
    
    	public ECAR_Datos_VehiculoSpecification ECAR_Datos_Vehiculo
        {
            get;
    		set;
    	}
    
    	public T_G_DATOS_LEASINGSpecification T_G_DATOS_LEASING
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_M_EMPRESAS_VEHICULOSSpecification"/> class.
    	/// </summary>
    	public T_M_EMPRESAS_VEHICULOSSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_M_EMPRESAS_VEHICULOSSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_M_EMPRESAS_VEHICULOSSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.ECAR_Datos_Vehiculo = new ECAR_Datos_VehiculoSpecification();
    		this.T_G_DATOS_LEASING = new T_G_DATOS_LEASINGSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_M_EMPRESAS_VEHICULOS, bool>> GetExpression()
    	{
    		Expression<Func<T_M_EMPRESAS_VEHICULOS, bool>> expression = x => true;
    
    		if(ID_EMPRESA.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA == ID_EMPRESA.Value);
    
    		if(ID_EMPRESAIN != null && ID_EMPRESAIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESAIN.Contains(x.ID_EMPRESA));
    	
    		if(ID_EMPRESAFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA >= ID_EMPRESAFrom.Value);
    			
    		if(ID_EMPRESATo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA <= ID_EMPRESATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE))  
    			expression = expression.And(x => x.NOMBRE.Equals(NOMBRE));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREContains))  
    			expression = expression.And(x => x.NOMBRE.Contains(NOMBREContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREStartsWith))
    			expression = expression.And(x => x.NOMBRE.StartsWith(NOMBREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBREEndsWith))
    			expression = expression.And(x => x.NOMBRE.EndsWith(NOMBREEndsWith));
    
    		if(NOMBREIN != null && NOMBREIN.Count() > 0)
    			expression = expression.And(x => NOMBREIN.Contains(x.NOMBRE));
    	
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTO))  
    			expression = expression.And(x => x.NUM_DOCUMENTO.Equals(NUM_DOCUMENTO));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTOContains))  
    			expression = expression.And(x => x.NUM_DOCUMENTO.Contains(NUM_DOCUMENTOContains));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTOStartsWith))
    			expression = expression.And(x => x.NUM_DOCUMENTO.StartsWith(NUM_DOCUMENTOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTOEndsWith))
    			expression = expression.And(x => x.NUM_DOCUMENTO.EndsWith(NUM_DOCUMENTOEndsWith));
    
    		if(NUM_DOCUMENTOIN != null && NUM_DOCUMENTOIN.Count() > 0)
    			expression = expression.And(x => NUM_DOCUMENTOIN.Contains(x.NUM_DOCUMENTO));
    	
    		if(!string.IsNullOrWhiteSpace(DIRECCION))  
    			expression = expression.And(x => x.DIRECCION.Equals(DIRECCION));
    			
    		if(!string.IsNullOrWhiteSpace(DIRECCIONContains))  
    			expression = expression.And(x => x.DIRECCION.Contains(DIRECCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DIRECCIONStartsWith))
    			expression = expression.And(x => x.DIRECCION.StartsWith(DIRECCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DIRECCIONEndsWith))
    			expression = expression.And(x => x.DIRECCION.EndsWith(DIRECCIONEndsWith));
    
    		if(DIRECCIONIN != null && DIRECCIONIN.Count() > 0)
    			expression = expression.And(x => DIRECCIONIN.Contains(x.DIRECCION));
    	
    		if(!string.IsNullOrWhiteSpace(POBLACION))  
    			expression = expression.And(x => x.POBLACION.Equals(POBLACION));
    			
    		if(!string.IsNullOrWhiteSpace(POBLACIONContains))  
    			expression = expression.And(x => x.POBLACION.Contains(POBLACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(POBLACIONStartsWith))
    			expression = expression.And(x => x.POBLACION.StartsWith(POBLACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(POBLACIONEndsWith))
    			expression = expression.And(x => x.POBLACION.EndsWith(POBLACIONEndsWith));
    
    		if(POBLACIONIN != null && POBLACIONIN.Count() > 0)
    			expression = expression.And(x => POBLACIONIN.Contains(x.POBLACION));
    	
    		if(!string.IsNullOrWhiteSpace(CODPOSTAL))  
    			expression = expression.And(x => x.CODPOSTAL.Equals(CODPOSTAL));
    			
    		if(!string.IsNullOrWhiteSpace(CODPOSTALContains))  
    			expression = expression.And(x => x.CODPOSTAL.Contains(CODPOSTALContains));
    			
    		if(!string.IsNullOrWhiteSpace(CODPOSTALStartsWith))
    			expression = expression.And(x => x.CODPOSTAL.StartsWith(CODPOSTALStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CODPOSTALEndsWith))
    			expression = expression.And(x => x.CODPOSTAL.EndsWith(CODPOSTALEndsWith));
    
    		if(CODPOSTALIN != null && CODPOSTALIN.Count() > 0)
    			expression = expression.And(x => CODPOSTALIN.Contains(x.CODPOSTAL));
    	
    		if(!string.IsNullOrWhiteSpace(PERSONA_CONTACTO))  
    			expression = expression.And(x => x.PERSONA_CONTACTO.Equals(PERSONA_CONTACTO));
    			
    		if(!string.IsNullOrWhiteSpace(PERSONA_CONTACTOContains))  
    			expression = expression.And(x => x.PERSONA_CONTACTO.Contains(PERSONA_CONTACTOContains));
    			
    		if(!string.IsNullOrWhiteSpace(PERSONA_CONTACTOStartsWith))
    			expression = expression.And(x => x.PERSONA_CONTACTO.StartsWith(PERSONA_CONTACTOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PERSONA_CONTACTOEndsWith))
    			expression = expression.And(x => x.PERSONA_CONTACTO.EndsWith(PERSONA_CONTACTOEndsWith));
    
    		if(PERSONA_CONTACTOIN != null && PERSONA_CONTACTOIN.Count() > 0)
    			expression = expression.And(x => PERSONA_CONTACTOIN.Contains(x.PERSONA_CONTACTO));
    	
    		if(!string.IsNullOrWhiteSpace(TELEFONO1))  
    			expression = expression.And(x => x.TELEFONO1.Equals(TELEFONO1));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO1Contains))  
    			expression = expression.And(x => x.TELEFONO1.Contains(TELEFONO1Contains));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO1StartsWith))
    			expression = expression.And(x => x.TELEFONO1.StartsWith(TELEFONO1StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TELEFONO1EndsWith))
    			expression = expression.And(x => x.TELEFONO1.EndsWith(TELEFONO1EndsWith));
    
    		if(TELEFONO1IN != null && TELEFONO1IN.Count() > 0)
    			expression = expression.And(x => TELEFONO1IN.Contains(x.TELEFONO1));
    	
    		if(!string.IsNullOrWhiteSpace(TELEFONO2))  
    			expression = expression.And(x => x.TELEFONO2.Equals(TELEFONO2));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO2Contains))  
    			expression = expression.And(x => x.TELEFONO2.Contains(TELEFONO2Contains));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO2StartsWith))
    			expression = expression.And(x => x.TELEFONO2.StartsWith(TELEFONO2StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TELEFONO2EndsWith))
    			expression = expression.And(x => x.TELEFONO2.EndsWith(TELEFONO2EndsWith));
    
    		if(TELEFONO2IN != null && TELEFONO2IN.Count() > 0)
    			expression = expression.And(x => TELEFONO2IN.Contains(x.TELEFONO2));
    	
    		if(!string.IsNullOrWhiteSpace(EMAIL))  
    			expression = expression.And(x => x.EMAIL.Equals(EMAIL));
    			
    		if(!string.IsNullOrWhiteSpace(EMAILContains))  
    			expression = expression.And(x => x.EMAIL.Contains(EMAILContains));
    			
    		if(!string.IsNullOrWhiteSpace(EMAILStartsWith))
    			expression = expression.And(x => x.EMAIL.StartsWith(EMAILStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EMAILEndsWith))
    			expression = expression.And(x => x.EMAIL.EndsWith(EMAILEndsWith));
    
    		if(EMAILIN != null && EMAILIN.Count() > 0)
    			expression = expression.And(x => EMAILIN.Contains(x.EMAIL));
    
    		if(RENTING.HasValue)
    			expression = expression.And(x => x.RENTING == RENTING.Value);
    
    		if(RENTINGIN != null && RENTINGIN.Count() > 0)
    			expression = expression.And(x => RENTINGIN.Contains(x.RENTING));
    
    		if(ASEGURADORA.HasValue)
    			expression = expression.And(x => x.ASEGURADORA == ASEGURADORA.Value);
    
    		if(ASEGURADORAIN != null && ASEGURADORAIN.Count() > 0)
    			expression = expression.And(x => ASEGURADORAIN.Contains(x.ASEGURADORA));
    
    		if(BAJA.HasValue)
    			expression = expression.And(x => x.BAJA == BAJA.Value);
    
    		if(BAJAIN != null && BAJAIN.Count() > 0)
    			expression = expression.And(x => BAJAIN.Contains(x.BAJA));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.ECAR_Datos_Vehiculo != null)
    		{
    			var subExpression = ECAR_Datos_Vehiculo.GetExpression();
    			expression = expression.And(x => x.ECAR_Datos_Vehiculo.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_DATOS_LEASING != null)
    		{
    			var subExpression = T_G_DATOS_LEASING.GetExpression();
    			expression = expression.And(x => x.T_G_DATOS_LEASING.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_M_EMPRESAS_VEHICULOS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_M_EMPRESAS_VEHICULOS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
