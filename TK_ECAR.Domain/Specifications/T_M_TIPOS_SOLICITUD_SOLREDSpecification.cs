//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_M_TIPOS_SOLICITUD_SOLREDSpecification : ISpecification<T_M_TIPOS_SOLICITUD_SOLRED>
    {
    
        public Nullable<int> ID_TIPO_SOLICITUD_SOLRED
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_TIPO_SOLICITUD_SOLREDIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_TIPO_SOLICITUD_SOLREDFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_TIPO_SOLICITUD_SOLREDTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string DESCRIPCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DESCRIPCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DESCRIPCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_G_ALERTAS_SOLICITUD_SOLREDSpecification T_G_ALERTAS_SOLICITUD_SOLRED
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_M_TIPOS_SOLICITUD_SOLREDSpecification"/> class.
    	/// </summary>
    	public T_M_TIPOS_SOLICITUD_SOLREDSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_M_TIPOS_SOLICITUD_SOLREDSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_M_TIPOS_SOLICITUD_SOLREDSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS_SOLICITUD_SOLRED = new T_G_ALERTAS_SOLICITUD_SOLREDSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_M_TIPOS_SOLICITUD_SOLRED, bool>> GetExpression()
    	{
    		Expression<Func<T_M_TIPOS_SOLICITUD_SOLRED, bool>> expression = x => true;
    
    		if(ID_TIPO_SOLICITUD_SOLRED.HasValue)
    			expression = expression.And(x => x.ID_TIPO_SOLICITUD_SOLRED == ID_TIPO_SOLICITUD_SOLRED.Value);
    
    		if(ID_TIPO_SOLICITUD_SOLREDIN != null && ID_TIPO_SOLICITUD_SOLREDIN.Count() > 0)
    			expression = expression.And(x => ID_TIPO_SOLICITUD_SOLREDIN.Contains(x.ID_TIPO_SOLICITUD_SOLRED));
    	
    		if(ID_TIPO_SOLICITUD_SOLREDFrom.HasValue)
    			expression = expression.And(x => x.ID_TIPO_SOLICITUD_SOLRED >= ID_TIPO_SOLICITUD_SOLREDFrom.Value);
    			
    		if(ID_TIPO_SOLICITUD_SOLREDTo.HasValue)
    			expression = expression.And(x => x.ID_TIPO_SOLICITUD_SOLRED <= ID_TIPO_SOLICITUD_SOLREDTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(DESCRIPCION))  
    			expression = expression.And(x => x.DESCRIPCION.Equals(DESCRIPCION));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONContains))  
    			expression = expression.And(x => x.DESCRIPCION.Contains(DESCRIPCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONStartsWith))
    			expression = expression.And(x => x.DESCRIPCION.StartsWith(DESCRIPCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONEndsWith))
    			expression = expression.And(x => x.DESCRIPCION.EndsWith(DESCRIPCIONEndsWith));
    
    		if(DESCRIPCIONIN != null && DESCRIPCIONIN.Count() > 0)
    			expression = expression.And(x => DESCRIPCIONIN.Contains(x.DESCRIPCION));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS_SOLICITUD_SOLRED != null)
    		{
    			var subExpression = T_G_ALERTAS_SOLICITUD_SOLRED.GetExpression();
    			expression = expression.And(x => x.T_G_ALERTAS_SOLICITUD_SOLRED.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_M_TIPOS_SOLICITUD_SOLRED entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_M_TIPOS_SOLICITUD_SOLRED> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
