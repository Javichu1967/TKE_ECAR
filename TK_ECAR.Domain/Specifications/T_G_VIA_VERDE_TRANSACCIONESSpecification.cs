//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_VIA_VERDE_TRANSACCIONESSpecification : ISpecification<T_G_VIA_VERDE_TRANSACCIONES>
    {
    
        public Nullable<int> ID_TRANSACCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_TRANSACCIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_TRANSACCIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_TRANSACCIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_IDENTIFICADOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_IDENTIFICADORIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FECHA_ENTRADA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_ENTRADAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_ENTRADAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_ENTRADATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_ENTRADAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_ENTRADAToOrNull
        {
            get;
            set;
        }
    		
    
        public string LUGAR_ENTRADA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LUGAR_ENTRADAIN
    	{
    		get;
    		set;
    	}
    
    	public string LUGAR_ENTRADAContains
    	{
    		get;
    		set;
    	}
    	
    	public string LUGAR_ENTRADAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LUGAR_ENTRADAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_SALIDA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_SALIDAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_SALIDAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_SALIDATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_SALIDAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_SALIDAToOrNull
        {
            get;
            set;
        }
    		
    
        public string LUGAR_SALIDA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LUGAR_SALIDAIN
    	{
    		get;
    		set;
    	}
    
    	public string LUGAR_SALIDAContains
    	{
    		get;
    		set;
    	}
    	
    	public string LUGAR_SALIDAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LUGAR_SALIDAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<decimal> IMPORTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<decimal>> IMPORTEIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<decimal> IMPORTEFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<decimal> IMPORTETo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<decimal> DECUENTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<decimal>> DECUENTOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<decimal> DECUENTOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<decimal> DECUENTOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<decimal> PORCENTAJE_IMPUESTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<decimal>> PORCENTAJE_IMPUESTOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<decimal> PORCENTAJE_IMPUESTOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<decimal> PORCENTAJE_IMPUESTOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string OPERADOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> OPERADORIN
    	{
    		get;
    		set;
    	}
    
    	public string OPERADORContains
    	{
    		get;
    		set;
    	}
    	
    	public string OPERADORStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string OPERADOREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TIPO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TIPOIN
    	{
    		get;
    		set;
    	}
    
    	public string TIPOContains
    	{
    		get;
    		set;
    	}
    	
    	public string TIPOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TIPOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_TARJETA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_TARJETAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_TARJETAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_TARJETATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_TARJETAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_TARJETAToOrNull
        {
            get;
            set;
        }
    		
    
        public string NUM_TARJETA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NUM_TARJETAIN
    	{
    		get;
    		set;
    	}
    
    	public string NUM_TARJETAContains
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_TARJETAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_TARJETAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_G_VIA_VERDE_IDENTIFICADORESSpecification T_G_VIA_VERDE_IDENTIFICADORES
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_VIA_VERDE_TRANSACCIONESSpecification"/> class.
    	/// </summary>
    	public T_G_VIA_VERDE_TRANSACCIONESSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_VIA_VERDE_TRANSACCIONESSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_VIA_VERDE_TRANSACCIONESSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_VIA_VERDE_IDENTIFICADORES = new T_G_VIA_VERDE_IDENTIFICADORESSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_VIA_VERDE_TRANSACCIONES, bool>> GetExpression()
    	{
    		Expression<Func<T_G_VIA_VERDE_TRANSACCIONES, bool>> expression = x => true;
    
    		if(ID_TRANSACCION.HasValue)
    			expression = expression.And(x => x.ID_TRANSACCION == ID_TRANSACCION.Value);
    
    		if(ID_TRANSACCIONIN != null && ID_TRANSACCIONIN.Count() > 0)
    			expression = expression.And(x => ID_TRANSACCIONIN.Contains(x.ID_TRANSACCION));
    	
    		if(ID_TRANSACCIONFrom.HasValue)
    			expression = expression.And(x => x.ID_TRANSACCION >= ID_TRANSACCIONFrom.Value);
    			
    		if(ID_TRANSACCIONTo.HasValue)
    			expression = expression.And(x => x.ID_TRANSACCION <= ID_TRANSACCIONTo.Value);
    				
    
    
    		if(ID_IDENTIFICADOR.HasValue)
    			expression = expression.And(x => x.ID_IDENTIFICADOR == ID_IDENTIFICADOR.Value);
    
    		if(ID_IDENTIFICADORIN != null && ID_IDENTIFICADORIN.Count() > 0)
    			expression = expression.And(x => ID_IDENTIFICADORIN.Contains(x.ID_IDENTIFICADOR));
    
    		if(FECHA_ENTRADA.HasValue)
    			expression = expression.And(x => x.FECHA_ENTRADA == FECHA_ENTRADA.Value);
    
    		if(FECHA_ENTRADAIN != null && FECHA_ENTRADAIN.Count() > 0)
    			expression = expression.And(x => FECHA_ENTRADAIN.Contains(x.FECHA_ENTRADA));
    	
    		if(FECHA_ENTRADAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_ENTRADA >= FECHA_ENTRADAFrom.Value);
    			
    		if(FECHA_ENTRADATo.HasValue)
    			expression = expression.And(x => x.FECHA_ENTRADA <= FECHA_ENTRADATo.Value);
    				
    
    		if(FECHA_ENTRADAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ENTRADA >= FECHA_ENTRADAFromOrNull.Value || x.FECHA_ENTRADA == null);
    
            if(FECHA_ENTRADAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ENTRADA <= FECHA_ENTRADAToOrNull.Value || x.FECHA_ENTRADA == null);
    	
    		if(!string.IsNullOrWhiteSpace(LUGAR_ENTRADA))  
    			expression = expression.And(x => x.LUGAR_ENTRADA.Equals(LUGAR_ENTRADA));
    			
    		if(!string.IsNullOrWhiteSpace(LUGAR_ENTRADAContains))  
    			expression = expression.And(x => x.LUGAR_ENTRADA.Contains(LUGAR_ENTRADAContains));
    			
    		if(!string.IsNullOrWhiteSpace(LUGAR_ENTRADAStartsWith))
    			expression = expression.And(x => x.LUGAR_ENTRADA.StartsWith(LUGAR_ENTRADAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LUGAR_ENTRADAEndsWith))
    			expression = expression.And(x => x.LUGAR_ENTRADA.EndsWith(LUGAR_ENTRADAEndsWith));
    
    		if(LUGAR_ENTRADAIN != null && LUGAR_ENTRADAIN.Count() > 0)
    			expression = expression.And(x => LUGAR_ENTRADAIN.Contains(x.LUGAR_ENTRADA));
    
    		if(FECHA_SALIDA.HasValue)
    			expression = expression.And(x => x.FECHA_SALIDA == FECHA_SALIDA.Value);
    
    		if(FECHA_SALIDAIN != null && FECHA_SALIDAIN.Count() > 0)
    			expression = expression.And(x => FECHA_SALIDAIN.Contains(x.FECHA_SALIDA));
    	
    		if(FECHA_SALIDAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_SALIDA >= FECHA_SALIDAFrom.Value);
    			
    		if(FECHA_SALIDATo.HasValue)
    			expression = expression.And(x => x.FECHA_SALIDA <= FECHA_SALIDATo.Value);
    				
    
    		if(FECHA_SALIDAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_SALIDA >= FECHA_SALIDAFromOrNull.Value || x.FECHA_SALIDA == null);
    
            if(FECHA_SALIDAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_SALIDA <= FECHA_SALIDAToOrNull.Value || x.FECHA_SALIDA == null);
    	
    		if(!string.IsNullOrWhiteSpace(LUGAR_SALIDA))  
    			expression = expression.And(x => x.LUGAR_SALIDA.Equals(LUGAR_SALIDA));
    			
    		if(!string.IsNullOrWhiteSpace(LUGAR_SALIDAContains))  
    			expression = expression.And(x => x.LUGAR_SALIDA.Contains(LUGAR_SALIDAContains));
    			
    		if(!string.IsNullOrWhiteSpace(LUGAR_SALIDAStartsWith))
    			expression = expression.And(x => x.LUGAR_SALIDA.StartsWith(LUGAR_SALIDAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LUGAR_SALIDAEndsWith))
    			expression = expression.And(x => x.LUGAR_SALIDA.EndsWith(LUGAR_SALIDAEndsWith));
    
    		if(LUGAR_SALIDAIN != null && LUGAR_SALIDAIN.Count() > 0)
    			expression = expression.And(x => LUGAR_SALIDAIN.Contains(x.LUGAR_SALIDA));
    
    		if(IMPORTE.HasValue)
    			expression = expression.And(x => x.IMPORTE == IMPORTE.Value);
    
    		if(IMPORTEIN != null && IMPORTEIN.Count() > 0)
    			expression = expression.And(x => IMPORTEIN.Contains(x.IMPORTE));
    	
    		if(IMPORTEFrom.HasValue)
    			expression = expression.And(x => x.IMPORTE >= IMPORTEFrom.Value);
    			
    		if(IMPORTETo.HasValue)
    			expression = expression.And(x => x.IMPORTE <= IMPORTETo.Value);
    				
    
    
    		if(DECUENTO.HasValue)
    			expression = expression.And(x => x.DECUENTO == DECUENTO.Value);
    
    		if(DECUENTOIN != null && DECUENTOIN.Count() > 0)
    			expression = expression.And(x => DECUENTOIN.Contains(x.DECUENTO));
    	
    		if(DECUENTOFrom.HasValue)
    			expression = expression.And(x => x.DECUENTO >= DECUENTOFrom.Value);
    			
    		if(DECUENTOTo.HasValue)
    			expression = expression.And(x => x.DECUENTO <= DECUENTOTo.Value);
    				
    
    
    		if(PORCENTAJE_IMPUESTO.HasValue)
    			expression = expression.And(x => x.PORCENTAJE_IMPUESTO == PORCENTAJE_IMPUESTO.Value);
    
    		if(PORCENTAJE_IMPUESTOIN != null && PORCENTAJE_IMPUESTOIN.Count() > 0)
    			expression = expression.And(x => PORCENTAJE_IMPUESTOIN.Contains(x.PORCENTAJE_IMPUESTO));
    	
    		if(PORCENTAJE_IMPUESTOFrom.HasValue)
    			expression = expression.And(x => x.PORCENTAJE_IMPUESTO >= PORCENTAJE_IMPUESTOFrom.Value);
    			
    		if(PORCENTAJE_IMPUESTOTo.HasValue)
    			expression = expression.And(x => x.PORCENTAJE_IMPUESTO <= PORCENTAJE_IMPUESTOTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(OPERADOR))  
    			expression = expression.And(x => x.OPERADOR.Equals(OPERADOR));
    			
    		if(!string.IsNullOrWhiteSpace(OPERADORContains))  
    			expression = expression.And(x => x.OPERADOR.Contains(OPERADORContains));
    			
    		if(!string.IsNullOrWhiteSpace(OPERADORStartsWith))
    			expression = expression.And(x => x.OPERADOR.StartsWith(OPERADORStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(OPERADOREndsWith))
    			expression = expression.And(x => x.OPERADOR.EndsWith(OPERADOREndsWith));
    
    		if(OPERADORIN != null && OPERADORIN.Count() > 0)
    			expression = expression.And(x => OPERADORIN.Contains(x.OPERADOR));
    	
    		if(!string.IsNullOrWhiteSpace(TIPO))  
    			expression = expression.And(x => x.TIPO.Equals(TIPO));
    			
    		if(!string.IsNullOrWhiteSpace(TIPOContains))  
    			expression = expression.And(x => x.TIPO.Contains(TIPOContains));
    			
    		if(!string.IsNullOrWhiteSpace(TIPOStartsWith))
    			expression = expression.And(x => x.TIPO.StartsWith(TIPOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TIPOEndsWith))
    			expression = expression.And(x => x.TIPO.EndsWith(TIPOEndsWith));
    
    		if(TIPOIN != null && TIPOIN.Count() > 0)
    			expression = expression.And(x => TIPOIN.Contains(x.TIPO));
    
    		if(FECHA_TARJETA.HasValue)
    			expression = expression.And(x => x.FECHA_TARJETA == FECHA_TARJETA.Value);
    
    		if(FECHA_TARJETAIN != null && FECHA_TARJETAIN.Count() > 0)
    			expression = expression.And(x => FECHA_TARJETAIN.Contains(x.FECHA_TARJETA));
    	
    		if(FECHA_TARJETAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_TARJETA >= FECHA_TARJETAFrom.Value);
    			
    		if(FECHA_TARJETATo.HasValue)
    			expression = expression.And(x => x.FECHA_TARJETA <= FECHA_TARJETATo.Value);
    				
    
    		if(FECHA_TARJETAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_TARJETA >= FECHA_TARJETAFromOrNull.Value || x.FECHA_TARJETA == null);
    
            if(FECHA_TARJETAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_TARJETA <= FECHA_TARJETAToOrNull.Value || x.FECHA_TARJETA == null);
    	
    		if(!string.IsNullOrWhiteSpace(NUM_TARJETA))  
    			expression = expression.And(x => x.NUM_TARJETA.Equals(NUM_TARJETA));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_TARJETAContains))  
    			expression = expression.And(x => x.NUM_TARJETA.Contains(NUM_TARJETAContains));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_TARJETAStartsWith))
    			expression = expression.And(x => x.NUM_TARJETA.StartsWith(NUM_TARJETAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NUM_TARJETAEndsWith))
    			expression = expression.And(x => x.NUM_TARJETA.EndsWith(NUM_TARJETAEndsWith));
    
    		if(NUM_TARJETAIN != null && NUM_TARJETAIN.Count() > 0)
    			expression = expression.And(x => NUM_TARJETAIN.Contains(x.NUM_TARJETA));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_VIA_VERDE_IDENTIFICADORES != null)
    		{
    			var subExpression = T_G_VIA_VERDE_IDENTIFICADORES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_VIA_VERDE_IDENTIFICADORES }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_VIA_VERDE_TRANSACCIONES entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_VIA_VERDE_TRANSACCIONES> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
