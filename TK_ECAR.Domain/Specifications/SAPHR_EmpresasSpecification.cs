//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class SAPHR_EmpresasSpecification : ISpecification<SAPHR_Empresas>
    {
    
        public Nullable<int> CodigoEmpresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> CodigoEmpresaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> CodigoEmpresaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> CodigoEmpresaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Nombre
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> Activo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> ActivoIN
    	{
    		get;
    		set;
    	}
    
        #region Navigation Properties
    
    	public SAPHR_DelegacionesSpecification SAPHR_Delegaciones
        {
            get;
    		set;
    	}
    
    	public SAPHR_DireccionesTerritorialesSpecification SAPHR_DireccionesTerritoriales
        {
            get;
    		set;
    	}
    
    	public SAPHR_DireccionesAreaSpecification SAPHR_DireccionesArea
        {
            get;
    		set;
    	}
    
    	public SAPHR_CentrosCosteSpecification SAPHR_CentrosCoste
        {
            get;
    		set;
    	}
    
    	public SAPHR_UnidadesOrganizativasSpecification SAPHR_UnidadesOrganizativas
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="SAPHR_EmpresasSpecification"/> class.
    	/// </summary>
    	public SAPHR_EmpresasSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="SAPHR_EmpresasSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public SAPHR_EmpresasSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.SAPHR_Delegaciones = new SAPHR_DelegacionesSpecification();
    		this.SAPHR_DireccionesTerritoriales = new SAPHR_DireccionesTerritorialesSpecification();
    		this.SAPHR_DireccionesArea = new SAPHR_DireccionesAreaSpecification();
    		this.SAPHR_CentrosCoste = new SAPHR_CentrosCosteSpecification();
    		this.SAPHR_UnidadesOrganizativas = new SAPHR_UnidadesOrganizativasSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<SAPHR_Empresas, bool>> GetExpression()
    	{
    		Expression<Func<SAPHR_Empresas, bool>> expression = x => true;
    
    		if(CodigoEmpresa.HasValue)
    			expression = expression.And(x => x.CodigoEmpresa == CodigoEmpresa.Value);
    
    		if(CodigoEmpresaIN != null && CodigoEmpresaIN.Count() > 0)
    			expression = expression.And(x => CodigoEmpresaIN.Contains(x.CodigoEmpresa));
    	
    		if(CodigoEmpresaFrom.HasValue)
    			expression = expression.And(x => x.CodigoEmpresa >= CodigoEmpresaFrom.Value);
    			
    		if(CodigoEmpresaTo.HasValue)
    			expression = expression.And(x => x.CodigoEmpresa <= CodigoEmpresaTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Nombre))  
    			expression = expression.And(x => x.Nombre.Equals(Nombre));
    			
    		if(!string.IsNullOrWhiteSpace(NombreContains))  
    			expression = expression.And(x => x.Nombre.Contains(NombreContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreStartsWith))
    			expression = expression.And(x => x.Nombre.StartsWith(NombreStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreEndsWith))
    			expression = expression.And(x => x.Nombre.EndsWith(NombreEndsWith));
    
    		if(NombreIN != null && NombreIN.Count() > 0)
    			expression = expression.And(x => NombreIN.Contains(x.Nombre));
    
    		if(Activo.HasValue)
    			expression = expression.And(x => x.Activo == Activo.Value);
    
    		if(ActivoIN != null && ActivoIN.Count() > 0)
    			expression = expression.And(x => ActivoIN.Contains(x.Activo));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.SAPHR_Delegaciones != null)
    		{
    			var subExpression = SAPHR_Delegaciones.GetExpression();
    			expression = expression.And(x => x.SAPHR_Delegaciones.AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_DireccionesTerritoriales != null)
    		{
    			var subExpression = SAPHR_DireccionesTerritoriales.GetExpression();
    			expression = expression.And(x => x.SAPHR_DireccionesTerritoriales.AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_DireccionesArea != null)
    		{
    			var subExpression = SAPHR_DireccionesArea.GetExpression();
    			expression = expression.And(x => x.SAPHR_DireccionesArea.AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_CentrosCoste != null)
    		{
    			var subExpression = SAPHR_CentrosCoste.GetExpression();
    			expression = expression.And(x => x.SAPHR_CentrosCoste.AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_UnidadesOrganizativas != null)
    		{
    			var subExpression = SAPHR_UnidadesOrganizativas.GetExpression();
    			expression = expression.And(x => x.SAPHR_UnidadesOrganizativas.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(SAPHR_Empresas entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<SAPHR_Empresas> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
