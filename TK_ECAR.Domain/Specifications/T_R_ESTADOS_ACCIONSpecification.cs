//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_R_ESTADOS_ACCIONSpecification : ISpecification<T_R_ESTADOS_ACCION>
    {
    
        public Nullable<int> ID_ESTADO_ACCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ESTADO_ACCIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_ESTADO_ACCIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_ESTADO_ACCIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_TIPO_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_TIPO_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ESTADO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ESTADOIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ACCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ACCIONIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ESTADO_ANTERIOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ESTADO_ANTERIORIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_PERFIL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_PERFILIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_PERFILFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_PERFILTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        #region Navigation Properties
    
    	public T_M_ACCIONESSpecification T_M_ACCIONES
        {
            get;
    		set;
    	}
    
    	public T_M_ESTADOSSpecification T_M_ESTADOS
        {
            get;
    		set;
    	}
    
    	public T_M_ESTADOSSpecification T_M_ESTADOS1
        {
            get;
    		set;
    	}
    
    	public T_M_TIPOS_ALERTASSpecification T_M_TIPOS_ALERTAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_R_ESTADOS_ACCIONSpecification"/> class.
    	/// </summary>
    	public T_R_ESTADOS_ACCIONSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_R_ESTADOS_ACCIONSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_R_ESTADOS_ACCIONSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_M_ACCIONES = new T_M_ACCIONESSpecification();
    		this.T_M_ESTADOS = new T_M_ESTADOSSpecification();
    		this.T_M_ESTADOS1 = new T_M_ESTADOSSpecification();
    		this.T_M_TIPOS_ALERTAS = new T_M_TIPOS_ALERTASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_R_ESTADOS_ACCION, bool>> GetExpression()
    	{
    		Expression<Func<T_R_ESTADOS_ACCION, bool>> expression = x => true;
    
    		if(ID_ESTADO_ACCION.HasValue)
    			expression = expression.And(x => x.ID_ESTADO_ACCION == ID_ESTADO_ACCION.Value);
    
    		if(ID_ESTADO_ACCIONIN != null && ID_ESTADO_ACCIONIN.Count() > 0)
    			expression = expression.And(x => ID_ESTADO_ACCIONIN.Contains(x.ID_ESTADO_ACCION));
    	
    		if(ID_ESTADO_ACCIONFrom.HasValue)
    			expression = expression.And(x => x.ID_ESTADO_ACCION >= ID_ESTADO_ACCIONFrom.Value);
    			
    		if(ID_ESTADO_ACCIONTo.HasValue)
    			expression = expression.And(x => x.ID_ESTADO_ACCION <= ID_ESTADO_ACCIONTo.Value);
    				
    
    
    		if(ID_TIPO_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_TIPO_ALERTA == ID_TIPO_ALERTA.Value);
    
    		if(ID_TIPO_ALERTAIN != null && ID_TIPO_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_TIPO_ALERTAIN.Contains(x.ID_TIPO_ALERTA));
    
    		if(ID_ESTADO.HasValue)
    			expression = expression.And(x => x.ID_ESTADO == ID_ESTADO.Value);
    
    		if(ID_ESTADOIN != null && ID_ESTADOIN.Count() > 0)
    			expression = expression.And(x => ID_ESTADOIN.Contains(x.ID_ESTADO));
    
    		if(ID_ACCION.HasValue)
    			expression = expression.And(x => x.ID_ACCION == ID_ACCION.Value);
    
    		if(ID_ACCIONIN != null && ID_ACCIONIN.Count() > 0)
    			expression = expression.And(x => ID_ACCIONIN.Contains(x.ID_ACCION));
    
    		if(ID_ESTADO_ANTERIOR.HasValue)
    			expression = expression.And(x => x.ID_ESTADO_ANTERIOR == ID_ESTADO_ANTERIOR.Value);
    
    		if(ID_ESTADO_ANTERIORIN != null && ID_ESTADO_ANTERIORIN.Count() > 0)
    			expression = expression.And(x => ID_ESTADO_ANTERIORIN.Contains(x.ID_ESTADO_ANTERIOR));
    
    		if(ID_PERFIL.HasValue)
    			expression = expression.And(x => x.ID_PERFIL == ID_PERFIL.Value);
    
    		if(ID_PERFILIN != null && ID_PERFILIN.Count() > 0)
    			expression = expression.And(x => ID_PERFILIN.Contains(x.ID_PERFIL));
    	
    		if(ID_PERFILFrom.HasValue)
    			expression = expression.And(x => x.ID_PERFIL >= ID_PERFILFrom.Value);
    			
    		if(ID_PERFILTo.HasValue)
    			expression = expression.And(x => x.ID_PERFIL <= ID_PERFILTo.Value);
    				
    
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_M_ACCIONES != null)
    		{
    			var subExpression = T_M_ACCIONES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ACCIONES }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_ESTADOS != null)
    		{
    			var subExpression = T_M_ESTADOS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ESTADOS }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_ESTADOS1 != null)
    		{
    			var subExpression = T_M_ESTADOS1.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ESTADOS1 }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_TIPOS_ALERTAS != null)
    		{
    			var subExpression = T_M_TIPOS_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_TIPOS_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_R_ESTADOS_ACCION entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_R_ESTADOS_ACCION> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
