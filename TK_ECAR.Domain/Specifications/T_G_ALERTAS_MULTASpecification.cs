//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_ALERTAS_MULTASpecification : ISpecification<T_G_ALERTAS_MULTA>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FECHA_DENUNCIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_DENUNCIAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_DENUNCIAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_DENUNCIATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_DENUNCIAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_DENUNCIAToOrNull
        {
            get;
            set;
        }
    		
    
        public string EXPEDIENTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EXPEDIENTEIN
    	{
    		get;
    		set;
    	}
    
    	public string EXPEDIENTEContains
    	{
    		get;
    		set;
    	}
    	
    	public string EXPEDIENTEStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EXPEDIENTEEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string INFRACCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> INFRACCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string INFRACCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string INFRACCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string INFRACCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string LUGAR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LUGARIN
    	{
    		get;
    		set;
    	}
    
    	public string LUGARContains
    	{
    		get;
    		set;
    	}
    	
    	public string LUGARStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LUGAREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<decimal> IMPORTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<decimal>> IMPORTEIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<decimal> IMPORTEFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<decimal> IMPORTETo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<short> HORA_DENUNCIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<short>> HORA_DENUNCIAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<short> HORA_DENUNCIAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<short> HORA_DENUNCIATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<short> MINUTOS_DENUNCIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<short>> MINUTOS_DENUNCIAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<short> MINUTOS_DENUNCIAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<short> MINUTOS_DENUNCIATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        #region Navigation Properties
    
    	public T_G_ALERTASSpecification T_G_ALERTAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_MULTASpecification"/> class.
    	/// </summary>
    	public T_G_ALERTAS_MULTASpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_MULTASpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_ALERTAS_MULTASpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS = new T_G_ALERTASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_ALERTAS_MULTA, bool>> GetExpression()
    	{
    		Expression<Func<T_G_ALERTAS_MULTA, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    
    		if(FECHA_DENUNCIA.HasValue)
    			expression = expression.And(x => x.FECHA_DENUNCIA == FECHA_DENUNCIA.Value);
    
    		if(FECHA_DENUNCIAIN != null && FECHA_DENUNCIAIN.Count() > 0)
    			expression = expression.And(x => FECHA_DENUNCIAIN.Contains(x.FECHA_DENUNCIA));
    	
    		if(FECHA_DENUNCIAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_DENUNCIA >= FECHA_DENUNCIAFrom.Value);
    			
    		if(FECHA_DENUNCIATo.HasValue)
    			expression = expression.And(x => x.FECHA_DENUNCIA <= FECHA_DENUNCIATo.Value);
    				
    
    		if(FECHA_DENUNCIAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_DENUNCIA >= FECHA_DENUNCIAFromOrNull.Value || x.FECHA_DENUNCIA == null);
    
            if(FECHA_DENUNCIAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_DENUNCIA <= FECHA_DENUNCIAToOrNull.Value || x.FECHA_DENUNCIA == null);
    	
    		if(!string.IsNullOrWhiteSpace(EXPEDIENTE))  
    			expression = expression.And(x => x.EXPEDIENTE.Equals(EXPEDIENTE));
    			
    		if(!string.IsNullOrWhiteSpace(EXPEDIENTEContains))  
    			expression = expression.And(x => x.EXPEDIENTE.Contains(EXPEDIENTEContains));
    			
    		if(!string.IsNullOrWhiteSpace(EXPEDIENTEStartsWith))
    			expression = expression.And(x => x.EXPEDIENTE.StartsWith(EXPEDIENTEStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EXPEDIENTEEndsWith))
    			expression = expression.And(x => x.EXPEDIENTE.EndsWith(EXPEDIENTEEndsWith));
    
    		if(EXPEDIENTEIN != null && EXPEDIENTEIN.Count() > 0)
    			expression = expression.And(x => EXPEDIENTEIN.Contains(x.EXPEDIENTE));
    	
    		if(!string.IsNullOrWhiteSpace(INFRACCION))  
    			expression = expression.And(x => x.INFRACCION.Equals(INFRACCION));
    			
    		if(!string.IsNullOrWhiteSpace(INFRACCIONContains))  
    			expression = expression.And(x => x.INFRACCION.Contains(INFRACCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(INFRACCIONStartsWith))
    			expression = expression.And(x => x.INFRACCION.StartsWith(INFRACCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(INFRACCIONEndsWith))
    			expression = expression.And(x => x.INFRACCION.EndsWith(INFRACCIONEndsWith));
    
    		if(INFRACCIONIN != null && INFRACCIONIN.Count() > 0)
    			expression = expression.And(x => INFRACCIONIN.Contains(x.INFRACCION));
    	
    		if(!string.IsNullOrWhiteSpace(LUGAR))  
    			expression = expression.And(x => x.LUGAR.Equals(LUGAR));
    			
    		if(!string.IsNullOrWhiteSpace(LUGARContains))  
    			expression = expression.And(x => x.LUGAR.Contains(LUGARContains));
    			
    		if(!string.IsNullOrWhiteSpace(LUGARStartsWith))
    			expression = expression.And(x => x.LUGAR.StartsWith(LUGARStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LUGAREndsWith))
    			expression = expression.And(x => x.LUGAR.EndsWith(LUGAREndsWith));
    
    		if(LUGARIN != null && LUGARIN.Count() > 0)
    			expression = expression.And(x => LUGARIN.Contains(x.LUGAR));
    
    		if(IMPORTE.HasValue)
    			expression = expression.And(x => x.IMPORTE == IMPORTE.Value);
    
    		if(IMPORTEIN != null && IMPORTEIN.Count() > 0)
    			expression = expression.And(x => IMPORTEIN.Contains(x.IMPORTE));
    	
    		if(IMPORTEFrom.HasValue)
    			expression = expression.And(x => x.IMPORTE >= IMPORTEFrom.Value);
    			
    		if(IMPORTETo.HasValue)
    			expression = expression.And(x => x.IMPORTE <= IMPORTETo.Value);
    				
    
    
    		if(HORA_DENUNCIA.HasValue)
    			expression = expression.And(x => x.HORA_DENUNCIA == HORA_DENUNCIA.Value);
    
    		if(HORA_DENUNCIAIN != null && HORA_DENUNCIAIN.Count() > 0)
    			expression = expression.And(x => HORA_DENUNCIAIN.Contains(x.HORA_DENUNCIA));
    	
    		if(HORA_DENUNCIAFrom.HasValue)
    			expression = expression.And(x => x.HORA_DENUNCIA >= HORA_DENUNCIAFrom.Value);
    			
    		if(HORA_DENUNCIATo.HasValue)
    			expression = expression.And(x => x.HORA_DENUNCIA <= HORA_DENUNCIATo.Value);
    				
    
    
    		if(MINUTOS_DENUNCIA.HasValue)
    			expression = expression.And(x => x.MINUTOS_DENUNCIA == MINUTOS_DENUNCIA.Value);
    
    		if(MINUTOS_DENUNCIAIN != null && MINUTOS_DENUNCIAIN.Count() > 0)
    			expression = expression.And(x => MINUTOS_DENUNCIAIN.Contains(x.MINUTOS_DENUNCIA));
    	
    		if(MINUTOS_DENUNCIAFrom.HasValue)
    			expression = expression.And(x => x.MINUTOS_DENUNCIA >= MINUTOS_DENUNCIAFrom.Value);
    			
    		if(MINUTOS_DENUNCIATo.HasValue)
    			expression = expression.And(x => x.MINUTOS_DENUNCIA <= MINUTOS_DENUNCIATo.Value);
    				
    
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS != null)
    		{
    			var subExpression = T_G_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_ALERTAS_MULTA entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_ALERTAS_MULTA> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
