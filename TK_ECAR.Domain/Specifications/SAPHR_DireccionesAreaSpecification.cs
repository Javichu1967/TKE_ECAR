//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class SAPHR_DireccionesAreaSpecification : ISpecification<SAPHR_DireccionesArea>
    {
    
        public Nullable<int> ID_DA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_DAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_DAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_DATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string DA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DAIN
    	{
    		get;
    		set;
    	}
    
    	public string DAContains
    	{
    		get;
    		set;
    	}
    	
    	public string DAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> Empresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> EmpresaIN
    	{
    		get;
    		set;
    	}
    
        public string idDT
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> idDTIN
    	{
    		get;
    		set;
    	}
    
    	public string idDTContains
    	{
    		get;
    		set;
    	}
    	
    	public string idDTStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string idDTEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public SAPHR_DireccionesTerritorialesSpecification SAPHR_DireccionesTerritoriales
        {
            get;
    		set;
    	}
    
    	public SAPHR_EmpresasSpecification SAPHR_Empresas
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="SAPHR_DireccionesAreaSpecification"/> class.
    	/// </summary>
    	public SAPHR_DireccionesAreaSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="SAPHR_DireccionesAreaSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public SAPHR_DireccionesAreaSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.SAPHR_DireccionesTerritoriales = new SAPHR_DireccionesTerritorialesSpecification();
    		this.SAPHR_Empresas = new SAPHR_EmpresasSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<SAPHR_DireccionesArea, bool>> GetExpression()
    	{
    		Expression<Func<SAPHR_DireccionesArea, bool>> expression = x => true;
    
    		if(ID_DA.HasValue)
    			expression = expression.And(x => x.ID_DA == ID_DA.Value);
    
    		if(ID_DAIN != null && ID_DAIN.Count() > 0)
    			expression = expression.And(x => ID_DAIN.Contains(x.ID_DA));
    	
    		if(ID_DAFrom.HasValue)
    			expression = expression.And(x => x.ID_DA >= ID_DAFrom.Value);
    			
    		if(ID_DATo.HasValue)
    			expression = expression.And(x => x.ID_DA <= ID_DATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(DA))  
    			expression = expression.And(x => x.DA.Equals(DA));
    			
    		if(!string.IsNullOrWhiteSpace(DAContains))  
    			expression = expression.And(x => x.DA.Contains(DAContains));
    			
    		if(!string.IsNullOrWhiteSpace(DAStartsWith))
    			expression = expression.And(x => x.DA.StartsWith(DAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DAEndsWith))
    			expression = expression.And(x => x.DA.EndsWith(DAEndsWith));
    
    		if(DAIN != null && DAIN.Count() > 0)
    			expression = expression.And(x => DAIN.Contains(x.DA));
    
    		if(Empresa.HasValue)
    			expression = expression.And(x => x.Empresa == Empresa.Value);
    
    		if(EmpresaIN != null && EmpresaIN.Count() > 0)
    			expression = expression.And(x => EmpresaIN.Contains(x.Empresa));
    	
    		if(!string.IsNullOrWhiteSpace(idDT))  
    			expression = expression.And(x => x.idDT.Equals(idDT));
    			
    		if(!string.IsNullOrWhiteSpace(idDTContains))  
    			expression = expression.And(x => x.idDT.Contains(idDTContains));
    			
    		if(!string.IsNullOrWhiteSpace(idDTStartsWith))
    			expression = expression.And(x => x.idDT.StartsWith(idDTStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(idDTEndsWith))
    			expression = expression.And(x => x.idDT.EndsWith(idDTEndsWith));
    
    		if(idDTIN != null && idDTIN.Count() > 0)
    			expression = expression.And(x => idDTIN.Contains(x.idDT));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.SAPHR_DireccionesTerritoriales != null)
    		{
    			var subExpression = SAPHR_DireccionesTerritoriales.GetExpression();
    			expression = expression.And(x => (new[] { x.SAPHR_DireccionesTerritoriales }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_Empresas != null)
    		{
    			var subExpression = SAPHR_Empresas.GetExpression();
    			expression = expression.And(x => (new[] { x.SAPHR_Empresas }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(SAPHR_DireccionesArea entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<SAPHR_DireccionesArea> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
