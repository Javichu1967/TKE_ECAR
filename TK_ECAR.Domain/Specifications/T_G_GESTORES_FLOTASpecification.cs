//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_GESTORES_FLOTASpecification : ISpecification<T_G_GESTORES_FLOTA>
    {
    
        public Nullable<int> NUMEROEMPLEADO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> NUMEROEMPLEADOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> NUMEROEMPLEADOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> NUMEROEMPLEADOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string PUESTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PUESTOIN
    	{
    		get;
    		set;
    	}
    
    	public string PUESTOContains
    	{
    		get;
    		set;
    	}
    	
    	public string PUESTOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PUESTOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TELEFONO1
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TELEFONO1IN
    	{
    		get;
    		set;
    	}
    
    	public string TELEFONO1Contains
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO1StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO1EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TELEFONO2
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TELEFONO2IN
    	{
    		get;
    		set;
    	}
    
    	public string TELEFONO2Contains
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO2StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TELEFONO2EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string FOTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FOTOIN
    	{
    		get;
    		set;
    	}
    
    	public string FOTOContains
    	{
    		get;
    		set;
    	}
    	
    	public string FOTOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FOTOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_ALTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_ALTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_ALTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_ALTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_ALTAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_ALTAToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> FECHA_MODIFICACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_MODIFICACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_MODIFICACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_MODIFICACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_MODIFICACIONFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_MODIFICACIONToOrNull
        {
            get;
            set;
        }
    		
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_GESTORES_FLOTASpecification"/> class.
    	/// </summary>
    	public T_G_GESTORES_FLOTASpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_GESTORES_FLOTASpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_GESTORES_FLOTASpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_GESTORES_FLOTA, bool>> GetExpression()
    	{
    		Expression<Func<T_G_GESTORES_FLOTA, bool>> expression = x => true;
    
    		if(NUMEROEMPLEADO.HasValue)
    			expression = expression.And(x => x.NUMEROEMPLEADO == NUMEROEMPLEADO.Value);
    
    		if(NUMEROEMPLEADOIN != null && NUMEROEMPLEADOIN.Count() > 0)
    			expression = expression.And(x => NUMEROEMPLEADOIN.Contains(x.NUMEROEMPLEADO));
    	
    		if(NUMEROEMPLEADOFrom.HasValue)
    			expression = expression.And(x => x.NUMEROEMPLEADO >= NUMEROEMPLEADOFrom.Value);
    			
    		if(NUMEROEMPLEADOTo.HasValue)
    			expression = expression.And(x => x.NUMEROEMPLEADO <= NUMEROEMPLEADOTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(PUESTO))  
    			expression = expression.And(x => x.PUESTO.Equals(PUESTO));
    			
    		if(!string.IsNullOrWhiteSpace(PUESTOContains))  
    			expression = expression.And(x => x.PUESTO.Contains(PUESTOContains));
    			
    		if(!string.IsNullOrWhiteSpace(PUESTOStartsWith))
    			expression = expression.And(x => x.PUESTO.StartsWith(PUESTOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PUESTOEndsWith))
    			expression = expression.And(x => x.PUESTO.EndsWith(PUESTOEndsWith));
    
    		if(PUESTOIN != null && PUESTOIN.Count() > 0)
    			expression = expression.And(x => PUESTOIN.Contains(x.PUESTO));
    	
    		if(!string.IsNullOrWhiteSpace(TELEFONO1))  
    			expression = expression.And(x => x.TELEFONO1.Equals(TELEFONO1));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO1Contains))  
    			expression = expression.And(x => x.TELEFONO1.Contains(TELEFONO1Contains));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO1StartsWith))
    			expression = expression.And(x => x.TELEFONO1.StartsWith(TELEFONO1StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TELEFONO1EndsWith))
    			expression = expression.And(x => x.TELEFONO1.EndsWith(TELEFONO1EndsWith));
    
    		if(TELEFONO1IN != null && TELEFONO1IN.Count() > 0)
    			expression = expression.And(x => TELEFONO1IN.Contains(x.TELEFONO1));
    	
    		if(!string.IsNullOrWhiteSpace(TELEFONO2))  
    			expression = expression.And(x => x.TELEFONO2.Equals(TELEFONO2));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO2Contains))  
    			expression = expression.And(x => x.TELEFONO2.Contains(TELEFONO2Contains));
    			
    		if(!string.IsNullOrWhiteSpace(TELEFONO2StartsWith))
    			expression = expression.And(x => x.TELEFONO2.StartsWith(TELEFONO2StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TELEFONO2EndsWith))
    			expression = expression.And(x => x.TELEFONO2.EndsWith(TELEFONO2EndsWith));
    
    		if(TELEFONO2IN != null && TELEFONO2IN.Count() > 0)
    			expression = expression.And(x => TELEFONO2IN.Contains(x.TELEFONO2));
    	
    		if(!string.IsNullOrWhiteSpace(FOTO))  
    			expression = expression.And(x => x.FOTO.Equals(FOTO));
    			
    		if(!string.IsNullOrWhiteSpace(FOTOContains))  
    			expression = expression.And(x => x.FOTO.Contains(FOTOContains));
    			
    		if(!string.IsNullOrWhiteSpace(FOTOStartsWith))
    			expression = expression.And(x => x.FOTO.StartsWith(FOTOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FOTOEndsWith))
    			expression = expression.And(x => x.FOTO.EndsWith(FOTOEndsWith));
    
    		if(FOTOIN != null && FOTOIN.Count() > 0)
    			expression = expression.And(x => FOTOIN.Contains(x.FOTO));
    
    		if(FECHA_ALTA.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA == FECHA_ALTA.Value);
    
    		if(FECHA_ALTAIN != null && FECHA_ALTAIN.Count() > 0)
    			expression = expression.And(x => FECHA_ALTAIN.Contains(x.FECHA_ALTA));
    	
    		if(FECHA_ALTAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA >= FECHA_ALTAFrom.Value);
    			
    		if(FECHA_ALTATo.HasValue)
    			expression = expression.And(x => x.FECHA_ALTA <= FECHA_ALTATo.Value);
    				
    
    		if(FECHA_ALTAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ALTA >= FECHA_ALTAFromOrNull.Value || x.FECHA_ALTA == null);
    
            if(FECHA_ALTAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ALTA <= FECHA_ALTAToOrNull.Value || x.FECHA_ALTA == null);
    
    		if(FECHA_MODIFICACION.HasValue)
    			expression = expression.And(x => x.FECHA_MODIFICACION == FECHA_MODIFICACION.Value);
    
    		if(FECHA_MODIFICACIONIN != null && FECHA_MODIFICACIONIN.Count() > 0)
    			expression = expression.And(x => FECHA_MODIFICACIONIN.Contains(x.FECHA_MODIFICACION));
    	
    		if(FECHA_MODIFICACIONFrom.HasValue)
    			expression = expression.And(x => x.FECHA_MODIFICACION >= FECHA_MODIFICACIONFrom.Value);
    			
    		if(FECHA_MODIFICACIONTo.HasValue)
    			expression = expression.And(x => x.FECHA_MODIFICACION <= FECHA_MODIFICACIONTo.Value);
    				
    
    		if(FECHA_MODIFICACIONFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_MODIFICACION >= FECHA_MODIFICACIONFromOrNull.Value || x.FECHA_MODIFICACION == null);
    
            if(FECHA_MODIFICACIONToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_MODIFICACION <= FECHA_MODIFICACIONToOrNull.Value || x.FECHA_MODIFICACION == null);
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_GESTORES_FLOTA entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_GESTORES_FLOTA> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
