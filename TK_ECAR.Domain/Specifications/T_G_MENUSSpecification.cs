//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_MENUSSpecification : ISpecification<T_G_MENUS>
    {
    
        public Nullable<int> ID_MENU
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_MENUIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_MENUFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_MENUTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ORDEN
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ORDENIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ORDENFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ORDENTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string DESCRIPCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DESCRIPCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DESCRIPCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ID_MENU_PARENT
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_MENU_PARENTIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> B_ACTIVO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> B_ACTIVOIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FECHA_CREACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_CREACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_CREACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_CREACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_CREACIONFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_CREACIONToOrNull
        {
            get;
            set;
        }
    		
    
        #region Navigation Properties
    
    	public T_G_MENUSSpecification T_G_MENUS1
        {
            get;
    		set;
    	}
    
    	public T_G_MENUSSpecification T_G_MENUS2
        {
            get;
    		set;
    	}
    
    	public T_R_PERFILES_MENUSpecification T_R_PERFILES_MENU
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_MENUSSpecification"/> class.
    	/// </summary>
    	public T_G_MENUSSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_MENUSSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_MENUSSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_MENUS1 = new T_G_MENUSSpecification();
    		this.T_G_MENUS2 = new T_G_MENUSSpecification();
    		this.T_R_PERFILES_MENU = new T_R_PERFILES_MENUSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_MENUS, bool>> GetExpression()
    	{
    		Expression<Func<T_G_MENUS, bool>> expression = x => true;
    
    		if(ID_MENU.HasValue)
    			expression = expression.And(x => x.ID_MENU == ID_MENU.Value);
    
    		if(ID_MENUIN != null && ID_MENUIN.Count() > 0)
    			expression = expression.And(x => ID_MENUIN.Contains(x.ID_MENU));
    	
    		if(ID_MENUFrom.HasValue)
    			expression = expression.And(x => x.ID_MENU >= ID_MENUFrom.Value);
    			
    		if(ID_MENUTo.HasValue)
    			expression = expression.And(x => x.ID_MENU <= ID_MENUTo.Value);
    				
    
    
    		if(ORDEN.HasValue)
    			expression = expression.And(x => x.ORDEN == ORDEN.Value);
    
    		if(ORDENIN != null && ORDENIN.Count() > 0)
    			expression = expression.And(x => ORDENIN.Contains(x.ORDEN));
    	
    		if(ORDENFrom.HasValue)
    			expression = expression.And(x => x.ORDEN >= ORDENFrom.Value);
    			
    		if(ORDENTo.HasValue)
    			expression = expression.And(x => x.ORDEN <= ORDENTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(DESCRIPCION))  
    			expression = expression.And(x => x.DESCRIPCION.Equals(DESCRIPCION));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONContains))  
    			expression = expression.And(x => x.DESCRIPCION.Contains(DESCRIPCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONStartsWith))
    			expression = expression.And(x => x.DESCRIPCION.StartsWith(DESCRIPCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONEndsWith))
    			expression = expression.And(x => x.DESCRIPCION.EndsWith(DESCRIPCIONEndsWith));
    
    		if(DESCRIPCIONIN != null && DESCRIPCIONIN.Count() > 0)
    			expression = expression.And(x => DESCRIPCIONIN.Contains(x.DESCRIPCION));
    
    		if(ID_MENU_PARENT.HasValue)
    			expression = expression.And(x => x.ID_MENU_PARENT == ID_MENU_PARENT.Value);
    
    		if(ID_MENU_PARENTIN != null && ID_MENU_PARENTIN.Count() > 0)
    			expression = expression.And(x => ID_MENU_PARENTIN.Contains(x.ID_MENU_PARENT));
    
    		if(B_ACTIVO.HasValue)
    			expression = expression.And(x => x.B_ACTIVO == B_ACTIVO.Value);
    
    		if(B_ACTIVOIN != null && B_ACTIVOIN.Count() > 0)
    			expression = expression.And(x => B_ACTIVOIN.Contains(x.B_ACTIVO));
    
    		if(FECHA_CREACION.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION == FECHA_CREACION.Value);
    
    		if(FECHA_CREACIONIN != null && FECHA_CREACIONIN.Count() > 0)
    			expression = expression.And(x => FECHA_CREACIONIN.Contains(x.FECHA_CREACION));
    	
    		if(FECHA_CREACIONFrom.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION >= FECHA_CREACIONFrom.Value);
    			
    		if(FECHA_CREACIONTo.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION <= FECHA_CREACIONTo.Value);
    				
    
    		if(FECHA_CREACIONFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CREACION >= FECHA_CREACIONFromOrNull.Value || x.FECHA_CREACION == null);
    
            if(FECHA_CREACIONToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CREACION <= FECHA_CREACIONToOrNull.Value || x.FECHA_CREACION == null);
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_MENUS1 != null)
    		{
    			var subExpression = T_G_MENUS1.GetExpression();
    			expression = expression.And(x => x.T_G_MENUS1.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_MENUS2 != null)
    		{
    			var subExpression = T_G_MENUS2.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_MENUS2 }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_R_PERFILES_MENU != null)
    		{
    			var subExpression = T_R_PERFILES_MENU.GetExpression();
    			expression = expression.And(x => x.T_R_PERFILES_MENU.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_MENUS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_MENUS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
