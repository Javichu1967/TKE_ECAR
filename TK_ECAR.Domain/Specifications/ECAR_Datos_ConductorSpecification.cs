//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class ECAR_Datos_ConductorSpecification : ISpecification<ECAR_Datos_Conductor>
    {
    
        public Nullable<int> Cod_Conductor
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Cod_ConductorIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Cod_ConductorFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Cod_ConductorTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string DNI
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DNIIN
    	{
    		get;
    		set;
    	}
    
    	public string DNIContains
    	{
    		get;
    		set;
    	}
    	
    	public string DNIStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DNIEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Apellidos
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ApellidosIN
    	{
    		get;
    		set;
    	}
    
    	public string ApellidosContains
    	{
    		get;
    		set;
    	}
    	
    	public string ApellidosStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ApellidosEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Nombre
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Direccion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DireccionIN
    	{
    		get;
    		set;
    	}
    
    	public string DireccionContains
    	{
    		get;
    		set;
    	}
    	
    	public string DireccionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DireccionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Cod_Postal
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Cod_PostalIN
    	{
    		get;
    		set;
    	}
    
    	public string Cod_PostalContains
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_PostalStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_PostalEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Poblacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PoblacionIN
    	{
    		get;
    		set;
    	}
    
    	public string PoblacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Provincia
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ProvinciaIN
    	{
    		get;
    		set;
    	}
    
    	public string ProvinciaContains
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ProvinciaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Tlf
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TlfIN
    	{
    		get;
    		set;
    	}
    
    	public string TlfContains
    	{
    		get;
    		set;
    	}
    	
    	public string TlfStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TlfEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Movil
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MovilIN
    	{
    		get;
    		set;
    	}
    
    	public string MovilContains
    	{
    		get;
    		set;
    	}
    	
    	public string MovilStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MovilEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Fecha_Nacimiento
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_NacimientoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_NacimientoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_NacimientoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_NacimientoFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_NacimientoToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> Fecha_Carnet
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_CarnetIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_CarnetFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_CarnetTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_CarnetFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_CarnetToOrNull
        {
            get;
            set;
        }
    		
    
        public string Num_Empleado
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Num_EmpleadoIN
    	{
    		get;
    		set;
    	}
    
    	public string Num_EmpleadoContains
    	{
    		get;
    		set;
    	}
    	
    	public string Num_EmpleadoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Num_EmpleadoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Fecha_Vencimiento_Carnet
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_Vencimiento_CarnetIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_Vencimiento_CarnetFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_Vencimiento_CarnetTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_Vencimiento_CarnetFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_Vencimiento_CarnetToOrNull
        {
            get;
            set;
        }
    		
    
        public string CodCeco
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CodCecoIN
    	{
    		get;
    		set;
    	}
    
    	public string CodCecoContains
    	{
    		get;
    		set;
    	}
    	
    	public string CodCecoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CodCecoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Fecha_Alta_Empresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_Alta_EmpresaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_Alta_EmpresaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_Alta_EmpresaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_Alta_EmpresaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_Alta_EmpresaToOrNull
        {
            get;
            set;
        }
    		
    
        public string E_Mail
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> E_MailIN
    	{
    		get;
    		set;
    	}
    
    	public string E_MailContains
    	{
    		get;
    		set;
    	}
    	
    	public string E_MailStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string E_MailEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FechaAlta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaAltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaAltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaAltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaAltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaAltaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<bool> Personal_Interno
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> Personal_InternoIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> Baja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BajaIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> PendienteDefinir
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> PendienteDefinirIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> IDTipoDocIdentificacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IDTipoDocIdentificacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> IDTipoDocIdentificacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> IDTipoDocIdentificacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string NumeroCarnetConducir
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NumeroCarnetConducirIN
    	{
    		get;
    		set;
    	}
    
    	public string NumeroCarnetConducirContains
    	{
    		get;
    		set;
    	}
    	
    	public string NumeroCarnetConducirStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NumeroCarnetConducirEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public ECAR_Datos_VehiculoSpecification ECAR_Datos_Vehiculo
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="ECAR_Datos_ConductorSpecification"/> class.
    	/// </summary>
    	public ECAR_Datos_ConductorSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="ECAR_Datos_ConductorSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public ECAR_Datos_ConductorSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.ECAR_Datos_Vehiculo = new ECAR_Datos_VehiculoSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<ECAR_Datos_Conductor, bool>> GetExpression()
    	{
    		Expression<Func<ECAR_Datos_Conductor, bool>> expression = x => true;
    
    		if(Cod_Conductor.HasValue)
    			expression = expression.And(x => x.Cod_Conductor == Cod_Conductor.Value);
    
    		if(Cod_ConductorIN != null && Cod_ConductorIN.Count() > 0)
    			expression = expression.And(x => Cod_ConductorIN.Contains(x.Cod_Conductor));
    	
    		if(Cod_ConductorFrom.HasValue)
    			expression = expression.And(x => x.Cod_Conductor >= Cod_ConductorFrom.Value);
    			
    		if(Cod_ConductorTo.HasValue)
    			expression = expression.And(x => x.Cod_Conductor <= Cod_ConductorTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(DNI))  
    			expression = expression.And(x => x.DNI.Equals(DNI));
    			
    		if(!string.IsNullOrWhiteSpace(DNIContains))  
    			expression = expression.And(x => x.DNI.Contains(DNIContains));
    			
    		if(!string.IsNullOrWhiteSpace(DNIStartsWith))
    			expression = expression.And(x => x.DNI.StartsWith(DNIStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DNIEndsWith))
    			expression = expression.And(x => x.DNI.EndsWith(DNIEndsWith));
    
    		if(DNIIN != null && DNIIN.Count() > 0)
    			expression = expression.And(x => DNIIN.Contains(x.DNI));
    	
    		if(!string.IsNullOrWhiteSpace(Apellidos))  
    			expression = expression.And(x => x.Apellidos.Equals(Apellidos));
    			
    		if(!string.IsNullOrWhiteSpace(ApellidosContains))  
    			expression = expression.And(x => x.Apellidos.Contains(ApellidosContains));
    			
    		if(!string.IsNullOrWhiteSpace(ApellidosStartsWith))
    			expression = expression.And(x => x.Apellidos.StartsWith(ApellidosStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ApellidosEndsWith))
    			expression = expression.And(x => x.Apellidos.EndsWith(ApellidosEndsWith));
    
    		if(ApellidosIN != null && ApellidosIN.Count() > 0)
    			expression = expression.And(x => ApellidosIN.Contains(x.Apellidos));
    	
    		if(!string.IsNullOrWhiteSpace(Nombre))  
    			expression = expression.And(x => x.Nombre.Equals(Nombre));
    			
    		if(!string.IsNullOrWhiteSpace(NombreContains))  
    			expression = expression.And(x => x.Nombre.Contains(NombreContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreStartsWith))
    			expression = expression.And(x => x.Nombre.StartsWith(NombreStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreEndsWith))
    			expression = expression.And(x => x.Nombre.EndsWith(NombreEndsWith));
    
    		if(NombreIN != null && NombreIN.Count() > 0)
    			expression = expression.And(x => NombreIN.Contains(x.Nombre));
    	
    		if(!string.IsNullOrWhiteSpace(Direccion))  
    			expression = expression.And(x => x.Direccion.Equals(Direccion));
    			
    		if(!string.IsNullOrWhiteSpace(DireccionContains))  
    			expression = expression.And(x => x.Direccion.Contains(DireccionContains));
    			
    		if(!string.IsNullOrWhiteSpace(DireccionStartsWith))
    			expression = expression.And(x => x.Direccion.StartsWith(DireccionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DireccionEndsWith))
    			expression = expression.And(x => x.Direccion.EndsWith(DireccionEndsWith));
    
    		if(DireccionIN != null && DireccionIN.Count() > 0)
    			expression = expression.And(x => DireccionIN.Contains(x.Direccion));
    	
    		if(!string.IsNullOrWhiteSpace(Cod_Postal))  
    			expression = expression.And(x => x.Cod_Postal.Equals(Cod_Postal));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_PostalContains))  
    			expression = expression.And(x => x.Cod_Postal.Contains(Cod_PostalContains));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_PostalStartsWith))
    			expression = expression.And(x => x.Cod_Postal.StartsWith(Cod_PostalStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Cod_PostalEndsWith))
    			expression = expression.And(x => x.Cod_Postal.EndsWith(Cod_PostalEndsWith));
    
    		if(Cod_PostalIN != null && Cod_PostalIN.Count() > 0)
    			expression = expression.And(x => Cod_PostalIN.Contains(x.Cod_Postal));
    	
    		if(!string.IsNullOrWhiteSpace(Poblacion))  
    			expression = expression.And(x => x.Poblacion.Equals(Poblacion));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionContains))  
    			expression = expression.And(x => x.Poblacion.Contains(PoblacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionStartsWith))
    			expression = expression.And(x => x.Poblacion.StartsWith(PoblacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PoblacionEndsWith))
    			expression = expression.And(x => x.Poblacion.EndsWith(PoblacionEndsWith));
    
    		if(PoblacionIN != null && PoblacionIN.Count() > 0)
    			expression = expression.And(x => PoblacionIN.Contains(x.Poblacion));
    	
    		if(!string.IsNullOrWhiteSpace(Provincia))  
    			expression = expression.And(x => x.Provincia.Equals(Provincia));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaContains))  
    			expression = expression.And(x => x.Provincia.Contains(ProvinciaContains));
    			
    		if(!string.IsNullOrWhiteSpace(ProvinciaStartsWith))
    			expression = expression.And(x => x.Provincia.StartsWith(ProvinciaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ProvinciaEndsWith))
    			expression = expression.And(x => x.Provincia.EndsWith(ProvinciaEndsWith));
    
    		if(ProvinciaIN != null && ProvinciaIN.Count() > 0)
    			expression = expression.And(x => ProvinciaIN.Contains(x.Provincia));
    	
    		if(!string.IsNullOrWhiteSpace(Tlf))  
    			expression = expression.And(x => x.Tlf.Equals(Tlf));
    			
    		if(!string.IsNullOrWhiteSpace(TlfContains))  
    			expression = expression.And(x => x.Tlf.Contains(TlfContains));
    			
    		if(!string.IsNullOrWhiteSpace(TlfStartsWith))
    			expression = expression.And(x => x.Tlf.StartsWith(TlfStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TlfEndsWith))
    			expression = expression.And(x => x.Tlf.EndsWith(TlfEndsWith));
    
    		if(TlfIN != null && TlfIN.Count() > 0)
    			expression = expression.And(x => TlfIN.Contains(x.Tlf));
    	
    		if(!string.IsNullOrWhiteSpace(Movil))  
    			expression = expression.And(x => x.Movil.Equals(Movil));
    			
    		if(!string.IsNullOrWhiteSpace(MovilContains))  
    			expression = expression.And(x => x.Movil.Contains(MovilContains));
    			
    		if(!string.IsNullOrWhiteSpace(MovilStartsWith))
    			expression = expression.And(x => x.Movil.StartsWith(MovilStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MovilEndsWith))
    			expression = expression.And(x => x.Movil.EndsWith(MovilEndsWith));
    
    		if(MovilIN != null && MovilIN.Count() > 0)
    			expression = expression.And(x => MovilIN.Contains(x.Movil));
    
    		if(Fecha_Nacimiento.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento == Fecha_Nacimiento.Value);
    
    		if(Fecha_NacimientoIN != null && Fecha_NacimientoIN.Count() > 0)
    			expression = expression.And(x => Fecha_NacimientoIN.Contains(x.Fecha_Nacimiento));
    	
    		if(Fecha_NacimientoFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento >= Fecha_NacimientoFrom.Value);
    			
    		if(Fecha_NacimientoTo.HasValue)
    			expression = expression.And(x => x.Fecha_Nacimiento <= Fecha_NacimientoTo.Value);
    				
    
    		if(Fecha_NacimientoFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Nacimiento >= Fecha_NacimientoFromOrNull.Value || x.Fecha_Nacimiento == null);
    
            if(Fecha_NacimientoToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Nacimiento <= Fecha_NacimientoToOrNull.Value || x.Fecha_Nacimiento == null);
    
    		if(Fecha_Carnet.HasValue)
    			expression = expression.And(x => x.Fecha_Carnet == Fecha_Carnet.Value);
    
    		if(Fecha_CarnetIN != null && Fecha_CarnetIN.Count() > 0)
    			expression = expression.And(x => Fecha_CarnetIN.Contains(x.Fecha_Carnet));
    	
    		if(Fecha_CarnetFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Carnet >= Fecha_CarnetFrom.Value);
    			
    		if(Fecha_CarnetTo.HasValue)
    			expression = expression.And(x => x.Fecha_Carnet <= Fecha_CarnetTo.Value);
    				
    
    		if(Fecha_CarnetFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Carnet >= Fecha_CarnetFromOrNull.Value || x.Fecha_Carnet == null);
    
            if(Fecha_CarnetToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Carnet <= Fecha_CarnetToOrNull.Value || x.Fecha_Carnet == null);
    	
    		if(!string.IsNullOrWhiteSpace(Num_Empleado))  
    			expression = expression.And(x => x.Num_Empleado.Equals(Num_Empleado));
    			
    		if(!string.IsNullOrWhiteSpace(Num_EmpleadoContains))  
    			expression = expression.And(x => x.Num_Empleado.Contains(Num_EmpleadoContains));
    			
    		if(!string.IsNullOrWhiteSpace(Num_EmpleadoStartsWith))
    			expression = expression.And(x => x.Num_Empleado.StartsWith(Num_EmpleadoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Num_EmpleadoEndsWith))
    			expression = expression.And(x => x.Num_Empleado.EndsWith(Num_EmpleadoEndsWith));
    
    		if(Num_EmpleadoIN != null && Num_EmpleadoIN.Count() > 0)
    			expression = expression.And(x => Num_EmpleadoIN.Contains(x.Num_Empleado));
    
    		if(Fecha_Vencimiento_Carnet.HasValue)
    			expression = expression.And(x => x.Fecha_Vencimiento_Carnet == Fecha_Vencimiento_Carnet.Value);
    
    		if(Fecha_Vencimiento_CarnetIN != null && Fecha_Vencimiento_CarnetIN.Count() > 0)
    			expression = expression.And(x => Fecha_Vencimiento_CarnetIN.Contains(x.Fecha_Vencimiento_Carnet));
    	
    		if(Fecha_Vencimiento_CarnetFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Vencimiento_Carnet >= Fecha_Vencimiento_CarnetFrom.Value);
    			
    		if(Fecha_Vencimiento_CarnetTo.HasValue)
    			expression = expression.And(x => x.Fecha_Vencimiento_Carnet <= Fecha_Vencimiento_CarnetTo.Value);
    				
    
    		if(Fecha_Vencimiento_CarnetFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Vencimiento_Carnet >= Fecha_Vencimiento_CarnetFromOrNull.Value || x.Fecha_Vencimiento_Carnet == null);
    
            if(Fecha_Vencimiento_CarnetToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Vencimiento_Carnet <= Fecha_Vencimiento_CarnetToOrNull.Value || x.Fecha_Vencimiento_Carnet == null);
    	
    		if(!string.IsNullOrWhiteSpace(CodCeco))  
    			expression = expression.And(x => x.CodCeco.Equals(CodCeco));
    			
    		if(!string.IsNullOrWhiteSpace(CodCecoContains))  
    			expression = expression.And(x => x.CodCeco.Contains(CodCecoContains));
    			
    		if(!string.IsNullOrWhiteSpace(CodCecoStartsWith))
    			expression = expression.And(x => x.CodCeco.StartsWith(CodCecoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CodCecoEndsWith))
    			expression = expression.And(x => x.CodCeco.EndsWith(CodCecoEndsWith));
    
    		if(CodCecoIN != null && CodCecoIN.Count() > 0)
    			expression = expression.And(x => CodCecoIN.Contains(x.CodCeco));
    
    		if(Fecha_Alta_Empresa.HasValue)
    			expression = expression.And(x => x.Fecha_Alta_Empresa == Fecha_Alta_Empresa.Value);
    
    		if(Fecha_Alta_EmpresaIN != null && Fecha_Alta_EmpresaIN.Count() > 0)
    			expression = expression.And(x => Fecha_Alta_EmpresaIN.Contains(x.Fecha_Alta_Empresa));
    	
    		if(Fecha_Alta_EmpresaFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Alta_Empresa >= Fecha_Alta_EmpresaFrom.Value);
    			
    		if(Fecha_Alta_EmpresaTo.HasValue)
    			expression = expression.And(x => x.Fecha_Alta_Empresa <= Fecha_Alta_EmpresaTo.Value);
    				
    
    		if(Fecha_Alta_EmpresaFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Alta_Empresa >= Fecha_Alta_EmpresaFromOrNull.Value || x.Fecha_Alta_Empresa == null);
    
            if(Fecha_Alta_EmpresaToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Alta_Empresa <= Fecha_Alta_EmpresaToOrNull.Value || x.Fecha_Alta_Empresa == null);
    	
    		if(!string.IsNullOrWhiteSpace(E_Mail))  
    			expression = expression.And(x => x.E_Mail.Equals(E_Mail));
    			
    		if(!string.IsNullOrWhiteSpace(E_MailContains))  
    			expression = expression.And(x => x.E_Mail.Contains(E_MailContains));
    			
    		if(!string.IsNullOrWhiteSpace(E_MailStartsWith))
    			expression = expression.And(x => x.E_Mail.StartsWith(E_MailStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(E_MailEndsWith))
    			expression = expression.And(x => x.E_Mail.EndsWith(E_MailEndsWith));
    
    		if(E_MailIN != null && E_MailIN.Count() > 0)
    			expression = expression.And(x => E_MailIN.Contains(x.E_Mail));
    
    		if(FechaAlta.HasValue)
    			expression = expression.And(x => x.FechaAlta == FechaAlta.Value);
    
    		if(FechaAltaIN != null && FechaAltaIN.Count() > 0)
    			expression = expression.And(x => FechaAltaIN.Contains(x.FechaAlta));
    	
    		if(FechaAltaFrom.HasValue)
    			expression = expression.And(x => x.FechaAlta >= FechaAltaFrom.Value);
    			
    		if(FechaAltaTo.HasValue)
    			expression = expression.And(x => x.FechaAlta <= FechaAltaTo.Value);
    				
    
    		if(FechaAltaFromOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta >= FechaAltaFromOrNull.Value || x.FechaAlta == null);
    
            if(FechaAltaToOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta <= FechaAltaToOrNull.Value || x.FechaAlta == null);
    
    		if(Personal_Interno.HasValue)
    			expression = expression.And(x => x.Personal_Interno == Personal_Interno.Value);
    
    		if(Personal_InternoIN != null && Personal_InternoIN.Count() > 0)
    			expression = expression.And(x => Personal_InternoIN.Contains(x.Personal_Interno));
    
    		if(Baja.HasValue)
    			expression = expression.And(x => x.Baja == Baja.Value);
    
    		if(BajaIN != null && BajaIN.Count() > 0)
    			expression = expression.And(x => BajaIN.Contains(x.Baja));
    
    		if(PendienteDefinir.HasValue)
    			expression = expression.And(x => x.PendienteDefinir == PendienteDefinir.Value);
    
    		if(PendienteDefinirIN != null && PendienteDefinirIN.Count() > 0)
    			expression = expression.And(x => PendienteDefinirIN.Contains(x.PendienteDefinir));
    
    		if(IDTipoDocIdentificacion.HasValue)
    			expression = expression.And(x => x.IDTipoDocIdentificacion == IDTipoDocIdentificacion.Value);
    
    		if(IDTipoDocIdentificacionIN != null && IDTipoDocIdentificacionIN.Count() > 0)
    			expression = expression.And(x => IDTipoDocIdentificacionIN.Contains(x.IDTipoDocIdentificacion));
    	
    		if(IDTipoDocIdentificacionFrom.HasValue)
    			expression = expression.And(x => x.IDTipoDocIdentificacion >= IDTipoDocIdentificacionFrom.Value);
    			
    		if(IDTipoDocIdentificacionTo.HasValue)
    			expression = expression.And(x => x.IDTipoDocIdentificacion <= IDTipoDocIdentificacionTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducir))  
    			expression = expression.And(x => x.NumeroCarnetConducir.Equals(NumeroCarnetConducir));
    			
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducirContains))  
    			expression = expression.And(x => x.NumeroCarnetConducir.Contains(NumeroCarnetConducirContains));
    			
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducirStartsWith))
    			expression = expression.And(x => x.NumeroCarnetConducir.StartsWith(NumeroCarnetConducirStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NumeroCarnetConducirEndsWith))
    			expression = expression.And(x => x.NumeroCarnetConducir.EndsWith(NumeroCarnetConducirEndsWith));
    
    		if(NumeroCarnetConducirIN != null && NumeroCarnetConducirIN.Count() > 0)
    			expression = expression.And(x => NumeroCarnetConducirIN.Contains(x.NumeroCarnetConducir));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.ECAR_Datos_Vehiculo != null)
    		{
    			var subExpression = ECAR_Datos_Vehiculo.GetExpression();
    			expression = expression.And(x => x.ECAR_Datos_Vehiculo.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(ECAR_Datos_Conductor entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<ECAR_Datos_Conductor> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
