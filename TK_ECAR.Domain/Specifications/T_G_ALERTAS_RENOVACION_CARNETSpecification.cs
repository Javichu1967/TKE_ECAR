//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_ALERTAS_RENOVACION_CARNETSpecification : ISpecification<T_G_ALERTAS_RENOVACION_CARNET>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FECHA_CADUCIDAD_CARNET
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_CADUCIDAD_CARNETIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_CARNETFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_CARNETTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_CARNETFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_CADUCIDAD_CARNETToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<int> COD_CONDUCTOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> COD_CONDUCTORIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> COD_CONDUCTORFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> COD_CONDUCTORTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string CONDUCTOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CONDUCTORIN
    	{
    		get;
    		set;
    	}
    
    	public string CONDUCTORContains
    	{
    		get;
    		set;
    	}
    	
    	public string CONDUCTORStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CONDUCTOREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DNI
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DNIIN
    	{
    		get;
    		set;
    	}
    
    	public string DNIContains
    	{
    		get;
    		set;
    	}
    	
    	public string DNIStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DNIEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string FICHERO_CARNET
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHERO_CARNETIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHERO_CARNETContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_CARNETStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_CARNETEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_G_ALERTASSpecification T_G_ALERTAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_RENOVACION_CARNETSpecification"/> class.
    	/// </summary>
    	public T_G_ALERTAS_RENOVACION_CARNETSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_RENOVACION_CARNETSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_ALERTAS_RENOVACION_CARNETSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS = new T_G_ALERTASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_ALERTAS_RENOVACION_CARNET, bool>> GetExpression()
    	{
    		Expression<Func<T_G_ALERTAS_RENOVACION_CARNET, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    
    		if(FECHA_CADUCIDAD_CARNET.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_CARNET == FECHA_CADUCIDAD_CARNET.Value);
    
    		if(FECHA_CADUCIDAD_CARNETIN != null && FECHA_CADUCIDAD_CARNETIN.Count() > 0)
    			expression = expression.And(x => FECHA_CADUCIDAD_CARNETIN.Contains(x.FECHA_CADUCIDAD_CARNET));
    	
    		if(FECHA_CADUCIDAD_CARNETFrom.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_CARNET >= FECHA_CADUCIDAD_CARNETFrom.Value);
    			
    		if(FECHA_CADUCIDAD_CARNETTo.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_CARNET <= FECHA_CADUCIDAD_CARNETTo.Value);
    				
    
    		if(FECHA_CADUCIDAD_CARNETFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CADUCIDAD_CARNET >= FECHA_CADUCIDAD_CARNETFromOrNull.Value || x.FECHA_CADUCIDAD_CARNET == null);
    
            if(FECHA_CADUCIDAD_CARNETToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CADUCIDAD_CARNET <= FECHA_CADUCIDAD_CARNETToOrNull.Value || x.FECHA_CADUCIDAD_CARNET == null);
    
    		if(COD_CONDUCTOR.HasValue)
    			expression = expression.And(x => x.COD_CONDUCTOR == COD_CONDUCTOR.Value);
    
    		if(COD_CONDUCTORIN != null && COD_CONDUCTORIN.Count() > 0)
    			expression = expression.And(x => COD_CONDUCTORIN.Contains(x.COD_CONDUCTOR));
    	
    		if(COD_CONDUCTORFrom.HasValue)
    			expression = expression.And(x => x.COD_CONDUCTOR >= COD_CONDUCTORFrom.Value);
    			
    		if(COD_CONDUCTORTo.HasValue)
    			expression = expression.And(x => x.COD_CONDUCTOR <= COD_CONDUCTORTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(CONDUCTOR))  
    			expression = expression.And(x => x.CONDUCTOR.Equals(CONDUCTOR));
    			
    		if(!string.IsNullOrWhiteSpace(CONDUCTORContains))  
    			expression = expression.And(x => x.CONDUCTOR.Contains(CONDUCTORContains));
    			
    		if(!string.IsNullOrWhiteSpace(CONDUCTORStartsWith))
    			expression = expression.And(x => x.CONDUCTOR.StartsWith(CONDUCTORStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CONDUCTOREndsWith))
    			expression = expression.And(x => x.CONDUCTOR.EndsWith(CONDUCTOREndsWith));
    
    		if(CONDUCTORIN != null && CONDUCTORIN.Count() > 0)
    			expression = expression.And(x => CONDUCTORIN.Contains(x.CONDUCTOR));
    	
    		if(!string.IsNullOrWhiteSpace(DNI))  
    			expression = expression.And(x => x.DNI.Equals(DNI));
    			
    		if(!string.IsNullOrWhiteSpace(DNIContains))  
    			expression = expression.And(x => x.DNI.Contains(DNIContains));
    			
    		if(!string.IsNullOrWhiteSpace(DNIStartsWith))
    			expression = expression.And(x => x.DNI.StartsWith(DNIStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DNIEndsWith))
    			expression = expression.And(x => x.DNI.EndsWith(DNIEndsWith));
    
    		if(DNIIN != null && DNIIN.Count() > 0)
    			expression = expression.And(x => DNIIN.Contains(x.DNI));
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNET))  
    			expression = expression.And(x => x.FICHERO_CARNET.Equals(FICHERO_CARNET));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNETContains))  
    			expression = expression.And(x => x.FICHERO_CARNET.Contains(FICHERO_CARNETContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNETStartsWith))
    			expression = expression.And(x => x.FICHERO_CARNET.StartsWith(FICHERO_CARNETStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNETEndsWith))
    			expression = expression.And(x => x.FICHERO_CARNET.EndsWith(FICHERO_CARNETEndsWith));
    
    		if(FICHERO_CARNETIN != null && FICHERO_CARNETIN.Count() > 0)
    			expression = expression.And(x => FICHERO_CARNETIN.Contains(x.FICHERO_CARNET));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS != null)
    		{
    			var subExpression = T_G_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_ALERTAS_RENOVACION_CARNET entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_ALERTAS_RENOVACION_CARNET> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
