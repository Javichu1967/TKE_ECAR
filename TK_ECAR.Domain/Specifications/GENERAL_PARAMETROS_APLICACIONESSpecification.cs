//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class GENERAL_PARAMETROS_APLICACIONESSpecification : ISpecification<GENERAL_PARAMETROS_APLICACIONES>
    {
    
        public Nullable<int> ID
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IDIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> IDFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> IDTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string AGRUPACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> AGRUPACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string AGRUPACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string AGRUPACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string AGRUPACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string PARAMETRO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PARAMETROIN
    	{
    		get;
    		set;
    	}
    
    	public string PARAMETROContains
    	{
    		get;
    		set;
    	}
    	
    	public string PARAMETROStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PARAMETROEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string VALOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> VALORIN
    	{
    		get;
    		set;
    	}
    
    	public string VALORContains
    	{
    		get;
    		set;
    	}
    	
    	public string VALORStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string VALOREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> NUM_ORDEN
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> NUM_ORDENIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> NUM_ORDENFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> NUM_ORDENTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<bool> BAJA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BAJAIN
    	{
    		get;
    		set;
    	}
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="GENERAL_PARAMETROS_APLICACIONESSpecification"/> class.
    	/// </summary>
    	public GENERAL_PARAMETROS_APLICACIONESSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="GENERAL_PARAMETROS_APLICACIONESSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public GENERAL_PARAMETROS_APLICACIONESSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<GENERAL_PARAMETROS_APLICACIONES, bool>> GetExpression()
    	{
    		Expression<Func<GENERAL_PARAMETROS_APLICACIONES, bool>> expression = x => true;
    
    		if(ID.HasValue)
    			expression = expression.And(x => x.ID == ID.Value);
    
    		if(IDIN != null && IDIN.Count() > 0)
    			expression = expression.And(x => IDIN.Contains(x.ID));
    	
    		if(IDFrom.HasValue)
    			expression = expression.And(x => x.ID >= IDFrom.Value);
    			
    		if(IDTo.HasValue)
    			expression = expression.And(x => x.ID <= IDTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(AGRUPACION))  
    			expression = expression.And(x => x.AGRUPACION.Equals(AGRUPACION));
    			
    		if(!string.IsNullOrWhiteSpace(AGRUPACIONContains))  
    			expression = expression.And(x => x.AGRUPACION.Contains(AGRUPACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(AGRUPACIONStartsWith))
    			expression = expression.And(x => x.AGRUPACION.StartsWith(AGRUPACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(AGRUPACIONEndsWith))
    			expression = expression.And(x => x.AGRUPACION.EndsWith(AGRUPACIONEndsWith));
    
    		if(AGRUPACIONIN != null && AGRUPACIONIN.Count() > 0)
    			expression = expression.And(x => AGRUPACIONIN.Contains(x.AGRUPACION));
    	
    		if(!string.IsNullOrWhiteSpace(PARAMETRO))  
    			expression = expression.And(x => x.PARAMETRO.Equals(PARAMETRO));
    			
    		if(!string.IsNullOrWhiteSpace(PARAMETROContains))  
    			expression = expression.And(x => x.PARAMETRO.Contains(PARAMETROContains));
    			
    		if(!string.IsNullOrWhiteSpace(PARAMETROStartsWith))
    			expression = expression.And(x => x.PARAMETRO.StartsWith(PARAMETROStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PARAMETROEndsWith))
    			expression = expression.And(x => x.PARAMETRO.EndsWith(PARAMETROEndsWith));
    
    		if(PARAMETROIN != null && PARAMETROIN.Count() > 0)
    			expression = expression.And(x => PARAMETROIN.Contains(x.PARAMETRO));
    	
    		if(!string.IsNullOrWhiteSpace(VALOR))  
    			expression = expression.And(x => x.VALOR.Equals(VALOR));
    			
    		if(!string.IsNullOrWhiteSpace(VALORContains))  
    			expression = expression.And(x => x.VALOR.Contains(VALORContains));
    			
    		if(!string.IsNullOrWhiteSpace(VALORStartsWith))
    			expression = expression.And(x => x.VALOR.StartsWith(VALORStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(VALOREndsWith))
    			expression = expression.And(x => x.VALOR.EndsWith(VALOREndsWith));
    
    		if(VALORIN != null && VALORIN.Count() > 0)
    			expression = expression.And(x => VALORIN.Contains(x.VALOR));
    
    		if(NUM_ORDEN.HasValue)
    			expression = expression.And(x => x.NUM_ORDEN == NUM_ORDEN.Value);
    
    		if(NUM_ORDENIN != null && NUM_ORDENIN.Count() > 0)
    			expression = expression.And(x => NUM_ORDENIN.Contains(x.NUM_ORDEN));
    	
    		if(NUM_ORDENFrom.HasValue)
    			expression = expression.And(x => x.NUM_ORDEN >= NUM_ORDENFrom.Value);
    			
    		if(NUM_ORDENTo.HasValue)
    			expression = expression.And(x => x.NUM_ORDEN <= NUM_ORDENTo.Value);
    				
    
    
    		if(BAJA.HasValue)
    			expression = expression.And(x => x.BAJA == BAJA.Value);
    
    		if(BAJAIN != null && BAJAIN.Count() > 0)
    			expression = expression.And(x => BAJAIN.Contains(x.BAJA));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(GENERAL_PARAMETROS_APLICACIONES entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<GENERAL_PARAMETROS_APLICACIONES> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
