//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_M_CLIENTESSpecification : ISpecification<T_M_CLIENTES>
    {
    
        public string ID_CLIENTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ID_CLIENTEIN
    	{
    		get;
    		set;
    	}
    
    	public string ID_CLIENTEContains
    	{
    		get;
    		set;
    	}
    	
    	public string ID_CLIENTEStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ID_CLIENTEEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NIF
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NIFIN
    	{
    		get;
    		set;
    	}
    
    	public string NIFContains
    	{
    		get;
    		set;
    	}
    	
    	public string NIFStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NIFEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NOMBRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBREIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBREContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DIRECCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DIRECCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DIRECCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DIRECCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DIRECCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string LOCALIDAD
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LOCALIDADIN
    	{
    		get;
    		set;
    	}
    
    	public string LOCALIDADContains
    	{
    		get;
    		set;
    	}
    	
    	public string LOCALIDADStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LOCALIDADEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CODIGO_POSTAL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CODIGO_POSTALIN
    	{
    		get;
    		set;
    	}
    
    	public string CODIGO_POSTALContains
    	{
    		get;
    		set;
    	}
    	
    	public string CODIGO_POSTALStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CODIGO_POSTALEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_G_VIA_VERDE_EXTRACTOSSpecification T_G_VIA_VERDE_EXTRACTOS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_M_CLIENTESSpecification"/> class.
    	/// </summary>
    	public T_M_CLIENTESSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_M_CLIENTESSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_M_CLIENTESSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_VIA_VERDE_EXTRACTOS = new T_G_VIA_VERDE_EXTRACTOSSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_M_CLIENTES, bool>> GetExpression()
    	{
    		Expression<Func<T_M_CLIENTES, bool>> expression = x => true;
    	
    		if(!string.IsNullOrWhiteSpace(ID_CLIENTE))  
    			expression = expression.And(x => x.ID_CLIENTE.Equals(ID_CLIENTE));
    			
    		if(!string.IsNullOrWhiteSpace(ID_CLIENTEContains))  
    			expression = expression.And(x => x.ID_CLIENTE.Contains(ID_CLIENTEContains));
    			
    		if(!string.IsNullOrWhiteSpace(ID_CLIENTEStartsWith))
    			expression = expression.And(x => x.ID_CLIENTE.StartsWith(ID_CLIENTEStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ID_CLIENTEEndsWith))
    			expression = expression.And(x => x.ID_CLIENTE.EndsWith(ID_CLIENTEEndsWith));
    
    		if(ID_CLIENTEIN != null && ID_CLIENTEIN.Count() > 0)
    			expression = expression.And(x => ID_CLIENTEIN.Contains(x.ID_CLIENTE));
    	
    		if(!string.IsNullOrWhiteSpace(NIF))  
    			expression = expression.And(x => x.NIF.Equals(NIF));
    			
    		if(!string.IsNullOrWhiteSpace(NIFContains))  
    			expression = expression.And(x => x.NIF.Contains(NIFContains));
    			
    		if(!string.IsNullOrWhiteSpace(NIFStartsWith))
    			expression = expression.And(x => x.NIF.StartsWith(NIFStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NIFEndsWith))
    			expression = expression.And(x => x.NIF.EndsWith(NIFEndsWith));
    
    		if(NIFIN != null && NIFIN.Count() > 0)
    			expression = expression.And(x => NIFIN.Contains(x.NIF));
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE))  
    			expression = expression.And(x => x.NOMBRE.Equals(NOMBRE));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREContains))  
    			expression = expression.And(x => x.NOMBRE.Contains(NOMBREContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREStartsWith))
    			expression = expression.And(x => x.NOMBRE.StartsWith(NOMBREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBREEndsWith))
    			expression = expression.And(x => x.NOMBRE.EndsWith(NOMBREEndsWith));
    
    		if(NOMBREIN != null && NOMBREIN.Count() > 0)
    			expression = expression.And(x => NOMBREIN.Contains(x.NOMBRE));
    	
    		if(!string.IsNullOrWhiteSpace(DIRECCION))  
    			expression = expression.And(x => x.DIRECCION.Equals(DIRECCION));
    			
    		if(!string.IsNullOrWhiteSpace(DIRECCIONContains))  
    			expression = expression.And(x => x.DIRECCION.Contains(DIRECCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DIRECCIONStartsWith))
    			expression = expression.And(x => x.DIRECCION.StartsWith(DIRECCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DIRECCIONEndsWith))
    			expression = expression.And(x => x.DIRECCION.EndsWith(DIRECCIONEndsWith));
    
    		if(DIRECCIONIN != null && DIRECCIONIN.Count() > 0)
    			expression = expression.And(x => DIRECCIONIN.Contains(x.DIRECCION));
    	
    		if(!string.IsNullOrWhiteSpace(LOCALIDAD))  
    			expression = expression.And(x => x.LOCALIDAD.Equals(LOCALIDAD));
    			
    		if(!string.IsNullOrWhiteSpace(LOCALIDADContains))  
    			expression = expression.And(x => x.LOCALIDAD.Contains(LOCALIDADContains));
    			
    		if(!string.IsNullOrWhiteSpace(LOCALIDADStartsWith))
    			expression = expression.And(x => x.LOCALIDAD.StartsWith(LOCALIDADStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LOCALIDADEndsWith))
    			expression = expression.And(x => x.LOCALIDAD.EndsWith(LOCALIDADEndsWith));
    
    		if(LOCALIDADIN != null && LOCALIDADIN.Count() > 0)
    			expression = expression.And(x => LOCALIDADIN.Contains(x.LOCALIDAD));
    	
    		if(!string.IsNullOrWhiteSpace(CODIGO_POSTAL))  
    			expression = expression.And(x => x.CODIGO_POSTAL.Equals(CODIGO_POSTAL));
    			
    		if(!string.IsNullOrWhiteSpace(CODIGO_POSTALContains))  
    			expression = expression.And(x => x.CODIGO_POSTAL.Contains(CODIGO_POSTALContains));
    			
    		if(!string.IsNullOrWhiteSpace(CODIGO_POSTALStartsWith))
    			expression = expression.And(x => x.CODIGO_POSTAL.StartsWith(CODIGO_POSTALStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CODIGO_POSTALEndsWith))
    			expression = expression.And(x => x.CODIGO_POSTAL.EndsWith(CODIGO_POSTALEndsWith));
    
    		if(CODIGO_POSTALIN != null && CODIGO_POSTALIN.Count() > 0)
    			expression = expression.And(x => CODIGO_POSTALIN.Contains(x.CODIGO_POSTAL));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_VIA_VERDE_EXTRACTOS != null)
    		{
    			var subExpression = T_G_VIA_VERDE_EXTRACTOS.GetExpression();
    			expression = expression.And(x => x.T_G_VIA_VERDE_EXTRACTOS.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_M_CLIENTES entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_M_CLIENTES> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
