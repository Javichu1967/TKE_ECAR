//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class SAPHR_DireccionesTerritorialesSpecification : ISpecification<SAPHR_DireccionesTerritoriales>
    {
    
        public string IdDT
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdDTIN
    	{
    		get;
    		set;
    	}
    
    	public string IdDTContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdDTStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdDTEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Nombre
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NombreIN
    	{
    		get;
    		set;
    	}
    
    	public string NombreContains
    	{
    		get;
    		set;
    	}
    	
    	public string NombreStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NombreEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> Empresa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> EmpresaIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> Baja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BajaIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FechaBaja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaBajaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaBajaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaBajaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaBajaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaBajaToOrNull
        {
            get;
            set;
        }
    		
    
        public string IdDT_Medea
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdDT_MedeaIN
    	{
    		get;
    		set;
    	}
    
    	public string IdDT_MedeaContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdDT_MedeaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdDT_MedeaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IdEmpresa_Medea
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IdEmpresa_MedeaIN
    	{
    		get;
    		set;
    	}
    
    	public string IdEmpresa_MedeaContains
    	{
    		get;
    		set;
    	}
    	
    	public string IdEmpresa_MedeaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IdEmpresa_MedeaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public SAPHR_DelegacionesSpecification SAPHR_Delegaciones
        {
            get;
    		set;
    	}
    
    	public SAPHR_EmpresasSpecification SAPHR_Empresas
        {
            get;
    		set;
    	}
    
    	public SAPHR_DireccionesAreaSpecification SAPHR_DireccionesArea
        {
            get;
    		set;
    	}
    
    	public SAPHR_CentrosCosteSpecification SAPHR_CentrosCoste
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="SAPHR_DireccionesTerritorialesSpecification"/> class.
    	/// </summary>
    	public SAPHR_DireccionesTerritorialesSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="SAPHR_DireccionesTerritorialesSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public SAPHR_DireccionesTerritorialesSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.SAPHR_Delegaciones = new SAPHR_DelegacionesSpecification();
    		this.SAPHR_Empresas = new SAPHR_EmpresasSpecification();
    		this.SAPHR_DireccionesArea = new SAPHR_DireccionesAreaSpecification();
    		this.SAPHR_CentrosCoste = new SAPHR_CentrosCosteSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<SAPHR_DireccionesTerritoriales, bool>> GetExpression()
    	{
    		Expression<Func<SAPHR_DireccionesTerritoriales, bool>> expression = x => true;
    	
    		if(!string.IsNullOrWhiteSpace(IdDT))  
    			expression = expression.And(x => x.IdDT.Equals(IdDT));
    			
    		if(!string.IsNullOrWhiteSpace(IdDTContains))  
    			expression = expression.And(x => x.IdDT.Contains(IdDTContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdDTStartsWith))
    			expression = expression.And(x => x.IdDT.StartsWith(IdDTStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdDTEndsWith))
    			expression = expression.And(x => x.IdDT.EndsWith(IdDTEndsWith));
    
    		if(IdDTIN != null && IdDTIN.Count() > 0)
    			expression = expression.And(x => IdDTIN.Contains(x.IdDT));
    	
    		if(!string.IsNullOrWhiteSpace(Nombre))  
    			expression = expression.And(x => x.Nombre.Equals(Nombre));
    			
    		if(!string.IsNullOrWhiteSpace(NombreContains))  
    			expression = expression.And(x => x.Nombre.Contains(NombreContains));
    			
    		if(!string.IsNullOrWhiteSpace(NombreStartsWith))
    			expression = expression.And(x => x.Nombre.StartsWith(NombreStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NombreEndsWith))
    			expression = expression.And(x => x.Nombre.EndsWith(NombreEndsWith));
    
    		if(NombreIN != null && NombreIN.Count() > 0)
    			expression = expression.And(x => NombreIN.Contains(x.Nombre));
    
    		if(Empresa.HasValue)
    			expression = expression.And(x => x.Empresa == Empresa.Value);
    
    		if(EmpresaIN != null && EmpresaIN.Count() > 0)
    			expression = expression.And(x => EmpresaIN.Contains(x.Empresa));
    
    		if(Baja.HasValue)
    			expression = expression.And(x => x.Baja == Baja.Value);
    
    		if(BajaIN != null && BajaIN.Count() > 0)
    			expression = expression.And(x => BajaIN.Contains(x.Baja));
    
    		if(FechaBaja.HasValue)
    			expression = expression.And(x => x.FechaBaja == FechaBaja.Value);
    
    		if(FechaBajaIN != null && FechaBajaIN.Count() > 0)
    			expression = expression.And(x => FechaBajaIN.Contains(x.FechaBaja));
    	
    		if(FechaBajaFrom.HasValue)
    			expression = expression.And(x => x.FechaBaja >= FechaBajaFrom.Value);
    			
    		if(FechaBajaTo.HasValue)
    			expression = expression.And(x => x.FechaBaja <= FechaBajaTo.Value);
    				
    
    		if(FechaBajaFromOrNull.HasValue)
                expression = expression.And(x => x.FechaBaja >= FechaBajaFromOrNull.Value || x.FechaBaja == null);
    
            if(FechaBajaToOrNull.HasValue)
                expression = expression.And(x => x.FechaBaja <= FechaBajaToOrNull.Value || x.FechaBaja == null);
    	
    		if(!string.IsNullOrWhiteSpace(IdDT_Medea))  
    			expression = expression.And(x => x.IdDT_Medea.Equals(IdDT_Medea));
    			
    		if(!string.IsNullOrWhiteSpace(IdDT_MedeaContains))  
    			expression = expression.And(x => x.IdDT_Medea.Contains(IdDT_MedeaContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdDT_MedeaStartsWith))
    			expression = expression.And(x => x.IdDT_Medea.StartsWith(IdDT_MedeaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdDT_MedeaEndsWith))
    			expression = expression.And(x => x.IdDT_Medea.EndsWith(IdDT_MedeaEndsWith));
    
    		if(IdDT_MedeaIN != null && IdDT_MedeaIN.Count() > 0)
    			expression = expression.And(x => IdDT_MedeaIN.Contains(x.IdDT_Medea));
    	
    		if(!string.IsNullOrWhiteSpace(IdEmpresa_Medea))  
    			expression = expression.And(x => x.IdEmpresa_Medea.Equals(IdEmpresa_Medea));
    			
    		if(!string.IsNullOrWhiteSpace(IdEmpresa_MedeaContains))  
    			expression = expression.And(x => x.IdEmpresa_Medea.Contains(IdEmpresa_MedeaContains));
    			
    		if(!string.IsNullOrWhiteSpace(IdEmpresa_MedeaStartsWith))
    			expression = expression.And(x => x.IdEmpresa_Medea.StartsWith(IdEmpresa_MedeaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IdEmpresa_MedeaEndsWith))
    			expression = expression.And(x => x.IdEmpresa_Medea.EndsWith(IdEmpresa_MedeaEndsWith));
    
    		if(IdEmpresa_MedeaIN != null && IdEmpresa_MedeaIN.Count() > 0)
    			expression = expression.And(x => IdEmpresa_MedeaIN.Contains(x.IdEmpresa_Medea));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.SAPHR_Delegaciones != null)
    		{
    			var subExpression = SAPHR_Delegaciones.GetExpression();
    			expression = expression.And(x => x.SAPHR_Delegaciones.AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_Empresas != null)
    		{
    			var subExpression = SAPHR_Empresas.GetExpression();
    			expression = expression.And(x => (new[] { x.SAPHR_Empresas }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_DireccionesArea != null)
    		{
    			var subExpression = SAPHR_DireccionesArea.GetExpression();
    			expression = expression.And(x => x.SAPHR_DireccionesArea.AsQueryable().Any(subExpression));
    		}
    
    		if(this.SAPHR_CentrosCoste != null)
    		{
    			var subExpression = SAPHR_CentrosCoste.GetExpression();
    			expression = expression.And(x => x.SAPHR_CentrosCoste.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(SAPHR_DireccionesTerritoriales entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<SAPHR_DireccionesTerritoriales> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
