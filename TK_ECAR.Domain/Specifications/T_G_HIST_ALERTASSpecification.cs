//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_HIST_ALERTASSpecification : ISpecification<T_G_HIST_ALERTAS>
    {
    
        public Nullable<int> ID_HIST_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_HIST_ALERTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_HIST_ALERTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_HIST_ALERTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ESTADO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ESTADOIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ACCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ACCIONIN
    	{
    		get;
    		set;
    	}
    
        public string USUARIO_CREACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> USUARIO_CREACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string USUARIO_CREACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_CREACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_CREACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_CREACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_CREACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_CREACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_CREACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_CREACIONFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_CREACIONToOrNull
        {
            get;
            set;
        }
    		
    
        #region Navigation Properties
    
    	public T_G_ALERTASSpecification T_G_ALERTAS
        {
            get;
    		set;
    	}
    
    	public T_M_ACCIONESSpecification T_M_ACCIONES
        {
            get;
    		set;
    	}
    
    	public T_M_ESTADOSSpecification T_M_ESTADOS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_HIST_ALERTASSpecification"/> class.
    	/// </summary>
    	public T_G_HIST_ALERTASSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_HIST_ALERTASSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_HIST_ALERTASSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS = new T_G_ALERTASSpecification();
    		this.T_M_ACCIONES = new T_M_ACCIONESSpecification();
    		this.T_M_ESTADOS = new T_M_ESTADOSSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_HIST_ALERTAS, bool>> GetExpression()
    	{
    		Expression<Func<T_G_HIST_ALERTAS, bool>> expression = x => true;
    
    		if(ID_HIST_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_HIST_ALERTA == ID_HIST_ALERTA.Value);
    
    		if(ID_HIST_ALERTAIN != null && ID_HIST_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_HIST_ALERTAIN.Contains(x.ID_HIST_ALERTA));
    	
    		if(ID_HIST_ALERTAFrom.HasValue)
    			expression = expression.And(x => x.ID_HIST_ALERTA >= ID_HIST_ALERTAFrom.Value);
    			
    		if(ID_HIST_ALERTATo.HasValue)
    			expression = expression.And(x => x.ID_HIST_ALERTA <= ID_HIST_ALERTATo.Value);
    				
    
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    
    		if(ID_ESTADO.HasValue)
    			expression = expression.And(x => x.ID_ESTADO == ID_ESTADO.Value);
    
    		if(ID_ESTADOIN != null && ID_ESTADOIN.Count() > 0)
    			expression = expression.And(x => ID_ESTADOIN.Contains(x.ID_ESTADO));
    
    		if(ID_ACCION.HasValue)
    			expression = expression.And(x => x.ID_ACCION == ID_ACCION.Value);
    
    		if(ID_ACCIONIN != null && ID_ACCIONIN.Count() > 0)
    			expression = expression.And(x => ID_ACCIONIN.Contains(x.ID_ACCION));
    	
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACION))  
    			expression = expression.And(x => x.USUARIO_CREACION.Equals(USUARIO_CREACION));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONContains))  
    			expression = expression.And(x => x.USUARIO_CREACION.Contains(USUARIO_CREACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONStartsWith))
    			expression = expression.And(x => x.USUARIO_CREACION.StartsWith(USUARIO_CREACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONEndsWith))
    			expression = expression.And(x => x.USUARIO_CREACION.EndsWith(USUARIO_CREACIONEndsWith));
    
    		if(USUARIO_CREACIONIN != null && USUARIO_CREACIONIN.Count() > 0)
    			expression = expression.And(x => USUARIO_CREACIONIN.Contains(x.USUARIO_CREACION));
    
    		if(FECHA_CREACION.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION == FECHA_CREACION.Value);
    
    		if(FECHA_CREACIONIN != null && FECHA_CREACIONIN.Count() > 0)
    			expression = expression.And(x => FECHA_CREACIONIN.Contains(x.FECHA_CREACION));
    	
    		if(FECHA_CREACIONFrom.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION >= FECHA_CREACIONFrom.Value);
    			
    		if(FECHA_CREACIONTo.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION <= FECHA_CREACIONTo.Value);
    				
    
    		if(FECHA_CREACIONFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CREACION >= FECHA_CREACIONFromOrNull.Value || x.FECHA_CREACION == null);
    
            if(FECHA_CREACIONToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CREACION <= FECHA_CREACIONToOrNull.Value || x.FECHA_CREACION == null);
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS != null)
    		{
    			var subExpression = T_G_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_ACCIONES != null)
    		{
    			var subExpression = T_M_ACCIONES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ACCIONES }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_ESTADOS != null)
    		{
    			var subExpression = T_M_ESTADOS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ESTADOS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_HIST_ALERTAS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_HIST_ALERTAS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
