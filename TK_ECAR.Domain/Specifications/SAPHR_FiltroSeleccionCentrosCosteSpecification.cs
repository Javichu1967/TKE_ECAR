//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class SAPHR_FiltroSeleccionCentrosCosteSpecification : ISpecification<SAPHR_FiltroSeleccionCentrosCoste>
    {
    
        public Nullable<int> IDSeleccion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IDSeleccionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> IDSeleccionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> IDSeleccionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string FiltroCentroCoste
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FiltroCentroCosteIN
    	{
    		get;
    		set;
    	}
    
    	public string FiltroCentroCosteContains
    	{
    		get;
    		set;
    	}
    	
    	public string FiltroCentroCosteStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FiltroCentroCosteEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Agrupacion1
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Agrupacion1IN
    	{
    		get;
    		set;
    	}
    
    	public string Agrupacion1Contains
    	{
    		get;
    		set;
    	}
    	
    	public string Agrupacion1StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Agrupacion1EndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Agrupacion2
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Agrupacion2IN
    	{
    		get;
    		set;
    	}
    
    	public string Agrupacion2Contains
    	{
    		get;
    		set;
    	}
    	
    	public string Agrupacion2StartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Agrupacion2EndsWith
    	{
    		get;
    		set;
    	}
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="SAPHR_FiltroSeleccionCentrosCosteSpecification"/> class.
    	/// </summary>
    	public SAPHR_FiltroSeleccionCentrosCosteSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="SAPHR_FiltroSeleccionCentrosCosteSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public SAPHR_FiltroSeleccionCentrosCosteSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<SAPHR_FiltroSeleccionCentrosCoste, bool>> GetExpression()
    	{
    		Expression<Func<SAPHR_FiltroSeleccionCentrosCoste, bool>> expression = x => true;
    
    		if(IDSeleccion.HasValue)
    			expression = expression.And(x => x.IDSeleccion == IDSeleccion.Value);
    
    		if(IDSeleccionIN != null && IDSeleccionIN.Count() > 0)
    			expression = expression.And(x => IDSeleccionIN.Contains(x.IDSeleccion));
    	
    		if(IDSeleccionFrom.HasValue)
    			expression = expression.And(x => x.IDSeleccion >= IDSeleccionFrom.Value);
    			
    		if(IDSeleccionTo.HasValue)
    			expression = expression.And(x => x.IDSeleccion <= IDSeleccionTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(FiltroCentroCoste))  
    			expression = expression.And(x => x.FiltroCentroCoste.Equals(FiltroCentroCoste));
    			
    		if(!string.IsNullOrWhiteSpace(FiltroCentroCosteContains))  
    			expression = expression.And(x => x.FiltroCentroCoste.Contains(FiltroCentroCosteContains));
    			
    		if(!string.IsNullOrWhiteSpace(FiltroCentroCosteStartsWith))
    			expression = expression.And(x => x.FiltroCentroCoste.StartsWith(FiltroCentroCosteStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FiltroCentroCosteEndsWith))
    			expression = expression.And(x => x.FiltroCentroCoste.EndsWith(FiltroCentroCosteEndsWith));
    
    		if(FiltroCentroCosteIN != null && FiltroCentroCosteIN.Count() > 0)
    			expression = expression.And(x => FiltroCentroCosteIN.Contains(x.FiltroCentroCoste));
    	
    		if(!string.IsNullOrWhiteSpace(Agrupacion1))  
    			expression = expression.And(x => x.Agrupacion1.Equals(Agrupacion1));
    			
    		if(!string.IsNullOrWhiteSpace(Agrupacion1Contains))  
    			expression = expression.And(x => x.Agrupacion1.Contains(Agrupacion1Contains));
    			
    		if(!string.IsNullOrWhiteSpace(Agrupacion1StartsWith))
    			expression = expression.And(x => x.Agrupacion1.StartsWith(Agrupacion1StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Agrupacion1EndsWith))
    			expression = expression.And(x => x.Agrupacion1.EndsWith(Agrupacion1EndsWith));
    
    		if(Agrupacion1IN != null && Agrupacion1IN.Count() > 0)
    			expression = expression.And(x => Agrupacion1IN.Contains(x.Agrupacion1));
    	
    		if(!string.IsNullOrWhiteSpace(Agrupacion2))  
    			expression = expression.And(x => x.Agrupacion2.Equals(Agrupacion2));
    			
    		if(!string.IsNullOrWhiteSpace(Agrupacion2Contains))  
    			expression = expression.And(x => x.Agrupacion2.Contains(Agrupacion2Contains));
    			
    		if(!string.IsNullOrWhiteSpace(Agrupacion2StartsWith))
    			expression = expression.And(x => x.Agrupacion2.StartsWith(Agrupacion2StartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Agrupacion2EndsWith))
    			expression = expression.And(x => x.Agrupacion2.EndsWith(Agrupacion2EndsWith));
    
    		if(Agrupacion2IN != null && Agrupacion2IN.Count() > 0)
    			expression = expression.And(x => Agrupacion2IN.Contains(x.Agrupacion2));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(SAPHR_FiltroSeleccionCentrosCoste entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<SAPHR_FiltroSeleccionCentrosCoste> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
