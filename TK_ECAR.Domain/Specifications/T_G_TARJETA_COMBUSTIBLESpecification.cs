//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_TARJETA_COMBUSTIBLESpecification : ISpecification<T_G_TARJETA_COMBUSTIBLE>
    {
    
        public Nullable<int> Id
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IdIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> Sociedad
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> SociedadIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> SociedadFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> SociedadTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string EJERCICIO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EJERCICIOIN
    	{
    		get;
    		set;
    	}
    
    	public string EJERCICIOContains
    	{
    		get;
    		set;
    	}
    	
    	public string EJERCICIOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EJERCICIOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TRIMESTRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TRIMESTREIN
    	{
    		get;
    		set;
    	}
    
    	public string TRIMESTREContains
    	{
    		get;
    		set;
    	}
    	
    	public string TRIMESTREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TRIMESTREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NUM_DOCUMENTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NUM_DOCUMENTOIN
    	{
    		get;
    		set;
    	}
    
    	public string NUM_DOCUMENTOContains
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_DOCUMENTOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_DOCUMENTOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_FACTURA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_FACTURAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_FACTURAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_FACTURATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_FACTURAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_FACTURAToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> FECHA_OPERACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_OPERACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_OPERACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_OPERACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_OPERACIONFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_OPERACIONToOrNull
        {
            get;
            set;
        }
    		
    
        public string COD_TARJETA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> COD_TARJETAIN
    	{
    		get;
    		set;
    	}
    
    	public string COD_TARJETAContains
    	{
    		get;
    		set;
    	}
    	
    	public string COD_TARJETAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string COD_TARJETAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string MATRICULA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MATRICULAIN
    	{
    		get;
    		set;
    	}
    
    	public string MATRICULAContains
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DES_PRODU
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DES_PRODUIN
    	{
    		get;
    		set;
    	}
    
    	public string DES_PRODUContains
    	{
    		get;
    		set;
    	}
    	
    	public string DES_PRODUStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DES_PRODUEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string COD_PRODU
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> COD_PRODUIN
    	{
    		get;
    		set;
    	}
    
    	public string COD_PRODUContains
    	{
    		get;
    		set;
    	}
    	
    	public string COD_PRODUStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string COD_PRODUEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<double> KILOMETROS
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> KILOMETROSIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> KILOMETROSFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> KILOMETROSTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> NUM_LITROS
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> NUM_LITROSIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> NUM_LITROSFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> NUM_LITROSTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> IMPORTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> IMPORTEIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> IMPORTEFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> IMPORTETo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> BONIF_TOTAL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> BONIF_TOTALIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> BONIF_TOTALFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> BONIF_TOTALTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> IVA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> IVAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> IVAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> IVATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> IMP_TOTAL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> IMP_TOTALIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> IMP_TOTALFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> IMP_TOTALTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<System.DateTime> FechaAlta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FechaAltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FechaAltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FechaAltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FechaAltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FechaAltaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<double> KmsCiclo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> KmsCicloIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> KmsCicloFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> KmsCicloTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string NOMBRE_ARCHIVO_IMPORTACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBRE_ARCHIVO_IMPORTACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBRE_ARCHIVO_IMPORTACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBRE_ARCHIVO_IMPORTACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBRE_ARCHIVO_IMPORTACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ID_EMPRESA_TARJETA_COMBUSTIBLE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESA_TARJETA_COMBUSTIBLEIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESA_TARJETA_COMBUSTIBLEFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESA_TARJETA_COMBUSTIBLETo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_TARJETA_COMBUSTIBLESpecification"/> class.
    	/// </summary>
    	public T_G_TARJETA_COMBUSTIBLESpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_TARJETA_COMBUSTIBLESpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_TARJETA_COMBUSTIBLESpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_TARJETA_COMBUSTIBLE, bool>> GetExpression()
    	{
    		Expression<Func<T_G_TARJETA_COMBUSTIBLE, bool>> expression = x => true;
    
    		if(Id.HasValue)
    			expression = expression.And(x => x.Id == Id.Value);
    
    		if(IdIN != null && IdIN.Count() > 0)
    			expression = expression.And(x => IdIN.Contains(x.Id));
    
    		if(Sociedad.HasValue)
    			expression = expression.And(x => x.Sociedad == Sociedad.Value);
    
    		if(SociedadIN != null && SociedadIN.Count() > 0)
    			expression = expression.And(x => SociedadIN.Contains(x.Sociedad));
    	
    		if(SociedadFrom.HasValue)
    			expression = expression.And(x => x.Sociedad >= SociedadFrom.Value);
    			
    		if(SociedadTo.HasValue)
    			expression = expression.And(x => x.Sociedad <= SociedadTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(EJERCICIO))  
    			expression = expression.And(x => x.EJERCICIO.Equals(EJERCICIO));
    			
    		if(!string.IsNullOrWhiteSpace(EJERCICIOContains))  
    			expression = expression.And(x => x.EJERCICIO.Contains(EJERCICIOContains));
    			
    		if(!string.IsNullOrWhiteSpace(EJERCICIOStartsWith))
    			expression = expression.And(x => x.EJERCICIO.StartsWith(EJERCICIOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EJERCICIOEndsWith))
    			expression = expression.And(x => x.EJERCICIO.EndsWith(EJERCICIOEndsWith));
    
    		if(EJERCICIOIN != null && EJERCICIOIN.Count() > 0)
    			expression = expression.And(x => EJERCICIOIN.Contains(x.EJERCICIO));
    	
    		if(!string.IsNullOrWhiteSpace(TRIMESTRE))  
    			expression = expression.And(x => x.TRIMESTRE.Equals(TRIMESTRE));
    			
    		if(!string.IsNullOrWhiteSpace(TRIMESTREContains))  
    			expression = expression.And(x => x.TRIMESTRE.Contains(TRIMESTREContains));
    			
    		if(!string.IsNullOrWhiteSpace(TRIMESTREStartsWith))
    			expression = expression.And(x => x.TRIMESTRE.StartsWith(TRIMESTREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TRIMESTREEndsWith))
    			expression = expression.And(x => x.TRIMESTRE.EndsWith(TRIMESTREEndsWith));
    
    		if(TRIMESTREIN != null && TRIMESTREIN.Count() > 0)
    			expression = expression.And(x => TRIMESTREIN.Contains(x.TRIMESTRE));
    	
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTO))  
    			expression = expression.And(x => x.NUM_DOCUMENTO.Equals(NUM_DOCUMENTO));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTOContains))  
    			expression = expression.And(x => x.NUM_DOCUMENTO.Contains(NUM_DOCUMENTOContains));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTOStartsWith))
    			expression = expression.And(x => x.NUM_DOCUMENTO.StartsWith(NUM_DOCUMENTOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NUM_DOCUMENTOEndsWith))
    			expression = expression.And(x => x.NUM_DOCUMENTO.EndsWith(NUM_DOCUMENTOEndsWith));
    
    		if(NUM_DOCUMENTOIN != null && NUM_DOCUMENTOIN.Count() > 0)
    			expression = expression.And(x => NUM_DOCUMENTOIN.Contains(x.NUM_DOCUMENTO));
    
    		if(FECHA_FACTURA.HasValue)
    			expression = expression.And(x => x.FECHA_FACTURA == FECHA_FACTURA.Value);
    
    		if(FECHA_FACTURAIN != null && FECHA_FACTURAIN.Count() > 0)
    			expression = expression.And(x => FECHA_FACTURAIN.Contains(x.FECHA_FACTURA));
    	
    		if(FECHA_FACTURAFrom.HasValue)
    			expression = expression.And(x => x.FECHA_FACTURA >= FECHA_FACTURAFrom.Value);
    			
    		if(FECHA_FACTURATo.HasValue)
    			expression = expression.And(x => x.FECHA_FACTURA <= FECHA_FACTURATo.Value);
    				
    
    		if(FECHA_FACTURAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_FACTURA >= FECHA_FACTURAFromOrNull.Value || x.FECHA_FACTURA == null);
    
            if(FECHA_FACTURAToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_FACTURA <= FECHA_FACTURAToOrNull.Value || x.FECHA_FACTURA == null);
    
    		if(FECHA_OPERACION.HasValue)
    			expression = expression.And(x => x.FECHA_OPERACION == FECHA_OPERACION.Value);
    
    		if(FECHA_OPERACIONIN != null && FECHA_OPERACIONIN.Count() > 0)
    			expression = expression.And(x => FECHA_OPERACIONIN.Contains(x.FECHA_OPERACION));
    	
    		if(FECHA_OPERACIONFrom.HasValue)
    			expression = expression.And(x => x.FECHA_OPERACION >= FECHA_OPERACIONFrom.Value);
    			
    		if(FECHA_OPERACIONTo.HasValue)
    			expression = expression.And(x => x.FECHA_OPERACION <= FECHA_OPERACIONTo.Value);
    				
    
    		if(FECHA_OPERACIONFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_OPERACION >= FECHA_OPERACIONFromOrNull.Value || x.FECHA_OPERACION == null);
    
            if(FECHA_OPERACIONToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_OPERACION <= FECHA_OPERACIONToOrNull.Value || x.FECHA_OPERACION == null);
    	
    		if(!string.IsNullOrWhiteSpace(COD_TARJETA))  
    			expression = expression.And(x => x.COD_TARJETA.Equals(COD_TARJETA));
    			
    		if(!string.IsNullOrWhiteSpace(COD_TARJETAContains))  
    			expression = expression.And(x => x.COD_TARJETA.Contains(COD_TARJETAContains));
    			
    		if(!string.IsNullOrWhiteSpace(COD_TARJETAStartsWith))
    			expression = expression.And(x => x.COD_TARJETA.StartsWith(COD_TARJETAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(COD_TARJETAEndsWith))
    			expression = expression.And(x => x.COD_TARJETA.EndsWith(COD_TARJETAEndsWith));
    
    		if(COD_TARJETAIN != null && COD_TARJETAIN.Count() > 0)
    			expression = expression.And(x => COD_TARJETAIN.Contains(x.COD_TARJETA));
    	
    		if(!string.IsNullOrWhiteSpace(MATRICULA))  
    			expression = expression.And(x => x.MATRICULA.Equals(MATRICULA));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAContains))  
    			expression = expression.And(x => x.MATRICULA.Contains(MATRICULAContains));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAStartsWith))
    			expression = expression.And(x => x.MATRICULA.StartsWith(MATRICULAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MATRICULAEndsWith))
    			expression = expression.And(x => x.MATRICULA.EndsWith(MATRICULAEndsWith));
    
    		if(MATRICULAIN != null && MATRICULAIN.Count() > 0)
    			expression = expression.And(x => MATRICULAIN.Contains(x.MATRICULA));
    	
    		if(!string.IsNullOrWhiteSpace(DES_PRODU))  
    			expression = expression.And(x => x.DES_PRODU.Equals(DES_PRODU));
    			
    		if(!string.IsNullOrWhiteSpace(DES_PRODUContains))  
    			expression = expression.And(x => x.DES_PRODU.Contains(DES_PRODUContains));
    			
    		if(!string.IsNullOrWhiteSpace(DES_PRODUStartsWith))
    			expression = expression.And(x => x.DES_PRODU.StartsWith(DES_PRODUStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DES_PRODUEndsWith))
    			expression = expression.And(x => x.DES_PRODU.EndsWith(DES_PRODUEndsWith));
    
    		if(DES_PRODUIN != null && DES_PRODUIN.Count() > 0)
    			expression = expression.And(x => DES_PRODUIN.Contains(x.DES_PRODU));
    	
    		if(!string.IsNullOrWhiteSpace(COD_PRODU))  
    			expression = expression.And(x => x.COD_PRODU.Equals(COD_PRODU));
    			
    		if(!string.IsNullOrWhiteSpace(COD_PRODUContains))  
    			expression = expression.And(x => x.COD_PRODU.Contains(COD_PRODUContains));
    			
    		if(!string.IsNullOrWhiteSpace(COD_PRODUStartsWith))
    			expression = expression.And(x => x.COD_PRODU.StartsWith(COD_PRODUStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(COD_PRODUEndsWith))
    			expression = expression.And(x => x.COD_PRODU.EndsWith(COD_PRODUEndsWith));
    
    		if(COD_PRODUIN != null && COD_PRODUIN.Count() > 0)
    			expression = expression.And(x => COD_PRODUIN.Contains(x.COD_PRODU));
    
    		if(KILOMETROS.HasValue)
    			expression = expression.And(x => x.KILOMETROS == KILOMETROS.Value);
    
    		if(KILOMETROSIN != null && KILOMETROSIN.Count() > 0)
    			expression = expression.And(x => KILOMETROSIN.Contains(x.KILOMETROS));
    	
    		if(KILOMETROSFrom.HasValue)
    			expression = expression.And(x => x.KILOMETROS >= KILOMETROSFrom.Value);
    			
    		if(KILOMETROSTo.HasValue)
    			expression = expression.And(x => x.KILOMETROS <= KILOMETROSTo.Value);
    				
    
    
    		if(NUM_LITROS.HasValue)
    			expression = expression.And(x => x.NUM_LITROS == NUM_LITROS.Value);
    
    		if(NUM_LITROSIN != null && NUM_LITROSIN.Count() > 0)
    			expression = expression.And(x => NUM_LITROSIN.Contains(x.NUM_LITROS));
    	
    		if(NUM_LITROSFrom.HasValue)
    			expression = expression.And(x => x.NUM_LITROS >= NUM_LITROSFrom.Value);
    			
    		if(NUM_LITROSTo.HasValue)
    			expression = expression.And(x => x.NUM_LITROS <= NUM_LITROSTo.Value);
    				
    
    
    		if(IMPORTE.HasValue)
    			expression = expression.And(x => x.IMPORTE == IMPORTE.Value);
    
    		if(IMPORTEIN != null && IMPORTEIN.Count() > 0)
    			expression = expression.And(x => IMPORTEIN.Contains(x.IMPORTE));
    	
    		if(IMPORTEFrom.HasValue)
    			expression = expression.And(x => x.IMPORTE >= IMPORTEFrom.Value);
    			
    		if(IMPORTETo.HasValue)
    			expression = expression.And(x => x.IMPORTE <= IMPORTETo.Value);
    				
    
    
    		if(BONIF_TOTAL.HasValue)
    			expression = expression.And(x => x.BONIF_TOTAL == BONIF_TOTAL.Value);
    
    		if(BONIF_TOTALIN != null && BONIF_TOTALIN.Count() > 0)
    			expression = expression.And(x => BONIF_TOTALIN.Contains(x.BONIF_TOTAL));
    	
    		if(BONIF_TOTALFrom.HasValue)
    			expression = expression.And(x => x.BONIF_TOTAL >= BONIF_TOTALFrom.Value);
    			
    		if(BONIF_TOTALTo.HasValue)
    			expression = expression.And(x => x.BONIF_TOTAL <= BONIF_TOTALTo.Value);
    				
    
    
    		if(IVA.HasValue)
    			expression = expression.And(x => x.IVA == IVA.Value);
    
    		if(IVAIN != null && IVAIN.Count() > 0)
    			expression = expression.And(x => IVAIN.Contains(x.IVA));
    	
    		if(IVAFrom.HasValue)
    			expression = expression.And(x => x.IVA >= IVAFrom.Value);
    			
    		if(IVATo.HasValue)
    			expression = expression.And(x => x.IVA <= IVATo.Value);
    				
    
    
    		if(IMP_TOTAL.HasValue)
    			expression = expression.And(x => x.IMP_TOTAL == IMP_TOTAL.Value);
    
    		if(IMP_TOTALIN != null && IMP_TOTALIN.Count() > 0)
    			expression = expression.And(x => IMP_TOTALIN.Contains(x.IMP_TOTAL));
    	
    		if(IMP_TOTALFrom.HasValue)
    			expression = expression.And(x => x.IMP_TOTAL >= IMP_TOTALFrom.Value);
    			
    		if(IMP_TOTALTo.HasValue)
    			expression = expression.And(x => x.IMP_TOTAL <= IMP_TOTALTo.Value);
    				
    
    
    		if(FechaAlta.HasValue)
    			expression = expression.And(x => x.FechaAlta == FechaAlta.Value);
    
    		if(FechaAltaIN != null && FechaAltaIN.Count() > 0)
    			expression = expression.And(x => FechaAltaIN.Contains(x.FechaAlta));
    	
    		if(FechaAltaFrom.HasValue)
    			expression = expression.And(x => x.FechaAlta >= FechaAltaFrom.Value);
    			
    		if(FechaAltaTo.HasValue)
    			expression = expression.And(x => x.FechaAlta <= FechaAltaTo.Value);
    				
    
    		if(FechaAltaFromOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta >= FechaAltaFromOrNull.Value || x.FechaAlta == null);
    
            if(FechaAltaToOrNull.HasValue)
                expression = expression.And(x => x.FechaAlta <= FechaAltaToOrNull.Value || x.FechaAlta == null);
    
    		if(KmsCiclo.HasValue)
    			expression = expression.And(x => x.KmsCiclo == KmsCiclo.Value);
    
    		if(KmsCicloIN != null && KmsCicloIN.Count() > 0)
    			expression = expression.And(x => KmsCicloIN.Contains(x.KmsCiclo));
    	
    		if(KmsCicloFrom.HasValue)
    			expression = expression.And(x => x.KmsCiclo >= KmsCicloFrom.Value);
    			
    		if(KmsCicloTo.HasValue)
    			expression = expression.And(x => x.KmsCiclo <= KmsCicloTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE_ARCHIVO_IMPORTACION))  
    			expression = expression.And(x => x.NOMBRE_ARCHIVO_IMPORTACION.Equals(NOMBRE_ARCHIVO_IMPORTACION));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBRE_ARCHIVO_IMPORTACIONContains))  
    			expression = expression.And(x => x.NOMBRE_ARCHIVO_IMPORTACION.Contains(NOMBRE_ARCHIVO_IMPORTACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBRE_ARCHIVO_IMPORTACIONStartsWith))
    			expression = expression.And(x => x.NOMBRE_ARCHIVO_IMPORTACION.StartsWith(NOMBRE_ARCHIVO_IMPORTACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBRE_ARCHIVO_IMPORTACIONEndsWith))
    			expression = expression.And(x => x.NOMBRE_ARCHIVO_IMPORTACION.EndsWith(NOMBRE_ARCHIVO_IMPORTACIONEndsWith));
    
    		if(NOMBRE_ARCHIVO_IMPORTACIONIN != null && NOMBRE_ARCHIVO_IMPORTACIONIN.Count() > 0)
    			expression = expression.And(x => NOMBRE_ARCHIVO_IMPORTACIONIN.Contains(x.NOMBRE_ARCHIVO_IMPORTACION));
    
    		if(ID_EMPRESA_TARJETA_COMBUSTIBLE.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_TARJETA_COMBUSTIBLE == ID_EMPRESA_TARJETA_COMBUSTIBLE.Value);
    
    		if(ID_EMPRESA_TARJETA_COMBUSTIBLEIN != null && ID_EMPRESA_TARJETA_COMBUSTIBLEIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESA_TARJETA_COMBUSTIBLEIN.Contains(x.ID_EMPRESA_TARJETA_COMBUSTIBLE));
    	
    		if(ID_EMPRESA_TARJETA_COMBUSTIBLEFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_TARJETA_COMBUSTIBLE >= ID_EMPRESA_TARJETA_COMBUSTIBLEFrom.Value);
    			
    		if(ID_EMPRESA_TARJETA_COMBUSTIBLETo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA_TARJETA_COMBUSTIBLE <= ID_EMPRESA_TARJETA_COMBUSTIBLETo.Value);
    				
    
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_TARJETA_COMBUSTIBLE entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_TARJETA_COMBUSTIBLE> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
