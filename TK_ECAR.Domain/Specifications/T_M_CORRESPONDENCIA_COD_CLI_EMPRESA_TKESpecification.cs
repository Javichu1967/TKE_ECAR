//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKESpecification : ISpecification<T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKE>
    {
    
        public string CODIGO_CLIENTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CODIGO_CLIENTEIN
    	{
    		get;
    		set;
    	}
    
    	public string CODIGO_CLIENTEContains
    	{
    		get;
    		set;
    	}
    	
    	public string CODIGO_CLIENTEStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CODIGO_CLIENTEEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> CODIGO_EMPRESA_TKE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> CODIGO_EMPRESA_TKEIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> CODIGO_EMPRESA_TKEFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> CODIGO_EMPRESA_TKETo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKESpecification"/> class.
    	/// </summary>
    	public T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKESpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKESpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKESpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKE, bool>> GetExpression()
    	{
    		Expression<Func<T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKE, bool>> expression = x => true;
    	
    		if(!string.IsNullOrWhiteSpace(CODIGO_CLIENTE))  
    			expression = expression.And(x => x.CODIGO_CLIENTE.Equals(CODIGO_CLIENTE));
    			
    		if(!string.IsNullOrWhiteSpace(CODIGO_CLIENTEContains))  
    			expression = expression.And(x => x.CODIGO_CLIENTE.Contains(CODIGO_CLIENTEContains));
    			
    		if(!string.IsNullOrWhiteSpace(CODIGO_CLIENTEStartsWith))
    			expression = expression.And(x => x.CODIGO_CLIENTE.StartsWith(CODIGO_CLIENTEStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CODIGO_CLIENTEEndsWith))
    			expression = expression.And(x => x.CODIGO_CLIENTE.EndsWith(CODIGO_CLIENTEEndsWith));
    
    		if(CODIGO_CLIENTEIN != null && CODIGO_CLIENTEIN.Count() > 0)
    			expression = expression.And(x => CODIGO_CLIENTEIN.Contains(x.CODIGO_CLIENTE));
    
    		if(CODIGO_EMPRESA_TKE.HasValue)
    			expression = expression.And(x => x.CODIGO_EMPRESA_TKE == CODIGO_EMPRESA_TKE.Value);
    
    		if(CODIGO_EMPRESA_TKEIN != null && CODIGO_EMPRESA_TKEIN.Count() > 0)
    			expression = expression.And(x => CODIGO_EMPRESA_TKEIN.Contains(x.CODIGO_EMPRESA_TKE));
    	
    		if(CODIGO_EMPRESA_TKEFrom.HasValue)
    			expression = expression.And(x => x.CODIGO_EMPRESA_TKE >= CODIGO_EMPRESA_TKEFrom.Value);
    			
    		if(CODIGO_EMPRESA_TKETo.HasValue)
    			expression = expression.And(x => x.CODIGO_EMPRESA_TKE <= CODIGO_EMPRESA_TKETo.Value);
    				
    
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKE entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_M_CORRESPONDENCIA_COD_CLI_EMPRESA_TKE> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
