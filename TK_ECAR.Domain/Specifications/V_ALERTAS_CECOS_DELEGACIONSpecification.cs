//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class V_ALERTAS_CECOS_DELEGACIONSpecification : ISpecification<V_ALERTAS_CECOS_DELEGACION>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_ALERTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_ALERTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string ID_CECO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ID_CECOIN
    	{
    		get;
    		set;
    	}
    
    	public string ID_CECOContains
    	{
    		get;
    		set;
    	}
    	
    	public string ID_CECOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ID_CECOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NUM_DEL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NUM_DELIN
    	{
    		get;
    		set;
    	}
    
    	public string NUM_DELContains
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_DELStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_DELEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NOMBRE_DELEGACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBRE_DELEGACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBRE_DELEGACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBRE_DELEGACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBRE_DELEGACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="V_ALERTAS_CECOS_DELEGACIONSpecification"/> class.
    	/// </summary>
    	public V_ALERTAS_CECOS_DELEGACIONSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="V_ALERTAS_CECOS_DELEGACIONSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public V_ALERTAS_CECOS_DELEGACIONSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<V_ALERTAS_CECOS_DELEGACION, bool>> GetExpression()
    	{
    		Expression<Func<V_ALERTAS_CECOS_DELEGACION, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    	
    		if(ID_ALERTAFrom.HasValue)
    			expression = expression.And(x => x.ID_ALERTA >= ID_ALERTAFrom.Value);
    			
    		if(ID_ALERTATo.HasValue)
    			expression = expression.And(x => x.ID_ALERTA <= ID_ALERTATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(ID_CECO))  
    			expression = expression.And(x => x.ID_CECO.Equals(ID_CECO));
    			
    		if(!string.IsNullOrWhiteSpace(ID_CECOContains))  
    			expression = expression.And(x => x.ID_CECO.Contains(ID_CECOContains));
    			
    		if(!string.IsNullOrWhiteSpace(ID_CECOStartsWith))
    			expression = expression.And(x => x.ID_CECO.StartsWith(ID_CECOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ID_CECOEndsWith))
    			expression = expression.And(x => x.ID_CECO.EndsWith(ID_CECOEndsWith));
    
    		if(ID_CECOIN != null && ID_CECOIN.Count() > 0)
    			expression = expression.And(x => ID_CECOIN.Contains(x.ID_CECO));
    	
    		if(!string.IsNullOrWhiteSpace(NUM_DEL))  
    			expression = expression.And(x => x.NUM_DEL.Equals(NUM_DEL));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_DELContains))  
    			expression = expression.And(x => x.NUM_DEL.Contains(NUM_DELContains));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_DELStartsWith))
    			expression = expression.And(x => x.NUM_DEL.StartsWith(NUM_DELStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NUM_DELEndsWith))
    			expression = expression.And(x => x.NUM_DEL.EndsWith(NUM_DELEndsWith));
    
    		if(NUM_DELIN != null && NUM_DELIN.Count() > 0)
    			expression = expression.And(x => NUM_DELIN.Contains(x.NUM_DEL));
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE_DELEGACION))  
    			expression = expression.And(x => x.NOMBRE_DELEGACION.Equals(NOMBRE_DELEGACION));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBRE_DELEGACIONContains))  
    			expression = expression.And(x => x.NOMBRE_DELEGACION.Contains(NOMBRE_DELEGACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBRE_DELEGACIONStartsWith))
    			expression = expression.And(x => x.NOMBRE_DELEGACION.StartsWith(NOMBRE_DELEGACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBRE_DELEGACIONEndsWith))
    			expression = expression.And(x => x.NOMBRE_DELEGACION.EndsWith(NOMBRE_DELEGACIONEndsWith));
    
    		if(NOMBRE_DELEGACIONIN != null && NOMBRE_DELEGACIONIN.Count() > 0)
    			expression = expression.And(x => NOMBRE_DELEGACIONIN.Contains(x.NOMBRE_DELEGACION));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(V_ALERTAS_CECOS_DELEGACION entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<V_ALERTAS_CECOS_DELEGACION> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
