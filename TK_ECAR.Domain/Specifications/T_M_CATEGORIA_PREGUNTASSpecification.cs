//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_M_CATEGORIA_PREGUNTASSpecification : ISpecification<T_M_CATEGORIA_PREGUNTAS>
    {
    
        public Nullable<int> ID_CATEGORIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_CATEGORIAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_CATEGORIAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_CATEGORIATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_EMPRESA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_EMPRESAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_EMPRESAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_EMPRESATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string NOMBRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBREIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBREContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ORDENACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ORDENACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ORDENACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ORDENACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<bool> BAJA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BAJAIN
    	{
    		get;
    		set;
    	}
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_M_CATEGORIA_PREGUNTASSpecification"/> class.
    	/// </summary>
    	public T_M_CATEGORIA_PREGUNTASSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_M_CATEGORIA_PREGUNTASSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_M_CATEGORIA_PREGUNTASSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_M_CATEGORIA_PREGUNTAS, bool>> GetExpression()
    	{
    		Expression<Func<T_M_CATEGORIA_PREGUNTAS, bool>> expression = x => true;
    
    		if(ID_CATEGORIA.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA == ID_CATEGORIA.Value);
    
    		if(ID_CATEGORIAIN != null && ID_CATEGORIAIN.Count() > 0)
    			expression = expression.And(x => ID_CATEGORIAIN.Contains(x.ID_CATEGORIA));
    	
    		if(ID_CATEGORIAFrom.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA >= ID_CATEGORIAFrom.Value);
    			
    		if(ID_CATEGORIATo.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA <= ID_CATEGORIATo.Value);
    				
    
    
    		if(ID_EMPRESA.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA == ID_EMPRESA.Value);
    
    		if(ID_EMPRESAIN != null && ID_EMPRESAIN.Count() > 0)
    			expression = expression.And(x => ID_EMPRESAIN.Contains(x.ID_EMPRESA));
    	
    		if(ID_EMPRESAFrom.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA >= ID_EMPRESAFrom.Value);
    			
    		if(ID_EMPRESATo.HasValue)
    			expression = expression.And(x => x.ID_EMPRESA <= ID_EMPRESATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE))  
    			expression = expression.And(x => x.NOMBRE.Equals(NOMBRE));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREContains))  
    			expression = expression.And(x => x.NOMBRE.Contains(NOMBREContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREStartsWith))
    			expression = expression.And(x => x.NOMBRE.StartsWith(NOMBREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBREEndsWith))
    			expression = expression.And(x => x.NOMBRE.EndsWith(NOMBREEndsWith));
    
    		if(NOMBREIN != null && NOMBREIN.Count() > 0)
    			expression = expression.And(x => NOMBREIN.Contains(x.NOMBRE));
    
    		if(ORDENACION.HasValue)
    			expression = expression.And(x => x.ORDENACION == ORDENACION.Value);
    
    		if(ORDENACIONIN != null && ORDENACIONIN.Count() > 0)
    			expression = expression.And(x => ORDENACIONIN.Contains(x.ORDENACION));
    	
    		if(ORDENACIONFrom.HasValue)
    			expression = expression.And(x => x.ORDENACION >= ORDENACIONFrom.Value);
    			
    		if(ORDENACIONTo.HasValue)
    			expression = expression.And(x => x.ORDENACION <= ORDENACIONTo.Value);
    				
    
    
    		if(BAJA.HasValue)
    			expression = expression.And(x => x.BAJA == BAJA.Value);
    
    		if(BAJAIN != null && BAJAIN.Count() > 0)
    			expression = expression.And(x => BAJAIN.Contains(x.BAJA));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_M_CATEGORIA_PREGUNTAS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_M_CATEGORIA_PREGUNTAS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
