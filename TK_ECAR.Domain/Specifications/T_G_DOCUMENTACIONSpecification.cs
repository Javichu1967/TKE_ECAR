//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_DOCUMENTACIONSpecification : ISpecification<T_G_DOCUMENTACION>
    {
    
        public Nullable<int> ID_DOCUMENTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_DOCUMENTOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_DOCUMENTOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_DOCUMENTOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_CATEGORIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_CATEGORIAIN
    	{
    		get;
    		set;
    	}
    
        public string NOMBRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBREIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBREContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DESCRIPCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DESCRIPCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DESCRIPCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string FICHERO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHEROIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHEROContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHEROStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHEROEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHAALTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHAALTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHAALTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHAALTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHAALTAFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHAALTAToOrNull
        {
            get;
            set;
        }
    		
    
        public string TIPO_ARCHIVO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TIPO_ARCHIVOIN
    	{
    		get;
    		set;
    	}
    
    	public string TIPO_ARCHIVOContains
    	{
    		get;
    		set;
    	}
    	
    	public string TIPO_ARCHIVOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TIPO_ARCHIVOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_M_CATEGORIASSpecification T_M_CATEGORIAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_DOCUMENTACIONSpecification"/> class.
    	/// </summary>
    	public T_G_DOCUMENTACIONSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_DOCUMENTACIONSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_DOCUMENTACIONSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_M_CATEGORIAS = new T_M_CATEGORIASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_DOCUMENTACION, bool>> GetExpression()
    	{
    		Expression<Func<T_G_DOCUMENTACION, bool>> expression = x => true;
    
    		if(ID_DOCUMENTO.HasValue)
    			expression = expression.And(x => x.ID_DOCUMENTO == ID_DOCUMENTO.Value);
    
    		if(ID_DOCUMENTOIN != null && ID_DOCUMENTOIN.Count() > 0)
    			expression = expression.And(x => ID_DOCUMENTOIN.Contains(x.ID_DOCUMENTO));
    	
    		if(ID_DOCUMENTOFrom.HasValue)
    			expression = expression.And(x => x.ID_DOCUMENTO >= ID_DOCUMENTOFrom.Value);
    			
    		if(ID_DOCUMENTOTo.HasValue)
    			expression = expression.And(x => x.ID_DOCUMENTO <= ID_DOCUMENTOTo.Value);
    				
    
    
    		if(ID_CATEGORIA.HasValue)
    			expression = expression.And(x => x.ID_CATEGORIA == ID_CATEGORIA.Value);
    
    		if(ID_CATEGORIAIN != null && ID_CATEGORIAIN.Count() > 0)
    			expression = expression.And(x => ID_CATEGORIAIN.Contains(x.ID_CATEGORIA));
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE))  
    			expression = expression.And(x => x.NOMBRE.Equals(NOMBRE));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREContains))  
    			expression = expression.And(x => x.NOMBRE.Contains(NOMBREContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREStartsWith))
    			expression = expression.And(x => x.NOMBRE.StartsWith(NOMBREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBREEndsWith))
    			expression = expression.And(x => x.NOMBRE.EndsWith(NOMBREEndsWith));
    
    		if(NOMBREIN != null && NOMBREIN.Count() > 0)
    			expression = expression.And(x => NOMBREIN.Contains(x.NOMBRE));
    	
    		if(!string.IsNullOrWhiteSpace(DESCRIPCION))  
    			expression = expression.And(x => x.DESCRIPCION.Equals(DESCRIPCION));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONContains))  
    			expression = expression.And(x => x.DESCRIPCION.Contains(DESCRIPCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONStartsWith))
    			expression = expression.And(x => x.DESCRIPCION.StartsWith(DESCRIPCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONEndsWith))
    			expression = expression.And(x => x.DESCRIPCION.EndsWith(DESCRIPCIONEndsWith));
    
    		if(DESCRIPCIONIN != null && DESCRIPCIONIN.Count() > 0)
    			expression = expression.And(x => DESCRIPCIONIN.Contains(x.DESCRIPCION));
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO))  
    			expression = expression.And(x => x.FICHERO.Equals(FICHERO));
    			
    		if(!string.IsNullOrWhiteSpace(FICHEROContains))  
    			expression = expression.And(x => x.FICHERO.Contains(FICHEROContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHEROStartsWith))
    			expression = expression.And(x => x.FICHERO.StartsWith(FICHEROStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHEROEndsWith))
    			expression = expression.And(x => x.FICHERO.EndsWith(FICHEROEndsWith));
    
    		if(FICHEROIN != null && FICHEROIN.Count() > 0)
    			expression = expression.And(x => FICHEROIN.Contains(x.FICHERO));
    
    		if(FECHAALTA.HasValue)
    			expression = expression.And(x => x.FECHAALTA == FECHAALTA.Value);
    
    		if(FECHAALTAIN != null && FECHAALTAIN.Count() > 0)
    			expression = expression.And(x => FECHAALTAIN.Contains(x.FECHAALTA));
    	
    		if(FECHAALTAFrom.HasValue)
    			expression = expression.And(x => x.FECHAALTA >= FECHAALTAFrom.Value);
    			
    		if(FECHAALTATo.HasValue)
    			expression = expression.And(x => x.FECHAALTA <= FECHAALTATo.Value);
    				
    
    		if(FECHAALTAFromOrNull.HasValue)
                expression = expression.And(x => x.FECHAALTA >= FECHAALTAFromOrNull.Value || x.FECHAALTA == null);
    
            if(FECHAALTAToOrNull.HasValue)
                expression = expression.And(x => x.FECHAALTA <= FECHAALTAToOrNull.Value || x.FECHAALTA == null);
    	
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVO))  
    			expression = expression.And(x => x.TIPO_ARCHIVO.Equals(TIPO_ARCHIVO));
    			
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVOContains))  
    			expression = expression.And(x => x.TIPO_ARCHIVO.Contains(TIPO_ARCHIVOContains));
    			
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVOStartsWith))
    			expression = expression.And(x => x.TIPO_ARCHIVO.StartsWith(TIPO_ARCHIVOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVOEndsWith))
    			expression = expression.And(x => x.TIPO_ARCHIVO.EndsWith(TIPO_ARCHIVOEndsWith));
    
    		if(TIPO_ARCHIVOIN != null && TIPO_ARCHIVOIN.Count() > 0)
    			expression = expression.And(x => TIPO_ARCHIVOIN.Contains(x.TIPO_ARCHIVO));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_M_CATEGORIAS != null)
    		{
    			var subExpression = T_M_CATEGORIAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_CATEGORIAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_DOCUMENTACION entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_DOCUMENTACION> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
