//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class TMP_RENOVACION_ITVSpecification : ISpecification<TMP_RENOVACION_ITV>
    {
    
        public Nullable<int> NUM_LINEA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> NUM_LINEAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> NUM_LINEAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> NUM_LINEATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string LOGIN
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LOGININ
    	{
    		get;
    		set;
    	}
    
    	public string LOGINContains
    	{
    		get;
    		set;
    	}
    	
    	public string LOGINStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LOGINEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ID
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IDIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> IDFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> IDTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string MATRICULA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MATRICULAIN
    	{
    		get;
    		set;
    	}
    
    	public string MATRICULAContains
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_ITVFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_ITVTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_ITVFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_ITVToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> FECHA_CADUCIDAD_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_CADUCIDAD_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_CADUCIDAD_ITVToOrNull
        {
            get;
            set;
        }
    		
    
        public string FICHERO_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHERO_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHERO_ITVContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_ITVStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_ITVEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string TIPO_ARCHIVO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> TIPO_ARCHIVOIN
    	{
    		get;
    		set;
    	}
    
    	public string TIPO_ARCHIVOContains
    	{
    		get;
    		set;
    	}
    	
    	public string TIPO_ARCHIVOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string TIPO_ARCHIVOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> LINEA_NUEVA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> LINEA_NUEVAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<double> IMPORTE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> IMPORTEIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> IMPORTEFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> IMPORTETo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> TARIFA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> TARIFAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> TARIFAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> TARIFATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> TASA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> TASAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> TASAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> TASATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> IMPUESTO_CIRCULACIÓN
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> IMPUESTO_CIRCULACIÓNIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> IMPUESTO_CIRCULACIÓNFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> IMPUESTO_CIRCULACIÓNTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> PR_CONSERVACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> PR_CONSERVACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> PR_CONSERVACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> PR_CONSERVACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string OBSERVACIONES
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> OBSERVACIONESIN
    	{
    		get;
    		set;
    	}
    
    	public string OBSERVACIONESContains
    	{
    		get;
    		set;
    	}
    	
    	public string OBSERVACIONESStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string OBSERVACIONESEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> ITV_PASADA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> ITV_PASADAIN
    	{
    		get;
    		set;
    	}
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="TMP_RENOVACION_ITVSpecification"/> class.
    	/// </summary>
    	public TMP_RENOVACION_ITVSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="TMP_RENOVACION_ITVSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public TMP_RENOVACION_ITVSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<TMP_RENOVACION_ITV, bool>> GetExpression()
    	{
    		Expression<Func<TMP_RENOVACION_ITV, bool>> expression = x => true;
    
    		if(NUM_LINEA.HasValue)
    			expression = expression.And(x => x.NUM_LINEA == NUM_LINEA.Value);
    
    		if(NUM_LINEAIN != null && NUM_LINEAIN.Count() > 0)
    			expression = expression.And(x => NUM_LINEAIN.Contains(x.NUM_LINEA));
    	
    		if(NUM_LINEAFrom.HasValue)
    			expression = expression.And(x => x.NUM_LINEA >= NUM_LINEAFrom.Value);
    			
    		if(NUM_LINEATo.HasValue)
    			expression = expression.And(x => x.NUM_LINEA <= NUM_LINEATo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(LOGIN))  
    			expression = expression.And(x => x.LOGIN.Equals(LOGIN));
    			
    		if(!string.IsNullOrWhiteSpace(LOGINContains))  
    			expression = expression.And(x => x.LOGIN.Contains(LOGINContains));
    			
    		if(!string.IsNullOrWhiteSpace(LOGINStartsWith))
    			expression = expression.And(x => x.LOGIN.StartsWith(LOGINStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LOGINEndsWith))
    			expression = expression.And(x => x.LOGIN.EndsWith(LOGINEndsWith));
    
    		if(LOGININ != null && LOGININ.Count() > 0)
    			expression = expression.And(x => LOGININ.Contains(x.LOGIN));
    
    		if(ID.HasValue)
    			expression = expression.And(x => x.ID == ID.Value);
    
    		if(IDIN != null && IDIN.Count() > 0)
    			expression = expression.And(x => IDIN.Contains(x.ID));
    	
    		if(IDFrom.HasValue)
    			expression = expression.And(x => x.ID >= IDFrom.Value);
    			
    		if(IDTo.HasValue)
    			expression = expression.And(x => x.ID <= IDTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(MATRICULA))  
    			expression = expression.And(x => x.MATRICULA.Equals(MATRICULA));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAContains))  
    			expression = expression.And(x => x.MATRICULA.Contains(MATRICULAContains));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAStartsWith))
    			expression = expression.And(x => x.MATRICULA.StartsWith(MATRICULAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MATRICULAEndsWith))
    			expression = expression.And(x => x.MATRICULA.EndsWith(MATRICULAEndsWith));
    
    		if(MATRICULAIN != null && MATRICULAIN.Count() > 0)
    			expression = expression.And(x => MATRICULAIN.Contains(x.MATRICULA));
    
    		if(FECHA_ITV.HasValue)
    			expression = expression.And(x => x.FECHA_ITV == FECHA_ITV.Value);
    
    		if(FECHA_ITVIN != null && FECHA_ITVIN.Count() > 0)
    			expression = expression.And(x => FECHA_ITVIN.Contains(x.FECHA_ITV));
    	
    		if(FECHA_ITVFrom.HasValue)
    			expression = expression.And(x => x.FECHA_ITV >= FECHA_ITVFrom.Value);
    			
    		if(FECHA_ITVTo.HasValue)
    			expression = expression.And(x => x.FECHA_ITV <= FECHA_ITVTo.Value);
    				
    
    		if(FECHA_ITVFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ITV >= FECHA_ITVFromOrNull.Value || x.FECHA_ITV == null);
    
            if(FECHA_ITVToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_ITV <= FECHA_ITVToOrNull.Value || x.FECHA_ITV == null);
    
    		if(FECHA_CADUCIDAD_ITV.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_ITV == FECHA_CADUCIDAD_ITV.Value);
    
    		if(FECHA_CADUCIDAD_ITVIN != null && FECHA_CADUCIDAD_ITVIN.Count() > 0)
    			expression = expression.And(x => FECHA_CADUCIDAD_ITVIN.Contains(x.FECHA_CADUCIDAD_ITV));
    	
    		if(FECHA_CADUCIDAD_ITVFrom.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_ITV >= FECHA_CADUCIDAD_ITVFrom.Value);
    			
    		if(FECHA_CADUCIDAD_ITVTo.HasValue)
    			expression = expression.And(x => x.FECHA_CADUCIDAD_ITV <= FECHA_CADUCIDAD_ITVTo.Value);
    				
    
    		if(FECHA_CADUCIDAD_ITVFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CADUCIDAD_ITV >= FECHA_CADUCIDAD_ITVFromOrNull.Value || x.FECHA_CADUCIDAD_ITV == null);
    
            if(FECHA_CADUCIDAD_ITVToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CADUCIDAD_ITV <= FECHA_CADUCIDAD_ITVToOrNull.Value || x.FECHA_CADUCIDAD_ITV == null);
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITV))  
    			expression = expression.And(x => x.FICHERO_ITV.Equals(FICHERO_ITV));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITVContains))  
    			expression = expression.And(x => x.FICHERO_ITV.Contains(FICHERO_ITVContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITVStartsWith))
    			expression = expression.And(x => x.FICHERO_ITV.StartsWith(FICHERO_ITVStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHERO_ITVEndsWith))
    			expression = expression.And(x => x.FICHERO_ITV.EndsWith(FICHERO_ITVEndsWith));
    
    		if(FICHERO_ITVIN != null && FICHERO_ITVIN.Count() > 0)
    			expression = expression.And(x => FICHERO_ITVIN.Contains(x.FICHERO_ITV));
    	
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVO))  
    			expression = expression.And(x => x.TIPO_ARCHIVO.Equals(TIPO_ARCHIVO));
    			
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVOContains))  
    			expression = expression.And(x => x.TIPO_ARCHIVO.Contains(TIPO_ARCHIVOContains));
    			
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVOStartsWith))
    			expression = expression.And(x => x.TIPO_ARCHIVO.StartsWith(TIPO_ARCHIVOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(TIPO_ARCHIVOEndsWith))
    			expression = expression.And(x => x.TIPO_ARCHIVO.EndsWith(TIPO_ARCHIVOEndsWith));
    
    		if(TIPO_ARCHIVOIN != null && TIPO_ARCHIVOIN.Count() > 0)
    			expression = expression.And(x => TIPO_ARCHIVOIN.Contains(x.TIPO_ARCHIVO));
    
    		if(LINEA_NUEVA.HasValue)
    			expression = expression.And(x => x.LINEA_NUEVA == LINEA_NUEVA.Value);
    
    		if(LINEA_NUEVAIN != null && LINEA_NUEVAIN.Count() > 0)
    			expression = expression.And(x => LINEA_NUEVAIN.Contains(x.LINEA_NUEVA));
    
    		if(IMPORTE.HasValue)
    			expression = expression.And(x => x.IMPORTE == IMPORTE.Value);
    
    		if(IMPORTEIN != null && IMPORTEIN.Count() > 0)
    			expression = expression.And(x => IMPORTEIN.Contains(x.IMPORTE));
    	
    		if(IMPORTEFrom.HasValue)
    			expression = expression.And(x => x.IMPORTE >= IMPORTEFrom.Value);
    			
    		if(IMPORTETo.HasValue)
    			expression = expression.And(x => x.IMPORTE <= IMPORTETo.Value);
    				
    
    
    		if(TARIFA.HasValue)
    			expression = expression.And(x => x.TARIFA == TARIFA.Value);
    
    		if(TARIFAIN != null && TARIFAIN.Count() > 0)
    			expression = expression.And(x => TARIFAIN.Contains(x.TARIFA));
    	
    		if(TARIFAFrom.HasValue)
    			expression = expression.And(x => x.TARIFA >= TARIFAFrom.Value);
    			
    		if(TARIFATo.HasValue)
    			expression = expression.And(x => x.TARIFA <= TARIFATo.Value);
    				
    
    
    		if(TASA.HasValue)
    			expression = expression.And(x => x.TASA == TASA.Value);
    
    		if(TASAIN != null && TASAIN.Count() > 0)
    			expression = expression.And(x => TASAIN.Contains(x.TASA));
    	
    		if(TASAFrom.HasValue)
    			expression = expression.And(x => x.TASA >= TASAFrom.Value);
    			
    		if(TASATo.HasValue)
    			expression = expression.And(x => x.TASA <= TASATo.Value);
    				
    
    
    		if(IMPUESTO_CIRCULACIÓN.HasValue)
    			expression = expression.And(x => x.IMPUESTO_CIRCULACIÓN == IMPUESTO_CIRCULACIÓN.Value);
    
    		if(IMPUESTO_CIRCULACIÓNIN != null && IMPUESTO_CIRCULACIÓNIN.Count() > 0)
    			expression = expression.And(x => IMPUESTO_CIRCULACIÓNIN.Contains(x.IMPUESTO_CIRCULACIÓN));
    	
    		if(IMPUESTO_CIRCULACIÓNFrom.HasValue)
    			expression = expression.And(x => x.IMPUESTO_CIRCULACIÓN >= IMPUESTO_CIRCULACIÓNFrom.Value);
    			
    		if(IMPUESTO_CIRCULACIÓNTo.HasValue)
    			expression = expression.And(x => x.IMPUESTO_CIRCULACIÓN <= IMPUESTO_CIRCULACIÓNTo.Value);
    				
    
    
    		if(PR_CONSERVACION.HasValue)
    			expression = expression.And(x => x.PR_CONSERVACION == PR_CONSERVACION.Value);
    
    		if(PR_CONSERVACIONIN != null && PR_CONSERVACIONIN.Count() > 0)
    			expression = expression.And(x => PR_CONSERVACIONIN.Contains(x.PR_CONSERVACION));
    	
    		if(PR_CONSERVACIONFrom.HasValue)
    			expression = expression.And(x => x.PR_CONSERVACION >= PR_CONSERVACIONFrom.Value);
    			
    		if(PR_CONSERVACIONTo.HasValue)
    			expression = expression.And(x => x.PR_CONSERVACION <= PR_CONSERVACIONTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONES))  
    			expression = expression.And(x => x.OBSERVACIONES.Equals(OBSERVACIONES));
    			
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONESContains))  
    			expression = expression.And(x => x.OBSERVACIONES.Contains(OBSERVACIONESContains));
    			
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONESStartsWith))
    			expression = expression.And(x => x.OBSERVACIONES.StartsWith(OBSERVACIONESStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONESEndsWith))
    			expression = expression.And(x => x.OBSERVACIONES.EndsWith(OBSERVACIONESEndsWith));
    
    		if(OBSERVACIONESIN != null && OBSERVACIONESIN.Count() > 0)
    			expression = expression.And(x => OBSERVACIONESIN.Contains(x.OBSERVACIONES));
    
    		if(ITV_PASADA.HasValue)
    			expression = expression.And(x => x.ITV_PASADA == ITV_PASADA.Value);
    
    		if(ITV_PASADAIN != null && ITV_PASADAIN.Count() > 0)
    			expression = expression.And(x => ITV_PASADAIN.Contains(x.ITV_PASADA));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(TMP_RENOVACION_ITV entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<TMP_RENOVACION_ITV> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
