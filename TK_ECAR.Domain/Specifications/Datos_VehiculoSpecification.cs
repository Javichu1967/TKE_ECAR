//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class Datos_VehiculoSpecification : ISpecification<Datos_Vehiculo>
    {
    
        public Nullable<int> Sociedad
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> SociedadIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> SociedadFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> SociedadTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Matricula
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MatriculaIN
    	{
    		get;
    		set;
    	}
    
    	public string MatriculaContains
    	{
    		get;
    		set;
    	}
    	
    	public string MatriculaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MatriculaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<byte> Nuevo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<byte>> NuevoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<byte> NuevoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<byte> NuevoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Marca
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MarcaIN
    	{
    		get;
    		set;
    	}
    
    	public string MarcaContains
    	{
    		get;
    		set;
    	}
    	
    	public string MarcaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MarcaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Modelo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ModeloIN
    	{
    		get;
    		set;
    	}
    
    	public string ModeloContains
    	{
    		get;
    		set;
    	}
    	
    	public string ModeloStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ModeloEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> Tipo_Vehiculo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Tipo_VehiculoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Tipo_VehiculoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Tipo_VehiculoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Num_Bastidor
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Num_BastidorIN
    	{
    		get;
    		set;
    	}
    
    	public string Num_BastidorContains
    	{
    		get;
    		set;
    	}
    	
    	public string Num_BastidorStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Num_BastidorEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string CC
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CCIN
    	{
    		get;
    		set;
    	}
    
    	public string CCContains
    	{
    		get;
    		set;
    	}
    	
    	public string CCStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CCEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> Departamento
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> DepartamentoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> DepartamentoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> DepartamentoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Delegacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DelegacionIN
    	{
    		get;
    		set;
    	}
    
    	public string DelegacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string DelegacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DelegacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> F_D
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> F_DIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> Directivo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> DirectivoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> DirectivoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> DirectivoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> EmpresaLeasing
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> EmpresaLeasingIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> EmpresaLeasingFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> EmpresaLeasingTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Conductor
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ConductorIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ConductorFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ConductorTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Tipo_Seguro
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Tipo_SeguroIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Tipo_SeguroFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Tipo_SeguroTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Cia_Seguro
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Cia_SeguroIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Cia_SeguroFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Cia_SeguroTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Poliza_Seguro
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Poliza_SeguroIN
    	{
    		get;
    		set;
    	}
    
    	public string Poliza_SeguroContains
    	{
    		get;
    		set;
    	}
    	
    	public string Poliza_SeguroStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Poliza_SeguroEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<double> Importe_Seguro
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> Importe_SeguroIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> Importe_SeguroFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> Importe_SeguroTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<System.DateTime> Vto_Seguro
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Vto_SeguroIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Vto_SeguroFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Vto_SeguroTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Vto_SeguroFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Vto_SeguroToOrNull
        {
            get;
            set;
        }
    		
    
        public string Veh_sustituido
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Veh_sustituidoIN
    	{
    		get;
    		set;
    	}
    
    	public string Veh_sustituidoContains
    	{
    		get;
    		set;
    	}
    	
    	public string Veh_sustituidoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Veh_sustituidoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Num_Contrato
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Num_ContratoIN
    	{
    		get;
    		set;
    	}
    
    	public string Num_ContratoContains
    	{
    		get;
    		set;
    	}
    	
    	public string Num_ContratoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Num_ContratoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Fecha_Alta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_AltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_AltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_AltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_AltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_AltaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<bool> Baja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> BajaIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> Fecha_Baja
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_BajaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_BajaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_BajaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_BajaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_BajaToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> Fecha_Recibidos
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_RecibidosIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_RecibidosFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_RecibidosTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_RecibidosFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_RecibidosToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> Fecha_Devolucion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_DevolucionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_DevolucionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_DevolucionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_DevolucionFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_DevolucionToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> Fecha_Incorporacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Fecha_IncorporacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Fecha_IncorporacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Fecha_IncorporacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Fecha_IncorporacionFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Fecha_IncorporacionToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<int> Cuotas
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> CuotasIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> CuotasFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> CuotasTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Km_Totales
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Km_TotalesIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Km_TotalesFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Km_TotalesTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Tipo_Liquidacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Tipo_LiquidacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Tipo_LiquidacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Tipo_LiquidacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Exceso_ajuste
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Exceso_ajusteIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Exceso_ajusteFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Exceso_ajusteTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Coef_exceso
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Coef_excesoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Coef_excesoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Coef_excesoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Km_Exentos
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Km_ExentosIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Km_ExentosFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Km_ExentosTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> Abono
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> AbonoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> AbonoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> AbonoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> Cargo
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> CargoIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> CargoFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> CargoTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Carburante
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CarburanteIN
    	{
    		get;
    		set;
    	}
    
    	public string CarburanteContains
    	{
    		get;
    		set;
    	}
    	
    	public string CarburanteStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CarburanteEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> Orden
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> OrdenIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<decimal> Ubicacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<decimal>> UbicacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<decimal> UbicacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<decimal> UbicacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Observaciones
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ObservacionesIN
    	{
    		get;
    		set;
    	}
    
    	public string ObservacionesContains
    	{
    		get;
    		set;
    	}
    	
    	public string ObservacionesStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ObservacionesEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Falta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FaltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FaltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FaltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FaltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FaltaToOrNull
        {
            get;
            set;
        }
    		
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="Datos_VehiculoSpecification"/> class.
    	/// </summary>
    	public Datos_VehiculoSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="Datos_VehiculoSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public Datos_VehiculoSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<Datos_Vehiculo, bool>> GetExpression()
    	{
    		Expression<Func<Datos_Vehiculo, bool>> expression = x => true;
    
    		if(Sociedad.HasValue)
    			expression = expression.And(x => x.Sociedad == Sociedad.Value);
    
    		if(SociedadIN != null && SociedadIN.Count() > 0)
    			expression = expression.And(x => SociedadIN.Contains(x.Sociedad));
    	
    		if(SociedadFrom.HasValue)
    			expression = expression.And(x => x.Sociedad >= SociedadFrom.Value);
    			
    		if(SociedadTo.HasValue)
    			expression = expression.And(x => x.Sociedad <= SociedadTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Matricula))  
    			expression = expression.And(x => x.Matricula.Equals(Matricula));
    			
    		if(!string.IsNullOrWhiteSpace(MatriculaContains))  
    			expression = expression.And(x => x.Matricula.Contains(MatriculaContains));
    			
    		if(!string.IsNullOrWhiteSpace(MatriculaStartsWith))
    			expression = expression.And(x => x.Matricula.StartsWith(MatriculaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MatriculaEndsWith))
    			expression = expression.And(x => x.Matricula.EndsWith(MatriculaEndsWith));
    
    		if(MatriculaIN != null && MatriculaIN.Count() > 0)
    			expression = expression.And(x => MatriculaIN.Contains(x.Matricula));
    
    		if(Nuevo.HasValue)
    			expression = expression.And(x => x.Nuevo == Nuevo.Value);
    
    		if(NuevoIN != null && NuevoIN.Count() > 0)
    			expression = expression.And(x => NuevoIN.Contains(x.Nuevo));
    	
    		if(NuevoFrom.HasValue)
    			expression = expression.And(x => x.Nuevo >= NuevoFrom.Value);
    			
    		if(NuevoTo.HasValue)
    			expression = expression.And(x => x.Nuevo <= NuevoTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Marca))  
    			expression = expression.And(x => x.Marca.Equals(Marca));
    			
    		if(!string.IsNullOrWhiteSpace(MarcaContains))  
    			expression = expression.And(x => x.Marca.Contains(MarcaContains));
    			
    		if(!string.IsNullOrWhiteSpace(MarcaStartsWith))
    			expression = expression.And(x => x.Marca.StartsWith(MarcaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MarcaEndsWith))
    			expression = expression.And(x => x.Marca.EndsWith(MarcaEndsWith));
    
    		if(MarcaIN != null && MarcaIN.Count() > 0)
    			expression = expression.And(x => MarcaIN.Contains(x.Marca));
    	
    		if(!string.IsNullOrWhiteSpace(Modelo))  
    			expression = expression.And(x => x.Modelo.Equals(Modelo));
    			
    		if(!string.IsNullOrWhiteSpace(ModeloContains))  
    			expression = expression.And(x => x.Modelo.Contains(ModeloContains));
    			
    		if(!string.IsNullOrWhiteSpace(ModeloStartsWith))
    			expression = expression.And(x => x.Modelo.StartsWith(ModeloStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ModeloEndsWith))
    			expression = expression.And(x => x.Modelo.EndsWith(ModeloEndsWith));
    
    		if(ModeloIN != null && ModeloIN.Count() > 0)
    			expression = expression.And(x => ModeloIN.Contains(x.Modelo));
    
    		if(Tipo_Vehiculo.HasValue)
    			expression = expression.And(x => x.Tipo_Vehiculo == Tipo_Vehiculo.Value);
    
    		if(Tipo_VehiculoIN != null && Tipo_VehiculoIN.Count() > 0)
    			expression = expression.And(x => Tipo_VehiculoIN.Contains(x.Tipo_Vehiculo));
    	
    		if(Tipo_VehiculoFrom.HasValue)
    			expression = expression.And(x => x.Tipo_Vehiculo >= Tipo_VehiculoFrom.Value);
    			
    		if(Tipo_VehiculoTo.HasValue)
    			expression = expression.And(x => x.Tipo_Vehiculo <= Tipo_VehiculoTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Num_Bastidor))  
    			expression = expression.And(x => x.Num_Bastidor.Equals(Num_Bastidor));
    			
    		if(!string.IsNullOrWhiteSpace(Num_BastidorContains))  
    			expression = expression.And(x => x.Num_Bastidor.Contains(Num_BastidorContains));
    			
    		if(!string.IsNullOrWhiteSpace(Num_BastidorStartsWith))
    			expression = expression.And(x => x.Num_Bastidor.StartsWith(Num_BastidorStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Num_BastidorEndsWith))
    			expression = expression.And(x => x.Num_Bastidor.EndsWith(Num_BastidorEndsWith));
    
    		if(Num_BastidorIN != null && Num_BastidorIN.Count() > 0)
    			expression = expression.And(x => Num_BastidorIN.Contains(x.Num_Bastidor));
    	
    		if(!string.IsNullOrWhiteSpace(CC))  
    			expression = expression.And(x => x.CC.Equals(CC));
    			
    		if(!string.IsNullOrWhiteSpace(CCContains))  
    			expression = expression.And(x => x.CC.Contains(CCContains));
    			
    		if(!string.IsNullOrWhiteSpace(CCStartsWith))
    			expression = expression.And(x => x.CC.StartsWith(CCStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CCEndsWith))
    			expression = expression.And(x => x.CC.EndsWith(CCEndsWith));
    
    		if(CCIN != null && CCIN.Count() > 0)
    			expression = expression.And(x => CCIN.Contains(x.CC));
    
    		if(Departamento.HasValue)
    			expression = expression.And(x => x.Departamento == Departamento.Value);
    
    		if(DepartamentoIN != null && DepartamentoIN.Count() > 0)
    			expression = expression.And(x => DepartamentoIN.Contains(x.Departamento));
    	
    		if(DepartamentoFrom.HasValue)
    			expression = expression.And(x => x.Departamento >= DepartamentoFrom.Value);
    			
    		if(DepartamentoTo.HasValue)
    			expression = expression.And(x => x.Departamento <= DepartamentoTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Delegacion))  
    			expression = expression.And(x => x.Delegacion.Equals(Delegacion));
    			
    		if(!string.IsNullOrWhiteSpace(DelegacionContains))  
    			expression = expression.And(x => x.Delegacion.Contains(DelegacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(DelegacionStartsWith))
    			expression = expression.And(x => x.Delegacion.StartsWith(DelegacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DelegacionEndsWith))
    			expression = expression.And(x => x.Delegacion.EndsWith(DelegacionEndsWith));
    
    		if(DelegacionIN != null && DelegacionIN.Count() > 0)
    			expression = expression.And(x => DelegacionIN.Contains(x.Delegacion));
    
    		if(F_D.HasValue)
    			expression = expression.And(x => x.F_D == F_D.Value);
    
    		if(F_DIN != null && F_DIN.Count() > 0)
    			expression = expression.And(x => F_DIN.Contains(x.F_D));
    
    		if(Directivo.HasValue)
    			expression = expression.And(x => x.Directivo == Directivo.Value);
    
    		if(DirectivoIN != null && DirectivoIN.Count() > 0)
    			expression = expression.And(x => DirectivoIN.Contains(x.Directivo));
    	
    		if(DirectivoFrom.HasValue)
    			expression = expression.And(x => x.Directivo >= DirectivoFrom.Value);
    			
    		if(DirectivoTo.HasValue)
    			expression = expression.And(x => x.Directivo <= DirectivoTo.Value);
    				
    
    
    		if(EmpresaLeasing.HasValue)
    			expression = expression.And(x => x.EmpresaLeasing == EmpresaLeasing.Value);
    
    		if(EmpresaLeasingIN != null && EmpresaLeasingIN.Count() > 0)
    			expression = expression.And(x => EmpresaLeasingIN.Contains(x.EmpresaLeasing));
    	
    		if(EmpresaLeasingFrom.HasValue)
    			expression = expression.And(x => x.EmpresaLeasing >= EmpresaLeasingFrom.Value);
    			
    		if(EmpresaLeasingTo.HasValue)
    			expression = expression.And(x => x.EmpresaLeasing <= EmpresaLeasingTo.Value);
    				
    
    
    		if(Conductor.HasValue)
    			expression = expression.And(x => x.Conductor == Conductor.Value);
    
    		if(ConductorIN != null && ConductorIN.Count() > 0)
    			expression = expression.And(x => ConductorIN.Contains(x.Conductor));
    	
    		if(ConductorFrom.HasValue)
    			expression = expression.And(x => x.Conductor >= ConductorFrom.Value);
    			
    		if(ConductorTo.HasValue)
    			expression = expression.And(x => x.Conductor <= ConductorTo.Value);
    				
    
    
    		if(Tipo_Seguro.HasValue)
    			expression = expression.And(x => x.Tipo_Seguro == Tipo_Seguro.Value);
    
    		if(Tipo_SeguroIN != null && Tipo_SeguroIN.Count() > 0)
    			expression = expression.And(x => Tipo_SeguroIN.Contains(x.Tipo_Seguro));
    	
    		if(Tipo_SeguroFrom.HasValue)
    			expression = expression.And(x => x.Tipo_Seguro >= Tipo_SeguroFrom.Value);
    			
    		if(Tipo_SeguroTo.HasValue)
    			expression = expression.And(x => x.Tipo_Seguro <= Tipo_SeguroTo.Value);
    				
    
    
    		if(Cia_Seguro.HasValue)
    			expression = expression.And(x => x.Cia_Seguro == Cia_Seguro.Value);
    
    		if(Cia_SeguroIN != null && Cia_SeguroIN.Count() > 0)
    			expression = expression.And(x => Cia_SeguroIN.Contains(x.Cia_Seguro));
    	
    		if(Cia_SeguroFrom.HasValue)
    			expression = expression.And(x => x.Cia_Seguro >= Cia_SeguroFrom.Value);
    			
    		if(Cia_SeguroTo.HasValue)
    			expression = expression.And(x => x.Cia_Seguro <= Cia_SeguroTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Poliza_Seguro))  
    			expression = expression.And(x => x.Poliza_Seguro.Equals(Poliza_Seguro));
    			
    		if(!string.IsNullOrWhiteSpace(Poliza_SeguroContains))  
    			expression = expression.And(x => x.Poliza_Seguro.Contains(Poliza_SeguroContains));
    			
    		if(!string.IsNullOrWhiteSpace(Poliza_SeguroStartsWith))
    			expression = expression.And(x => x.Poliza_Seguro.StartsWith(Poliza_SeguroStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Poliza_SeguroEndsWith))
    			expression = expression.And(x => x.Poliza_Seguro.EndsWith(Poliza_SeguroEndsWith));
    
    		if(Poliza_SeguroIN != null && Poliza_SeguroIN.Count() > 0)
    			expression = expression.And(x => Poliza_SeguroIN.Contains(x.Poliza_Seguro));
    
    		if(Importe_Seguro.HasValue)
    			expression = expression.And(x => x.Importe_Seguro == Importe_Seguro.Value);
    
    		if(Importe_SeguroIN != null && Importe_SeguroIN.Count() > 0)
    			expression = expression.And(x => Importe_SeguroIN.Contains(x.Importe_Seguro));
    	
    		if(Importe_SeguroFrom.HasValue)
    			expression = expression.And(x => x.Importe_Seguro >= Importe_SeguroFrom.Value);
    			
    		if(Importe_SeguroTo.HasValue)
    			expression = expression.And(x => x.Importe_Seguro <= Importe_SeguroTo.Value);
    				
    
    
    		if(Vto_Seguro.HasValue)
    			expression = expression.And(x => x.Vto_Seguro == Vto_Seguro.Value);
    
    		if(Vto_SeguroIN != null && Vto_SeguroIN.Count() > 0)
    			expression = expression.And(x => Vto_SeguroIN.Contains(x.Vto_Seguro));
    	
    		if(Vto_SeguroFrom.HasValue)
    			expression = expression.And(x => x.Vto_Seguro >= Vto_SeguroFrom.Value);
    			
    		if(Vto_SeguroTo.HasValue)
    			expression = expression.And(x => x.Vto_Seguro <= Vto_SeguroTo.Value);
    				
    
    		if(Vto_SeguroFromOrNull.HasValue)
                expression = expression.And(x => x.Vto_Seguro >= Vto_SeguroFromOrNull.Value || x.Vto_Seguro == null);
    
            if(Vto_SeguroToOrNull.HasValue)
                expression = expression.And(x => x.Vto_Seguro <= Vto_SeguroToOrNull.Value || x.Vto_Seguro == null);
    	
    		if(!string.IsNullOrWhiteSpace(Veh_sustituido))  
    			expression = expression.And(x => x.Veh_sustituido.Equals(Veh_sustituido));
    			
    		if(!string.IsNullOrWhiteSpace(Veh_sustituidoContains))  
    			expression = expression.And(x => x.Veh_sustituido.Contains(Veh_sustituidoContains));
    			
    		if(!string.IsNullOrWhiteSpace(Veh_sustituidoStartsWith))
    			expression = expression.And(x => x.Veh_sustituido.StartsWith(Veh_sustituidoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Veh_sustituidoEndsWith))
    			expression = expression.And(x => x.Veh_sustituido.EndsWith(Veh_sustituidoEndsWith));
    
    		if(Veh_sustituidoIN != null && Veh_sustituidoIN.Count() > 0)
    			expression = expression.And(x => Veh_sustituidoIN.Contains(x.Veh_sustituido));
    	
    		if(!string.IsNullOrWhiteSpace(Num_Contrato))  
    			expression = expression.And(x => x.Num_Contrato.Equals(Num_Contrato));
    			
    		if(!string.IsNullOrWhiteSpace(Num_ContratoContains))  
    			expression = expression.And(x => x.Num_Contrato.Contains(Num_ContratoContains));
    			
    		if(!string.IsNullOrWhiteSpace(Num_ContratoStartsWith))
    			expression = expression.And(x => x.Num_Contrato.StartsWith(Num_ContratoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Num_ContratoEndsWith))
    			expression = expression.And(x => x.Num_Contrato.EndsWith(Num_ContratoEndsWith));
    
    		if(Num_ContratoIN != null && Num_ContratoIN.Count() > 0)
    			expression = expression.And(x => Num_ContratoIN.Contains(x.Num_Contrato));
    
    		if(Fecha_Alta.HasValue)
    			expression = expression.And(x => x.Fecha_Alta == Fecha_Alta.Value);
    
    		if(Fecha_AltaIN != null && Fecha_AltaIN.Count() > 0)
    			expression = expression.And(x => Fecha_AltaIN.Contains(x.Fecha_Alta));
    	
    		if(Fecha_AltaFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Alta >= Fecha_AltaFrom.Value);
    			
    		if(Fecha_AltaTo.HasValue)
    			expression = expression.And(x => x.Fecha_Alta <= Fecha_AltaTo.Value);
    				
    
    		if(Fecha_AltaFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Alta >= Fecha_AltaFromOrNull.Value || x.Fecha_Alta == null);
    
            if(Fecha_AltaToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Alta <= Fecha_AltaToOrNull.Value || x.Fecha_Alta == null);
    
    		if(Baja.HasValue)
    			expression = expression.And(x => x.Baja == Baja.Value);
    
    		if(BajaIN != null && BajaIN.Count() > 0)
    			expression = expression.And(x => BajaIN.Contains(x.Baja));
    
    		if(Fecha_Baja.HasValue)
    			expression = expression.And(x => x.Fecha_Baja == Fecha_Baja.Value);
    
    		if(Fecha_BajaIN != null && Fecha_BajaIN.Count() > 0)
    			expression = expression.And(x => Fecha_BajaIN.Contains(x.Fecha_Baja));
    	
    		if(Fecha_BajaFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Baja >= Fecha_BajaFrom.Value);
    			
    		if(Fecha_BajaTo.HasValue)
    			expression = expression.And(x => x.Fecha_Baja <= Fecha_BajaTo.Value);
    				
    
    		if(Fecha_BajaFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Baja >= Fecha_BajaFromOrNull.Value || x.Fecha_Baja == null);
    
            if(Fecha_BajaToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Baja <= Fecha_BajaToOrNull.Value || x.Fecha_Baja == null);
    
    		if(Fecha_Recibidos.HasValue)
    			expression = expression.And(x => x.Fecha_Recibidos == Fecha_Recibidos.Value);
    
    		if(Fecha_RecibidosIN != null && Fecha_RecibidosIN.Count() > 0)
    			expression = expression.And(x => Fecha_RecibidosIN.Contains(x.Fecha_Recibidos));
    	
    		if(Fecha_RecibidosFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Recibidos >= Fecha_RecibidosFrom.Value);
    			
    		if(Fecha_RecibidosTo.HasValue)
    			expression = expression.And(x => x.Fecha_Recibidos <= Fecha_RecibidosTo.Value);
    				
    
    		if(Fecha_RecibidosFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Recibidos >= Fecha_RecibidosFromOrNull.Value || x.Fecha_Recibidos == null);
    
            if(Fecha_RecibidosToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Recibidos <= Fecha_RecibidosToOrNull.Value || x.Fecha_Recibidos == null);
    
    		if(Fecha_Devolucion.HasValue)
    			expression = expression.And(x => x.Fecha_Devolucion == Fecha_Devolucion.Value);
    
    		if(Fecha_DevolucionIN != null && Fecha_DevolucionIN.Count() > 0)
    			expression = expression.And(x => Fecha_DevolucionIN.Contains(x.Fecha_Devolucion));
    	
    		if(Fecha_DevolucionFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Devolucion >= Fecha_DevolucionFrom.Value);
    			
    		if(Fecha_DevolucionTo.HasValue)
    			expression = expression.And(x => x.Fecha_Devolucion <= Fecha_DevolucionTo.Value);
    				
    
    		if(Fecha_DevolucionFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Devolucion >= Fecha_DevolucionFromOrNull.Value || x.Fecha_Devolucion == null);
    
            if(Fecha_DevolucionToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Devolucion <= Fecha_DevolucionToOrNull.Value || x.Fecha_Devolucion == null);
    
    		if(Fecha_Incorporacion.HasValue)
    			expression = expression.And(x => x.Fecha_Incorporacion == Fecha_Incorporacion.Value);
    
    		if(Fecha_IncorporacionIN != null && Fecha_IncorporacionIN.Count() > 0)
    			expression = expression.And(x => Fecha_IncorporacionIN.Contains(x.Fecha_Incorporacion));
    	
    		if(Fecha_IncorporacionFrom.HasValue)
    			expression = expression.And(x => x.Fecha_Incorporacion >= Fecha_IncorporacionFrom.Value);
    			
    		if(Fecha_IncorporacionTo.HasValue)
    			expression = expression.And(x => x.Fecha_Incorporacion <= Fecha_IncorporacionTo.Value);
    				
    
    		if(Fecha_IncorporacionFromOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Incorporacion >= Fecha_IncorporacionFromOrNull.Value || x.Fecha_Incorporacion == null);
    
            if(Fecha_IncorporacionToOrNull.HasValue)
                expression = expression.And(x => x.Fecha_Incorporacion <= Fecha_IncorporacionToOrNull.Value || x.Fecha_Incorporacion == null);
    
    		if(Cuotas.HasValue)
    			expression = expression.And(x => x.Cuotas == Cuotas.Value);
    
    		if(CuotasIN != null && CuotasIN.Count() > 0)
    			expression = expression.And(x => CuotasIN.Contains(x.Cuotas));
    	
    		if(CuotasFrom.HasValue)
    			expression = expression.And(x => x.Cuotas >= CuotasFrom.Value);
    			
    		if(CuotasTo.HasValue)
    			expression = expression.And(x => x.Cuotas <= CuotasTo.Value);
    				
    
    
    		if(Km_Totales.HasValue)
    			expression = expression.And(x => x.Km_Totales == Km_Totales.Value);
    
    		if(Km_TotalesIN != null && Km_TotalesIN.Count() > 0)
    			expression = expression.And(x => Km_TotalesIN.Contains(x.Km_Totales));
    	
    		if(Km_TotalesFrom.HasValue)
    			expression = expression.And(x => x.Km_Totales >= Km_TotalesFrom.Value);
    			
    		if(Km_TotalesTo.HasValue)
    			expression = expression.And(x => x.Km_Totales <= Km_TotalesTo.Value);
    				
    
    
    		if(Tipo_Liquidacion.HasValue)
    			expression = expression.And(x => x.Tipo_Liquidacion == Tipo_Liquidacion.Value);
    
    		if(Tipo_LiquidacionIN != null && Tipo_LiquidacionIN.Count() > 0)
    			expression = expression.And(x => Tipo_LiquidacionIN.Contains(x.Tipo_Liquidacion));
    	
    		if(Tipo_LiquidacionFrom.HasValue)
    			expression = expression.And(x => x.Tipo_Liquidacion >= Tipo_LiquidacionFrom.Value);
    			
    		if(Tipo_LiquidacionTo.HasValue)
    			expression = expression.And(x => x.Tipo_Liquidacion <= Tipo_LiquidacionTo.Value);
    				
    
    
    		if(Exceso_ajuste.HasValue)
    			expression = expression.And(x => x.Exceso_ajuste == Exceso_ajuste.Value);
    
    		if(Exceso_ajusteIN != null && Exceso_ajusteIN.Count() > 0)
    			expression = expression.And(x => Exceso_ajusteIN.Contains(x.Exceso_ajuste));
    	
    		if(Exceso_ajusteFrom.HasValue)
    			expression = expression.And(x => x.Exceso_ajuste >= Exceso_ajusteFrom.Value);
    			
    		if(Exceso_ajusteTo.HasValue)
    			expression = expression.And(x => x.Exceso_ajuste <= Exceso_ajusteTo.Value);
    				
    
    
    		if(Coef_exceso.HasValue)
    			expression = expression.And(x => x.Coef_exceso == Coef_exceso.Value);
    
    		if(Coef_excesoIN != null && Coef_excesoIN.Count() > 0)
    			expression = expression.And(x => Coef_excesoIN.Contains(x.Coef_exceso));
    	
    		if(Coef_excesoFrom.HasValue)
    			expression = expression.And(x => x.Coef_exceso >= Coef_excesoFrom.Value);
    			
    		if(Coef_excesoTo.HasValue)
    			expression = expression.And(x => x.Coef_exceso <= Coef_excesoTo.Value);
    				
    
    
    		if(Km_Exentos.HasValue)
    			expression = expression.And(x => x.Km_Exentos == Km_Exentos.Value);
    
    		if(Km_ExentosIN != null && Km_ExentosIN.Count() > 0)
    			expression = expression.And(x => Km_ExentosIN.Contains(x.Km_Exentos));
    	
    		if(Km_ExentosFrom.HasValue)
    			expression = expression.And(x => x.Km_Exentos >= Km_ExentosFrom.Value);
    			
    		if(Km_ExentosTo.HasValue)
    			expression = expression.And(x => x.Km_Exentos <= Km_ExentosTo.Value);
    				
    
    
    		if(Abono.HasValue)
    			expression = expression.And(x => x.Abono == Abono.Value);
    
    		if(AbonoIN != null && AbonoIN.Count() > 0)
    			expression = expression.And(x => AbonoIN.Contains(x.Abono));
    	
    		if(AbonoFrom.HasValue)
    			expression = expression.And(x => x.Abono >= AbonoFrom.Value);
    			
    		if(AbonoTo.HasValue)
    			expression = expression.And(x => x.Abono <= AbonoTo.Value);
    				
    
    
    		if(Cargo.HasValue)
    			expression = expression.And(x => x.Cargo == Cargo.Value);
    
    		if(CargoIN != null && CargoIN.Count() > 0)
    			expression = expression.And(x => CargoIN.Contains(x.Cargo));
    	
    		if(CargoFrom.HasValue)
    			expression = expression.And(x => x.Cargo >= CargoFrom.Value);
    			
    		if(CargoTo.HasValue)
    			expression = expression.And(x => x.Cargo <= CargoTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Carburante))  
    			expression = expression.And(x => x.Carburante.Equals(Carburante));
    			
    		if(!string.IsNullOrWhiteSpace(CarburanteContains))  
    			expression = expression.And(x => x.Carburante.Contains(CarburanteContains));
    			
    		if(!string.IsNullOrWhiteSpace(CarburanteStartsWith))
    			expression = expression.And(x => x.Carburante.StartsWith(CarburanteStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CarburanteEndsWith))
    			expression = expression.And(x => x.Carburante.EndsWith(CarburanteEndsWith));
    
    		if(CarburanteIN != null && CarburanteIN.Count() > 0)
    			expression = expression.And(x => CarburanteIN.Contains(x.Carburante));
    
    		if(Orden.HasValue)
    			expression = expression.And(x => x.Orden == Orden.Value);
    
    		if(OrdenIN != null && OrdenIN.Count() > 0)
    			expression = expression.And(x => OrdenIN.Contains(x.Orden));
    
    		if(Ubicacion.HasValue)
    			expression = expression.And(x => x.Ubicacion == Ubicacion.Value);
    
    		if(UbicacionIN != null && UbicacionIN.Count() > 0)
    			expression = expression.And(x => UbicacionIN.Contains(x.Ubicacion));
    	
    		if(UbicacionFrom.HasValue)
    			expression = expression.And(x => x.Ubicacion >= UbicacionFrom.Value);
    			
    		if(UbicacionTo.HasValue)
    			expression = expression.And(x => x.Ubicacion <= UbicacionTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Observaciones))  
    			expression = expression.And(x => x.Observaciones.Equals(Observaciones));
    			
    		if(!string.IsNullOrWhiteSpace(ObservacionesContains))  
    			expression = expression.And(x => x.Observaciones.Contains(ObservacionesContains));
    			
    		if(!string.IsNullOrWhiteSpace(ObservacionesStartsWith))
    			expression = expression.And(x => x.Observaciones.StartsWith(ObservacionesStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ObservacionesEndsWith))
    			expression = expression.And(x => x.Observaciones.EndsWith(ObservacionesEndsWith));
    
    		if(ObservacionesIN != null && ObservacionesIN.Count() > 0)
    			expression = expression.And(x => ObservacionesIN.Contains(x.Observaciones));
    
    		if(Falta.HasValue)
    			expression = expression.And(x => x.Falta == Falta.Value);
    
    		if(FaltaIN != null && FaltaIN.Count() > 0)
    			expression = expression.And(x => FaltaIN.Contains(x.Falta));
    	
    		if(FaltaFrom.HasValue)
    			expression = expression.And(x => x.Falta >= FaltaFrom.Value);
    			
    		if(FaltaTo.HasValue)
    			expression = expression.And(x => x.Falta <= FaltaTo.Value);
    				
    
    		if(FaltaFromOrNull.HasValue)
                expression = expression.And(x => x.Falta >= FaltaFromOrNull.Value || x.Falta == null);
    
            if(FaltaToOrNull.HasValue)
                expression = expression.And(x => x.Falta <= FaltaToOrNull.Value || x.Falta == null);
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(Datos_Vehiculo entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<Datos_Vehiculo> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
