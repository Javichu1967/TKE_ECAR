//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_USUARIOSSpecification : ISpecification<T_G_USUARIOS>
    {
    
        public Nullable<int> ID_USUARIO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_USUARIOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_USUARIOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_USUARIOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string LOGIN
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> LOGININ
    	{
    		get;
    		set;
    	}
    
    	public string LOGINContains
    	{
    		get;
    		set;
    	}
    	
    	public string LOGINStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string LOGINEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NOMBRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBREIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBREContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<int> ID_PERFIL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_PERFILIN
    	{
    		get;
    		set;
    	}
    
        public string EMAIL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> EMAILIN
    	{
    		get;
    		set;
    	}
    
    	public string EMAILContains
    	{
    		get;
    		set;
    	}
    	
    	public string EMAILStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string EMAILEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> B_RECIBIR_ALERTA_EMAIL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> B_RECIBIR_ALERTA_EMAILIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> B_ACTIVO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> B_ACTIVOIN
    	{
    		get;
    		set;
    	}
    
        #region Navigation Properties
    
    	public T_G_USUARIOS_CECOSpecification T_G_USUARIOS_CECO
        {
            get;
    		set;
    	}
    
    	public T_G_USUARIOS_DELEGACIONSpecification T_G_USUARIOS_DELEGACION
        {
            get;
    		set;
    	}
    
    	public T_G_USUARIOS_DIR_TERRITORIALSpecification T_G_USUARIOS_DIR_TERRITORIAL
        {
            get;
    		set;
    	}
    
    	public T_G_USUARIOS_EMPRESASSpecification T_G_USUARIOS_EMPRESAS
        {
            get;
    		set;
    	}
    
    	public T_M_PERFILESSpecification T_M_PERFILES
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_USUARIOSSpecification"/> class.
    	/// </summary>
    	public T_G_USUARIOSSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_USUARIOSSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_USUARIOSSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_USUARIOS_CECO = new T_G_USUARIOS_CECOSpecification();
    		this.T_G_USUARIOS_DELEGACION = new T_G_USUARIOS_DELEGACIONSpecification();
    		this.T_G_USUARIOS_DIR_TERRITORIAL = new T_G_USUARIOS_DIR_TERRITORIALSpecification();
    		this.T_G_USUARIOS_EMPRESAS = new T_G_USUARIOS_EMPRESASSpecification();
    		this.T_M_PERFILES = new T_M_PERFILESSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_USUARIOS, bool>> GetExpression()
    	{
    		Expression<Func<T_G_USUARIOS, bool>> expression = x => true;
    
    		if(ID_USUARIO.HasValue)
    			expression = expression.And(x => x.ID_USUARIO == ID_USUARIO.Value);
    
    		if(ID_USUARIOIN != null && ID_USUARIOIN.Count() > 0)
    			expression = expression.And(x => ID_USUARIOIN.Contains(x.ID_USUARIO));
    	
    		if(ID_USUARIOFrom.HasValue)
    			expression = expression.And(x => x.ID_USUARIO >= ID_USUARIOFrom.Value);
    			
    		if(ID_USUARIOTo.HasValue)
    			expression = expression.And(x => x.ID_USUARIO <= ID_USUARIOTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(LOGIN))  
    			expression = expression.And(x => x.LOGIN.Equals(LOGIN));
    			
    		if(!string.IsNullOrWhiteSpace(LOGINContains))  
    			expression = expression.And(x => x.LOGIN.Contains(LOGINContains));
    			
    		if(!string.IsNullOrWhiteSpace(LOGINStartsWith))
    			expression = expression.And(x => x.LOGIN.StartsWith(LOGINStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(LOGINEndsWith))
    			expression = expression.And(x => x.LOGIN.EndsWith(LOGINEndsWith));
    
    		if(LOGININ != null && LOGININ.Count() > 0)
    			expression = expression.And(x => LOGININ.Contains(x.LOGIN));
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE))  
    			expression = expression.And(x => x.NOMBRE.Equals(NOMBRE));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREContains))  
    			expression = expression.And(x => x.NOMBRE.Contains(NOMBREContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREStartsWith))
    			expression = expression.And(x => x.NOMBRE.StartsWith(NOMBREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBREEndsWith))
    			expression = expression.And(x => x.NOMBRE.EndsWith(NOMBREEndsWith));
    
    		if(NOMBREIN != null && NOMBREIN.Count() > 0)
    			expression = expression.And(x => NOMBREIN.Contains(x.NOMBRE));
    
    		if(ID_PERFIL.HasValue)
    			expression = expression.And(x => x.ID_PERFIL == ID_PERFIL.Value);
    
    		if(ID_PERFILIN != null && ID_PERFILIN.Count() > 0)
    			expression = expression.And(x => ID_PERFILIN.Contains(x.ID_PERFIL));
    	
    		if(!string.IsNullOrWhiteSpace(EMAIL))  
    			expression = expression.And(x => x.EMAIL.Equals(EMAIL));
    			
    		if(!string.IsNullOrWhiteSpace(EMAILContains))  
    			expression = expression.And(x => x.EMAIL.Contains(EMAILContains));
    			
    		if(!string.IsNullOrWhiteSpace(EMAILStartsWith))
    			expression = expression.And(x => x.EMAIL.StartsWith(EMAILStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(EMAILEndsWith))
    			expression = expression.And(x => x.EMAIL.EndsWith(EMAILEndsWith));
    
    		if(EMAILIN != null && EMAILIN.Count() > 0)
    			expression = expression.And(x => EMAILIN.Contains(x.EMAIL));
    
    		if(B_RECIBIR_ALERTA_EMAIL.HasValue)
    			expression = expression.And(x => x.B_RECIBIR_ALERTA_EMAIL == B_RECIBIR_ALERTA_EMAIL.Value);
    
    		if(B_RECIBIR_ALERTA_EMAILIN != null && B_RECIBIR_ALERTA_EMAILIN.Count() > 0)
    			expression = expression.And(x => B_RECIBIR_ALERTA_EMAILIN.Contains(x.B_RECIBIR_ALERTA_EMAIL));
    
    		if(B_ACTIVO.HasValue)
    			expression = expression.And(x => x.B_ACTIVO == B_ACTIVO.Value);
    
    		if(B_ACTIVOIN != null && B_ACTIVOIN.Count() > 0)
    			expression = expression.And(x => B_ACTIVOIN.Contains(x.B_ACTIVO));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_USUARIOS_CECO != null)
    		{
    			var subExpression = T_G_USUARIOS_CECO.GetExpression();
    			expression = expression.And(x => x.T_G_USUARIOS_CECO.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_USUARIOS_DELEGACION != null)
    		{
    			var subExpression = T_G_USUARIOS_DELEGACION.GetExpression();
    			expression = expression.And(x => x.T_G_USUARIOS_DELEGACION.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_USUARIOS_DIR_TERRITORIAL != null)
    		{
    			var subExpression = T_G_USUARIOS_DIR_TERRITORIAL.GetExpression();
    			expression = expression.And(x => x.T_G_USUARIOS_DIR_TERRITORIAL.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_USUARIOS_EMPRESAS != null)
    		{
    			var subExpression = T_G_USUARIOS_EMPRESAS.GetExpression();
    			expression = expression.And(x => x.T_G_USUARIOS_EMPRESAS.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_PERFILES != null)
    		{
    			var subExpression = T_M_PERFILES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_PERFILES }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_USUARIOS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_USUARIOS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
