//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification : ISpecification<T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public string NOMBRE
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NOMBREIN
    	{
    		get;
    		set;
    	}
    
    	public string NOMBREContains
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NOMBREEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NUM_PERMISO_CONDUCIR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NUM_PERMISO_CONDUCIRIN
    	{
    		get;
    		set;
    	}
    
    	public string NUM_PERMISO_CONDUCIRContains
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_PERMISO_CONDUCIRStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NUM_PERMISO_CONDUCIREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string NACIONALIDAD_PERMISO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> NACIONALIDAD_PERMISOIN
    	{
    		get;
    		set;
    	}
    
    	public string NACIONALIDAD_PERMISOContains
    	{
    		get;
    		set;
    	}
    	
    	public string NACIONALIDAD_PERMISOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string NACIONALIDAD_PERMISOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> B_VALIDEZ_PERMISO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> B_VALIDEZ_PERMISOIN
    	{
    		get;
    		set;
    	}
    
        public string PAIS
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PAISIN
    	{
    		get;
    		set;
    	}
    
    	public string PAISContains
    	{
    		get;
    		set;
    	}
    	
    	public string PAISStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PAISEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string PROVINCIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PROVINCIAIN
    	{
    		get;
    		set;
    	}
    
    	public string PROVINCIAContains
    	{
    		get;
    		set;
    	}
    	
    	public string PROVINCIAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PROVINCIAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string POBLACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> POBLACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string POBLACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string POBLACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string POBLACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DOMICILIO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DOMICILIOIN
    	{
    		get;
    		set;
    	}
    
    	public string DOMICILIOContains
    	{
    		get;
    		set;
    	}
    	
    	public string DOMICILIOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DOMICILIOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string COD_POSTAL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> COD_POSTALIN
    	{
    		get;
    		set;
    	}
    
    	public string COD_POSTALContains
    	{
    		get;
    		set;
    	}
    	
    	public string COD_POSTALStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string COD_POSTALEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> B_AUTORIZACION_PERMISO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> B_AUTORIZACION_PERMISOIN
    	{
    		get;
    		set;
    	}
    
        public string FICHERO_CARNET
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHERO_CARNETIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHERO_CARNETContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_CARNETStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHERO_CARNETEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DNI
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DNIIN
    	{
    		get;
    		set;
    	}
    
    	public string DNIContains
    	{
    		get;
    		set;
    	}
    	
    	public string DNIStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DNIEndsWith
    	{
    		get;
    		set;
    	}
    
    
        #region Navigation Properties
    
    	public T_G_ALERTASSpecification T_G_ALERTAS
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification"/> class.
    	/// </summary>
    	public T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS = new T_G_ALERTASSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR, bool>> GetExpression()
    	{
    		Expression<Func<T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    	
    		if(!string.IsNullOrWhiteSpace(NOMBRE))  
    			expression = expression.And(x => x.NOMBRE.Equals(NOMBRE));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREContains))  
    			expression = expression.And(x => x.NOMBRE.Contains(NOMBREContains));
    			
    		if(!string.IsNullOrWhiteSpace(NOMBREStartsWith))
    			expression = expression.And(x => x.NOMBRE.StartsWith(NOMBREStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NOMBREEndsWith))
    			expression = expression.And(x => x.NOMBRE.EndsWith(NOMBREEndsWith));
    
    		if(NOMBREIN != null && NOMBREIN.Count() > 0)
    			expression = expression.And(x => NOMBREIN.Contains(x.NOMBRE));
    	
    		if(!string.IsNullOrWhiteSpace(NUM_PERMISO_CONDUCIR))  
    			expression = expression.And(x => x.NUM_PERMISO_CONDUCIR.Equals(NUM_PERMISO_CONDUCIR));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_PERMISO_CONDUCIRContains))  
    			expression = expression.And(x => x.NUM_PERMISO_CONDUCIR.Contains(NUM_PERMISO_CONDUCIRContains));
    			
    		if(!string.IsNullOrWhiteSpace(NUM_PERMISO_CONDUCIRStartsWith))
    			expression = expression.And(x => x.NUM_PERMISO_CONDUCIR.StartsWith(NUM_PERMISO_CONDUCIRStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NUM_PERMISO_CONDUCIREndsWith))
    			expression = expression.And(x => x.NUM_PERMISO_CONDUCIR.EndsWith(NUM_PERMISO_CONDUCIREndsWith));
    
    		if(NUM_PERMISO_CONDUCIRIN != null && NUM_PERMISO_CONDUCIRIN.Count() > 0)
    			expression = expression.And(x => NUM_PERMISO_CONDUCIRIN.Contains(x.NUM_PERMISO_CONDUCIR));
    	
    		if(!string.IsNullOrWhiteSpace(NACIONALIDAD_PERMISO))  
    			expression = expression.And(x => x.NACIONALIDAD_PERMISO.Equals(NACIONALIDAD_PERMISO));
    			
    		if(!string.IsNullOrWhiteSpace(NACIONALIDAD_PERMISOContains))  
    			expression = expression.And(x => x.NACIONALIDAD_PERMISO.Contains(NACIONALIDAD_PERMISOContains));
    			
    		if(!string.IsNullOrWhiteSpace(NACIONALIDAD_PERMISOStartsWith))
    			expression = expression.And(x => x.NACIONALIDAD_PERMISO.StartsWith(NACIONALIDAD_PERMISOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(NACIONALIDAD_PERMISOEndsWith))
    			expression = expression.And(x => x.NACIONALIDAD_PERMISO.EndsWith(NACIONALIDAD_PERMISOEndsWith));
    
    		if(NACIONALIDAD_PERMISOIN != null && NACIONALIDAD_PERMISOIN.Count() > 0)
    			expression = expression.And(x => NACIONALIDAD_PERMISOIN.Contains(x.NACIONALIDAD_PERMISO));
    
    		if(B_VALIDEZ_PERMISO.HasValue)
    			expression = expression.And(x => x.B_VALIDEZ_PERMISO == B_VALIDEZ_PERMISO.Value);
    
    		if(B_VALIDEZ_PERMISOIN != null && B_VALIDEZ_PERMISOIN.Count() > 0)
    			expression = expression.And(x => B_VALIDEZ_PERMISOIN.Contains(x.B_VALIDEZ_PERMISO));
    	
    		if(!string.IsNullOrWhiteSpace(PAIS))  
    			expression = expression.And(x => x.PAIS.Equals(PAIS));
    			
    		if(!string.IsNullOrWhiteSpace(PAISContains))  
    			expression = expression.And(x => x.PAIS.Contains(PAISContains));
    			
    		if(!string.IsNullOrWhiteSpace(PAISStartsWith))
    			expression = expression.And(x => x.PAIS.StartsWith(PAISStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PAISEndsWith))
    			expression = expression.And(x => x.PAIS.EndsWith(PAISEndsWith));
    
    		if(PAISIN != null && PAISIN.Count() > 0)
    			expression = expression.And(x => PAISIN.Contains(x.PAIS));
    	
    		if(!string.IsNullOrWhiteSpace(PROVINCIA))  
    			expression = expression.And(x => x.PROVINCIA.Equals(PROVINCIA));
    			
    		if(!string.IsNullOrWhiteSpace(PROVINCIAContains))  
    			expression = expression.And(x => x.PROVINCIA.Contains(PROVINCIAContains));
    			
    		if(!string.IsNullOrWhiteSpace(PROVINCIAStartsWith))
    			expression = expression.And(x => x.PROVINCIA.StartsWith(PROVINCIAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PROVINCIAEndsWith))
    			expression = expression.And(x => x.PROVINCIA.EndsWith(PROVINCIAEndsWith));
    
    		if(PROVINCIAIN != null && PROVINCIAIN.Count() > 0)
    			expression = expression.And(x => PROVINCIAIN.Contains(x.PROVINCIA));
    	
    		if(!string.IsNullOrWhiteSpace(POBLACION))  
    			expression = expression.And(x => x.POBLACION.Equals(POBLACION));
    			
    		if(!string.IsNullOrWhiteSpace(POBLACIONContains))  
    			expression = expression.And(x => x.POBLACION.Contains(POBLACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(POBLACIONStartsWith))
    			expression = expression.And(x => x.POBLACION.StartsWith(POBLACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(POBLACIONEndsWith))
    			expression = expression.And(x => x.POBLACION.EndsWith(POBLACIONEndsWith));
    
    		if(POBLACIONIN != null && POBLACIONIN.Count() > 0)
    			expression = expression.And(x => POBLACIONIN.Contains(x.POBLACION));
    	
    		if(!string.IsNullOrWhiteSpace(DOMICILIO))  
    			expression = expression.And(x => x.DOMICILIO.Equals(DOMICILIO));
    			
    		if(!string.IsNullOrWhiteSpace(DOMICILIOContains))  
    			expression = expression.And(x => x.DOMICILIO.Contains(DOMICILIOContains));
    			
    		if(!string.IsNullOrWhiteSpace(DOMICILIOStartsWith))
    			expression = expression.And(x => x.DOMICILIO.StartsWith(DOMICILIOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DOMICILIOEndsWith))
    			expression = expression.And(x => x.DOMICILIO.EndsWith(DOMICILIOEndsWith));
    
    		if(DOMICILIOIN != null && DOMICILIOIN.Count() > 0)
    			expression = expression.And(x => DOMICILIOIN.Contains(x.DOMICILIO));
    	
    		if(!string.IsNullOrWhiteSpace(COD_POSTAL))  
    			expression = expression.And(x => x.COD_POSTAL.Equals(COD_POSTAL));
    			
    		if(!string.IsNullOrWhiteSpace(COD_POSTALContains))  
    			expression = expression.And(x => x.COD_POSTAL.Contains(COD_POSTALContains));
    			
    		if(!string.IsNullOrWhiteSpace(COD_POSTALStartsWith))
    			expression = expression.And(x => x.COD_POSTAL.StartsWith(COD_POSTALStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(COD_POSTALEndsWith))
    			expression = expression.And(x => x.COD_POSTAL.EndsWith(COD_POSTALEndsWith));
    
    		if(COD_POSTALIN != null && COD_POSTALIN.Count() > 0)
    			expression = expression.And(x => COD_POSTALIN.Contains(x.COD_POSTAL));
    
    		if(B_AUTORIZACION_PERMISO.HasValue)
    			expression = expression.And(x => x.B_AUTORIZACION_PERMISO == B_AUTORIZACION_PERMISO.Value);
    
    		if(B_AUTORIZACION_PERMISOIN != null && B_AUTORIZACION_PERMISOIN.Count() > 0)
    			expression = expression.And(x => B_AUTORIZACION_PERMISOIN.Contains(x.B_AUTORIZACION_PERMISO));
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNET))  
    			expression = expression.And(x => x.FICHERO_CARNET.Equals(FICHERO_CARNET));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNETContains))  
    			expression = expression.And(x => x.FICHERO_CARNET.Contains(FICHERO_CARNETContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNETStartsWith))
    			expression = expression.And(x => x.FICHERO_CARNET.StartsWith(FICHERO_CARNETStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHERO_CARNETEndsWith))
    			expression = expression.And(x => x.FICHERO_CARNET.EndsWith(FICHERO_CARNETEndsWith));
    
    		if(FICHERO_CARNETIN != null && FICHERO_CARNETIN.Count() > 0)
    			expression = expression.And(x => FICHERO_CARNETIN.Contains(x.FICHERO_CARNET));
    	
    		if(!string.IsNullOrWhiteSpace(DNI))  
    			expression = expression.And(x => x.DNI.Equals(DNI));
    			
    		if(!string.IsNullOrWhiteSpace(DNIContains))  
    			expression = expression.And(x => x.DNI.Contains(DNIContains));
    			
    		if(!string.IsNullOrWhiteSpace(DNIStartsWith))
    			expression = expression.And(x => x.DNI.StartsWith(DNIStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DNIEndsWith))
    			expression = expression.And(x => x.DNI.EndsWith(DNIEndsWith));
    
    		if(DNIIN != null && DNIIN.Count() > 0)
    			expression = expression.And(x => DNIIN.Contains(x.DNI));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS != null)
    		{
    			var subExpression = T_G_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
