//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_ALERTASSpecification : ISpecification<T_G_ALERTAS>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_ALERTAFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_ALERTATo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<int> ID_TIPO_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_TIPO_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ESTADO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ESTADOIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_ACCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ACCIONIN
    	{
    		get;
    		set;
    	}
    
        public string MATRICULA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MATRICULAIN
    	{
    		get;
    		set;
    	}
    
    	public string MATRICULAContains
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string FICHERO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> FICHEROIN
    	{
    		get;
    		set;
    	}
    
    	public string FICHEROContains
    	{
    		get;
    		set;
    	}
    	
    	public string FICHEROStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string FICHEROEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string OBSERVACIONES
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> OBSERVACIONESIN
    	{
    		get;
    		set;
    	}
    
    	public string OBSERVACIONESContains
    	{
    		get;
    		set;
    	}
    	
    	public string OBSERVACIONESStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string OBSERVACIONESEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string USUARIO_CREACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> USUARIO_CREACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string USUARIO_CREACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_CREACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_CREACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_CREACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_CREACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_CREACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_CREACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_CREACIONFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_CREACIONToOrNull
        {
            get;
            set;
        }
    		
    
        public string ID_CECO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ID_CECOIN
    	{
    		get;
    		set;
    	}
    
    	public string ID_CECOContains
    	{
    		get;
    		set;
    	}
    	
    	public string ID_CECOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ID_CECOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_VENCIMIENTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_VENCIMIENTOIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_VENCIMIENTOFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_VENCIMIENTOTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_VENCIMIENTOFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_VENCIMIENTOToOrNull
        {
            get;
            set;
        }
    		
    
        public string MODELO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MODELOIN
    	{
    		get;
    		set;
    	}
    
    	public string MODELOContains
    	{
    		get;
    		set;
    	}
    	
    	public string MODELOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MODELOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string USUARIO_MODIFICACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> USUARIO_MODIFICACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string USUARIO_MODIFICACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_MODIFICACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string USUARIO_MODIFICACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FECHA_MODIFICACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_MODIFICACIONIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_MODIFICACIONFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_MODIFICACIONTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_MODIFICACIONFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_MODIFICACIONToOrNull
        {
            get;
            set;
        }
    		
    
        #region Navigation Properties
    
    	public T_G_ALERTAS_RENOVACION_CARNETSpecification T_G_ALERTAS_RENOVACION_CARNET
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_RENOVACION_ITVSpecification T_G_ALERTAS_RENOVACION_ITV
        {
            get;
    		set;
    	}
    
    	public T_M_ACCIONESSpecification T_M_ACCIONES
        {
            get;
    		set;
    	}
    
    	public T_M_ESTADOSSpecification T_M_ESTADOS
        {
            get;
    		set;
    	}
    
    	public T_M_TIPOS_ALERTASSpecification T_M_TIPOS_ALERTAS
        {
            get;
    		set;
    	}
    
    	public T_G_HIST_ALERTASSpecification T_G_HIST_ALERTAS
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_ROBOSpecification T_G_ALERTAS_ROBO
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_SOLICITUD_SOLREDSpecification T_G_ALERTAS_SOLICITUD_SOLRED
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_OTRAS_NOTIFICACIONESSpecification T_G_ALERTAS_OTRAS_NOTIFICACIONES
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_CAMBIO_CONDUCTORSpecification T_G_ALERTAS_CAMBIO_CONDUCTOR
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTORSpecification T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTOR
        {
            get;
    		set;
    	}
    
    	public T_G_ALERTAS_MULTASpecification T_G_ALERTAS_MULTA
        {
            get;
    		set;
    	}
    
    	public ECAR_Datos_VehiculoSpecification ECAR_Datos_Vehiculo
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_ALERTASSpecification"/> class.
    	/// </summary>
    	public T_G_ALERTASSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_ALERTASSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_ALERTASSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS_RENOVACION_CARNET = new T_G_ALERTAS_RENOVACION_CARNETSpecification();
    		this.T_G_ALERTAS_RENOVACION_ITV = new T_G_ALERTAS_RENOVACION_ITVSpecification();
    		this.T_M_ACCIONES = new T_M_ACCIONESSpecification();
    		this.T_M_ESTADOS = new T_M_ESTADOSSpecification();
    		this.T_M_TIPOS_ALERTAS = new T_M_TIPOS_ALERTASSpecification();
    		this.T_G_HIST_ALERTAS = new T_G_HIST_ALERTASSpecification();
    		this.T_G_ALERTAS_ROBO = new T_G_ALERTAS_ROBOSpecification();
    		this.T_G_ALERTAS_SOLICITUD_SOLRED = new T_G_ALERTAS_SOLICITUD_SOLREDSpecification();
    		this.T_G_ALERTAS_OTRAS_NOTIFICACIONES = new T_G_ALERTAS_OTRAS_NOTIFICACIONESSpecification();
    		this.T_G_ALERTAS_CAMBIO_CONDUCTOR = new T_G_ALERTAS_CAMBIO_CONDUCTORSpecification();
    		this.T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR = new T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTORSpecification();
    		this.T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTOR = new T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTORSpecification();
    		this.T_G_ALERTAS_MULTA = new T_G_ALERTAS_MULTASpecification();
    		this.ECAR_Datos_Vehiculo = new ECAR_Datos_VehiculoSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_ALERTAS, bool>> GetExpression()
    	{
    		Expression<Func<T_G_ALERTAS, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    	
    		if(ID_ALERTAFrom.HasValue)
    			expression = expression.And(x => x.ID_ALERTA >= ID_ALERTAFrom.Value);
    			
    		if(ID_ALERTATo.HasValue)
    			expression = expression.And(x => x.ID_ALERTA <= ID_ALERTATo.Value);
    				
    
    
    		if(ID_TIPO_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_TIPO_ALERTA == ID_TIPO_ALERTA.Value);
    
    		if(ID_TIPO_ALERTAIN != null && ID_TIPO_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_TIPO_ALERTAIN.Contains(x.ID_TIPO_ALERTA));
    
    		if(ID_ESTADO.HasValue)
    			expression = expression.And(x => x.ID_ESTADO == ID_ESTADO.Value);
    
    		if(ID_ESTADOIN != null && ID_ESTADOIN.Count() > 0)
    			expression = expression.And(x => ID_ESTADOIN.Contains(x.ID_ESTADO));
    
    		if(ID_ACCION.HasValue)
    			expression = expression.And(x => x.ID_ACCION == ID_ACCION.Value);
    
    		if(ID_ACCIONIN != null && ID_ACCIONIN.Count() > 0)
    			expression = expression.And(x => ID_ACCIONIN.Contains(x.ID_ACCION));
    	
    		if(!string.IsNullOrWhiteSpace(MATRICULA))  
    			expression = expression.And(x => x.MATRICULA.Equals(MATRICULA));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAContains))  
    			expression = expression.And(x => x.MATRICULA.Contains(MATRICULAContains));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAStartsWith))
    			expression = expression.And(x => x.MATRICULA.StartsWith(MATRICULAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MATRICULAEndsWith))
    			expression = expression.And(x => x.MATRICULA.EndsWith(MATRICULAEndsWith));
    
    		if(MATRICULAIN != null && MATRICULAIN.Count() > 0)
    			expression = expression.And(x => MATRICULAIN.Contains(x.MATRICULA));
    	
    		if(!string.IsNullOrWhiteSpace(FICHERO))  
    			expression = expression.And(x => x.FICHERO.Equals(FICHERO));
    			
    		if(!string.IsNullOrWhiteSpace(FICHEROContains))  
    			expression = expression.And(x => x.FICHERO.Contains(FICHEROContains));
    			
    		if(!string.IsNullOrWhiteSpace(FICHEROStartsWith))
    			expression = expression.And(x => x.FICHERO.StartsWith(FICHEROStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(FICHEROEndsWith))
    			expression = expression.And(x => x.FICHERO.EndsWith(FICHEROEndsWith));
    
    		if(FICHEROIN != null && FICHEROIN.Count() > 0)
    			expression = expression.And(x => FICHEROIN.Contains(x.FICHERO));
    	
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONES))  
    			expression = expression.And(x => x.OBSERVACIONES.Equals(OBSERVACIONES));
    			
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONESContains))  
    			expression = expression.And(x => x.OBSERVACIONES.Contains(OBSERVACIONESContains));
    			
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONESStartsWith))
    			expression = expression.And(x => x.OBSERVACIONES.StartsWith(OBSERVACIONESStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(OBSERVACIONESEndsWith))
    			expression = expression.And(x => x.OBSERVACIONES.EndsWith(OBSERVACIONESEndsWith));
    
    		if(OBSERVACIONESIN != null && OBSERVACIONESIN.Count() > 0)
    			expression = expression.And(x => OBSERVACIONESIN.Contains(x.OBSERVACIONES));
    	
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACION))  
    			expression = expression.And(x => x.USUARIO_CREACION.Equals(USUARIO_CREACION));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONContains))  
    			expression = expression.And(x => x.USUARIO_CREACION.Contains(USUARIO_CREACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONStartsWith))
    			expression = expression.And(x => x.USUARIO_CREACION.StartsWith(USUARIO_CREACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(USUARIO_CREACIONEndsWith))
    			expression = expression.And(x => x.USUARIO_CREACION.EndsWith(USUARIO_CREACIONEndsWith));
    
    		if(USUARIO_CREACIONIN != null && USUARIO_CREACIONIN.Count() > 0)
    			expression = expression.And(x => USUARIO_CREACIONIN.Contains(x.USUARIO_CREACION));
    
    		if(FECHA_CREACION.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION == FECHA_CREACION.Value);
    
    		if(FECHA_CREACIONIN != null && FECHA_CREACIONIN.Count() > 0)
    			expression = expression.And(x => FECHA_CREACIONIN.Contains(x.FECHA_CREACION));
    	
    		if(FECHA_CREACIONFrom.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION >= FECHA_CREACIONFrom.Value);
    			
    		if(FECHA_CREACIONTo.HasValue)
    			expression = expression.And(x => x.FECHA_CREACION <= FECHA_CREACIONTo.Value);
    				
    
    		if(FECHA_CREACIONFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CREACION >= FECHA_CREACIONFromOrNull.Value || x.FECHA_CREACION == null);
    
            if(FECHA_CREACIONToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_CREACION <= FECHA_CREACIONToOrNull.Value || x.FECHA_CREACION == null);
    	
    		if(!string.IsNullOrWhiteSpace(ID_CECO))  
    			expression = expression.And(x => x.ID_CECO.Equals(ID_CECO));
    			
    		if(!string.IsNullOrWhiteSpace(ID_CECOContains))  
    			expression = expression.And(x => x.ID_CECO.Contains(ID_CECOContains));
    			
    		if(!string.IsNullOrWhiteSpace(ID_CECOStartsWith))
    			expression = expression.And(x => x.ID_CECO.StartsWith(ID_CECOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ID_CECOEndsWith))
    			expression = expression.And(x => x.ID_CECO.EndsWith(ID_CECOEndsWith));
    
    		if(ID_CECOIN != null && ID_CECOIN.Count() > 0)
    			expression = expression.And(x => ID_CECOIN.Contains(x.ID_CECO));
    
    		if(FECHA_VENCIMIENTO.HasValue)
    			expression = expression.And(x => x.FECHA_VENCIMIENTO == FECHA_VENCIMIENTO.Value);
    
    		if(FECHA_VENCIMIENTOIN != null && FECHA_VENCIMIENTOIN.Count() > 0)
    			expression = expression.And(x => FECHA_VENCIMIENTOIN.Contains(x.FECHA_VENCIMIENTO));
    	
    		if(FECHA_VENCIMIENTOFrom.HasValue)
    			expression = expression.And(x => x.FECHA_VENCIMIENTO >= FECHA_VENCIMIENTOFrom.Value);
    			
    		if(FECHA_VENCIMIENTOTo.HasValue)
    			expression = expression.And(x => x.FECHA_VENCIMIENTO <= FECHA_VENCIMIENTOTo.Value);
    				
    
    		if(FECHA_VENCIMIENTOFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_VENCIMIENTO >= FECHA_VENCIMIENTOFromOrNull.Value || x.FECHA_VENCIMIENTO == null);
    
            if(FECHA_VENCIMIENTOToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_VENCIMIENTO <= FECHA_VENCIMIENTOToOrNull.Value || x.FECHA_VENCIMIENTO == null);
    	
    		if(!string.IsNullOrWhiteSpace(MODELO))  
    			expression = expression.And(x => x.MODELO.Equals(MODELO));
    			
    		if(!string.IsNullOrWhiteSpace(MODELOContains))  
    			expression = expression.And(x => x.MODELO.Contains(MODELOContains));
    			
    		if(!string.IsNullOrWhiteSpace(MODELOStartsWith))
    			expression = expression.And(x => x.MODELO.StartsWith(MODELOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MODELOEndsWith))
    			expression = expression.And(x => x.MODELO.EndsWith(MODELOEndsWith));
    
    		if(MODELOIN != null && MODELOIN.Count() > 0)
    			expression = expression.And(x => MODELOIN.Contains(x.MODELO));
    	
    		if(!string.IsNullOrWhiteSpace(USUARIO_MODIFICACION))  
    			expression = expression.And(x => x.USUARIO_MODIFICACION.Equals(USUARIO_MODIFICACION));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_MODIFICACIONContains))  
    			expression = expression.And(x => x.USUARIO_MODIFICACION.Contains(USUARIO_MODIFICACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(USUARIO_MODIFICACIONStartsWith))
    			expression = expression.And(x => x.USUARIO_MODIFICACION.StartsWith(USUARIO_MODIFICACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(USUARIO_MODIFICACIONEndsWith))
    			expression = expression.And(x => x.USUARIO_MODIFICACION.EndsWith(USUARIO_MODIFICACIONEndsWith));
    
    		if(USUARIO_MODIFICACIONIN != null && USUARIO_MODIFICACIONIN.Count() > 0)
    			expression = expression.And(x => USUARIO_MODIFICACIONIN.Contains(x.USUARIO_MODIFICACION));
    
    		if(FECHA_MODIFICACION.HasValue)
    			expression = expression.And(x => x.FECHA_MODIFICACION == FECHA_MODIFICACION.Value);
    
    		if(FECHA_MODIFICACIONIN != null && FECHA_MODIFICACIONIN.Count() > 0)
    			expression = expression.And(x => FECHA_MODIFICACIONIN.Contains(x.FECHA_MODIFICACION));
    	
    		if(FECHA_MODIFICACIONFrom.HasValue)
    			expression = expression.And(x => x.FECHA_MODIFICACION >= FECHA_MODIFICACIONFrom.Value);
    			
    		if(FECHA_MODIFICACIONTo.HasValue)
    			expression = expression.And(x => x.FECHA_MODIFICACION <= FECHA_MODIFICACIONTo.Value);
    				
    
    		if(FECHA_MODIFICACIONFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_MODIFICACION >= FECHA_MODIFICACIONFromOrNull.Value || x.FECHA_MODIFICACION == null);
    
            if(FECHA_MODIFICACIONToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_MODIFICACION <= FECHA_MODIFICACIONToOrNull.Value || x.FECHA_MODIFICACION == null);
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS_RENOVACION_CARNET != null)
    		{
    			var subExpression = T_G_ALERTAS_RENOVACION_CARNET.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_RENOVACION_CARNET }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_RENOVACION_ITV != null)
    		{
    			var subExpression = T_G_ALERTAS_RENOVACION_ITV.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_RENOVACION_ITV }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_ACCIONES != null)
    		{
    			var subExpression = T_M_ACCIONES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ACCIONES }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_ESTADOS != null)
    		{
    			var subExpression = T_M_ESTADOS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_ESTADOS }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_TIPOS_ALERTAS != null)
    		{
    			var subExpression = T_M_TIPOS_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_TIPOS_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_HIST_ALERTAS != null)
    		{
    			var subExpression = T_G_HIST_ALERTAS.GetExpression();
    			expression = expression.And(x => x.T_G_HIST_ALERTAS.AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_ROBO != null)
    		{
    			var subExpression = T_G_ALERTAS_ROBO.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_ROBO }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_SOLICITUD_SOLRED != null)
    		{
    			var subExpression = T_G_ALERTAS_SOLICITUD_SOLRED.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_SOLICITUD_SOLRED }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_OTRAS_NOTIFICACIONES != null)
    		{
    			var subExpression = T_G_ALERTAS_OTRAS_NOTIFICACIONES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_OTRAS_NOTIFICACIONES }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_CAMBIO_CONDUCTOR != null)
    		{
    			var subExpression = T_G_ALERTAS_CAMBIO_CONDUCTOR.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_CAMBIO_CONDUCTOR }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR != null)
    		{
    			var subExpression = T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_MULTA_CONFIRMACION_CONDUCTOR }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTOR != null)
    		{
    			var subExpression = T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTOR.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_RENTING_CONFIRMACION_CONDUCTOR }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_G_ALERTAS_MULTA != null)
    		{
    			var subExpression = T_G_ALERTAS_MULTA.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS_MULTA }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.ECAR_Datos_Vehiculo != null)
    		{
    			var subExpression = ECAR_Datos_Vehiculo.GetExpression();
    			expression = expression.And(x => (new[] { x.ECAR_Datos_Vehiculo }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_ALERTAS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_ALERTAS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
