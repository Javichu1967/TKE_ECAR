//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_ALERTAS_SOLICITUD_SOLREDSpecification : ISpecification<T_G_ALERTAS_SOLICITUD_SOLRED>
    {
    
        public Nullable<int> ID_ALERTA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_ALERTAIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<System.DateTime> FECHA_SOLICITUD
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FECHA_SOLICITUDIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FECHA_SOLICITUDFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FECHA_SOLICITUDTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FECHA_SOLICITUDFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FECHA_SOLICITUDToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<int> ID_TIPO_SOLICITUD_SOLRED
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_TIPO_SOLICITUD_SOLREDIN
    	{
    		get;
    		set;
    	}
    
        #region Navigation Properties
    
    	public T_G_ALERTASSpecification T_G_ALERTAS
        {
            get;
    		set;
    	}
    
    	public T_M_TIPOS_SOLICITUD_SOLREDSpecification T_M_TIPOS_SOLICITUD_SOLRED
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_SOLICITUD_SOLREDSpecification"/> class.
    	/// </summary>
    	public T_G_ALERTAS_SOLICITUD_SOLREDSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_ALERTAS_SOLICITUD_SOLREDSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_ALERTAS_SOLICITUD_SOLREDSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_ALERTAS = new T_G_ALERTASSpecification();
    		this.T_M_TIPOS_SOLICITUD_SOLRED = new T_M_TIPOS_SOLICITUD_SOLREDSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_ALERTAS_SOLICITUD_SOLRED, bool>> GetExpression()
    	{
    		Expression<Func<T_G_ALERTAS_SOLICITUD_SOLRED, bool>> expression = x => true;
    
    		if(ID_ALERTA.HasValue)
    			expression = expression.And(x => x.ID_ALERTA == ID_ALERTA.Value);
    
    		if(ID_ALERTAIN != null && ID_ALERTAIN.Count() > 0)
    			expression = expression.And(x => ID_ALERTAIN.Contains(x.ID_ALERTA));
    
    		if(FECHA_SOLICITUD.HasValue)
    			expression = expression.And(x => x.FECHA_SOLICITUD == FECHA_SOLICITUD.Value);
    
    		if(FECHA_SOLICITUDIN != null && FECHA_SOLICITUDIN.Count() > 0)
    			expression = expression.And(x => FECHA_SOLICITUDIN.Contains(x.FECHA_SOLICITUD));
    	
    		if(FECHA_SOLICITUDFrom.HasValue)
    			expression = expression.And(x => x.FECHA_SOLICITUD >= FECHA_SOLICITUDFrom.Value);
    			
    		if(FECHA_SOLICITUDTo.HasValue)
    			expression = expression.And(x => x.FECHA_SOLICITUD <= FECHA_SOLICITUDTo.Value);
    				
    
    		if(FECHA_SOLICITUDFromOrNull.HasValue)
                expression = expression.And(x => x.FECHA_SOLICITUD >= FECHA_SOLICITUDFromOrNull.Value || x.FECHA_SOLICITUD == null);
    
            if(FECHA_SOLICITUDToOrNull.HasValue)
                expression = expression.And(x => x.FECHA_SOLICITUD <= FECHA_SOLICITUDToOrNull.Value || x.FECHA_SOLICITUD == null);
    
    		if(ID_TIPO_SOLICITUD_SOLRED.HasValue)
    			expression = expression.And(x => x.ID_TIPO_SOLICITUD_SOLRED == ID_TIPO_SOLICITUD_SOLRED.Value);
    
    		if(ID_TIPO_SOLICITUD_SOLREDIN != null && ID_TIPO_SOLICITUD_SOLREDIN.Count() > 0)
    			expression = expression.And(x => ID_TIPO_SOLICITUD_SOLREDIN.Contains(x.ID_TIPO_SOLICITUD_SOLRED));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_ALERTAS != null)
    		{
    			var subExpression = T_G_ALERTAS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_ALERTAS }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_TIPOS_SOLICITUD_SOLRED != null)
    		{
    			var subExpression = T_M_TIPOS_SOLICITUD_SOLRED.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_TIPOS_SOLICITUD_SOLRED }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_ALERTAS_SOLICITUD_SOLRED entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_ALERTAS_SOLICITUD_SOLRED> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
