//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class GENERAL_IDIOMASSpecification : ISpecification<GENERAL_IDIOMAS>
    {
    
        public string ID_APLICACION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ID_APLICACIONIN
    	{
    		get;
    		set;
    	}
    
    	public string ID_APLICACIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string ID_APLICACIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ID_APLICACIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string IDIOMA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IDIOMAIN
    	{
    		get;
    		set;
    	}
    
    	public string IDIOMAContains
    	{
    		get;
    		set;
    	}
    	
    	public string IDIOMAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IDIOMAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string DESCRIPCION
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DESCRIPCIONIN
    	{
    		get;
    		set;
    	}
    
    	public string DESCRIPCIONContains
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DESCRIPCIONEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<bool> ACTIVO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> ACTIVOIN
    	{
    		get;
    		set;
    	}
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="GENERAL_IDIOMASSpecification"/> class.
    	/// </summary>
    	public GENERAL_IDIOMASSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="GENERAL_IDIOMASSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public GENERAL_IDIOMASSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<GENERAL_IDIOMAS, bool>> GetExpression()
    	{
    		Expression<Func<GENERAL_IDIOMAS, bool>> expression = x => true;
    	
    		if(!string.IsNullOrWhiteSpace(ID_APLICACION))  
    			expression = expression.And(x => x.ID_APLICACION.Equals(ID_APLICACION));
    			
    		if(!string.IsNullOrWhiteSpace(ID_APLICACIONContains))  
    			expression = expression.And(x => x.ID_APLICACION.Contains(ID_APLICACIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(ID_APLICACIONStartsWith))
    			expression = expression.And(x => x.ID_APLICACION.StartsWith(ID_APLICACIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ID_APLICACIONEndsWith))
    			expression = expression.And(x => x.ID_APLICACION.EndsWith(ID_APLICACIONEndsWith));
    
    		if(ID_APLICACIONIN != null && ID_APLICACIONIN.Count() > 0)
    			expression = expression.And(x => ID_APLICACIONIN.Contains(x.ID_APLICACION));
    	
    		if(!string.IsNullOrWhiteSpace(IDIOMA))  
    			expression = expression.And(x => x.IDIOMA.Equals(IDIOMA));
    			
    		if(!string.IsNullOrWhiteSpace(IDIOMAContains))  
    			expression = expression.And(x => x.IDIOMA.Contains(IDIOMAContains));
    			
    		if(!string.IsNullOrWhiteSpace(IDIOMAStartsWith))
    			expression = expression.And(x => x.IDIOMA.StartsWith(IDIOMAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IDIOMAEndsWith))
    			expression = expression.And(x => x.IDIOMA.EndsWith(IDIOMAEndsWith));
    
    		if(IDIOMAIN != null && IDIOMAIN.Count() > 0)
    			expression = expression.And(x => IDIOMAIN.Contains(x.IDIOMA));
    	
    		if(!string.IsNullOrWhiteSpace(DESCRIPCION))  
    			expression = expression.And(x => x.DESCRIPCION.Equals(DESCRIPCION));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONContains))  
    			expression = expression.And(x => x.DESCRIPCION.Contains(DESCRIPCIONContains));
    			
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONStartsWith))
    			expression = expression.And(x => x.DESCRIPCION.StartsWith(DESCRIPCIONStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DESCRIPCIONEndsWith))
    			expression = expression.And(x => x.DESCRIPCION.EndsWith(DESCRIPCIONEndsWith));
    
    		if(DESCRIPCIONIN != null && DESCRIPCIONIN.Count() > 0)
    			expression = expression.And(x => DESCRIPCIONIN.Contains(x.DESCRIPCION));
    
    		if(ACTIVO.HasValue)
    			expression = expression.And(x => x.ACTIVO == ACTIVO.Value);
    
    		if(ACTIVOIN != null && ACTIVOIN.Count() > 0)
    			expression = expression.And(x => ACTIVOIN.Contains(x.ACTIVO));
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(GENERAL_IDIOMAS entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<GENERAL_IDIOMAS> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
