//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class Compañias_SeguroSpecification : ISpecification<Compañias_Seguro>
    {
    
        public Nullable<int> Cod_Cia
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> Cod_CiaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> Cod_CiaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> Cod_CiaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string CIA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> CIAIN
    	{
    		get;
    		set;
    	}
    
    	public string CIAContains
    	{
    		get;
    		set;
    	}
    	
    	public string CIAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string CIAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Direccion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> DireccionIN
    	{
    		get;
    		set;
    	}
    
    	public string DireccionContains
    	{
    		get;
    		set;
    	}
    	
    	public string DireccionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string DireccionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Cod_Postal
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Cod_PostalIN
    	{
    		get;
    		set;
    	}
    
    	public string Cod_PostalContains
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_PostalStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Cod_PostalEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Poblacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> PoblacionIN
    	{
    		get;
    		set;
    	}
    
    	public string PoblacionContains
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string PoblacionEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Persona_Contacto
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Persona_ContactoIN
    	{
    		get;
    		set;
    	}
    
    	public string Persona_ContactoContains
    	{
    		get;
    		set;
    	}
    	
    	public string Persona_ContactoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Persona_ContactoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string Tlf_Contacto
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> Tlf_ContactoIN
    	{
    		get;
    		set;
    	}
    
    	public string Tlf_ContactoContains
    	{
    		get;
    		set;
    	}
    	
    	public string Tlf_ContactoStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string Tlf_ContactoEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> FAlta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FAltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FAltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FAltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FAltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FAltaToOrNull
        {
            get;
            set;
        }
    		
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="Compañias_SeguroSpecification"/> class.
    	/// </summary>
    	public Compañias_SeguroSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="Compañias_SeguroSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public Compañias_SeguroSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<Compañias_Seguro, bool>> GetExpression()
    	{
    		Expression<Func<Compañias_Seguro, bool>> expression = x => true;
    
    		if(Cod_Cia.HasValue)
    			expression = expression.And(x => x.Cod_Cia == Cod_Cia.Value);
    
    		if(Cod_CiaIN != null && Cod_CiaIN.Count() > 0)
    			expression = expression.And(x => Cod_CiaIN.Contains(x.Cod_Cia));
    	
    		if(Cod_CiaFrom.HasValue)
    			expression = expression.And(x => x.Cod_Cia >= Cod_CiaFrom.Value);
    			
    		if(Cod_CiaTo.HasValue)
    			expression = expression.And(x => x.Cod_Cia <= Cod_CiaTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(CIA))  
    			expression = expression.And(x => x.CIA.Equals(CIA));
    			
    		if(!string.IsNullOrWhiteSpace(CIAContains))  
    			expression = expression.And(x => x.CIA.Contains(CIAContains));
    			
    		if(!string.IsNullOrWhiteSpace(CIAStartsWith))
    			expression = expression.And(x => x.CIA.StartsWith(CIAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(CIAEndsWith))
    			expression = expression.And(x => x.CIA.EndsWith(CIAEndsWith));
    
    		if(CIAIN != null && CIAIN.Count() > 0)
    			expression = expression.And(x => CIAIN.Contains(x.CIA));
    	
    		if(!string.IsNullOrWhiteSpace(Direccion))  
    			expression = expression.And(x => x.Direccion.Equals(Direccion));
    			
    		if(!string.IsNullOrWhiteSpace(DireccionContains))  
    			expression = expression.And(x => x.Direccion.Contains(DireccionContains));
    			
    		if(!string.IsNullOrWhiteSpace(DireccionStartsWith))
    			expression = expression.And(x => x.Direccion.StartsWith(DireccionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(DireccionEndsWith))
    			expression = expression.And(x => x.Direccion.EndsWith(DireccionEndsWith));
    
    		if(DireccionIN != null && DireccionIN.Count() > 0)
    			expression = expression.And(x => DireccionIN.Contains(x.Direccion));
    	
    		if(!string.IsNullOrWhiteSpace(Cod_Postal))  
    			expression = expression.And(x => x.Cod_Postal.Equals(Cod_Postal));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_PostalContains))  
    			expression = expression.And(x => x.Cod_Postal.Contains(Cod_PostalContains));
    			
    		if(!string.IsNullOrWhiteSpace(Cod_PostalStartsWith))
    			expression = expression.And(x => x.Cod_Postal.StartsWith(Cod_PostalStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Cod_PostalEndsWith))
    			expression = expression.And(x => x.Cod_Postal.EndsWith(Cod_PostalEndsWith));
    
    		if(Cod_PostalIN != null && Cod_PostalIN.Count() > 0)
    			expression = expression.And(x => Cod_PostalIN.Contains(x.Cod_Postal));
    	
    		if(!string.IsNullOrWhiteSpace(Poblacion))  
    			expression = expression.And(x => x.Poblacion.Equals(Poblacion));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionContains))  
    			expression = expression.And(x => x.Poblacion.Contains(PoblacionContains));
    			
    		if(!string.IsNullOrWhiteSpace(PoblacionStartsWith))
    			expression = expression.And(x => x.Poblacion.StartsWith(PoblacionStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(PoblacionEndsWith))
    			expression = expression.And(x => x.Poblacion.EndsWith(PoblacionEndsWith));
    
    		if(PoblacionIN != null && PoblacionIN.Count() > 0)
    			expression = expression.And(x => PoblacionIN.Contains(x.Poblacion));
    	
    		if(!string.IsNullOrWhiteSpace(Persona_Contacto))  
    			expression = expression.And(x => x.Persona_Contacto.Equals(Persona_Contacto));
    			
    		if(!string.IsNullOrWhiteSpace(Persona_ContactoContains))  
    			expression = expression.And(x => x.Persona_Contacto.Contains(Persona_ContactoContains));
    			
    		if(!string.IsNullOrWhiteSpace(Persona_ContactoStartsWith))
    			expression = expression.And(x => x.Persona_Contacto.StartsWith(Persona_ContactoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Persona_ContactoEndsWith))
    			expression = expression.And(x => x.Persona_Contacto.EndsWith(Persona_ContactoEndsWith));
    
    		if(Persona_ContactoIN != null && Persona_ContactoIN.Count() > 0)
    			expression = expression.And(x => Persona_ContactoIN.Contains(x.Persona_Contacto));
    	
    		if(!string.IsNullOrWhiteSpace(Tlf_Contacto))  
    			expression = expression.And(x => x.Tlf_Contacto.Equals(Tlf_Contacto));
    			
    		if(!string.IsNullOrWhiteSpace(Tlf_ContactoContains))  
    			expression = expression.And(x => x.Tlf_Contacto.Contains(Tlf_ContactoContains));
    			
    		if(!string.IsNullOrWhiteSpace(Tlf_ContactoStartsWith))
    			expression = expression.And(x => x.Tlf_Contacto.StartsWith(Tlf_ContactoStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(Tlf_ContactoEndsWith))
    			expression = expression.And(x => x.Tlf_Contacto.EndsWith(Tlf_ContactoEndsWith));
    
    		if(Tlf_ContactoIN != null && Tlf_ContactoIN.Count() > 0)
    			expression = expression.And(x => Tlf_ContactoIN.Contains(x.Tlf_Contacto));
    
    		if(FAlta.HasValue)
    			expression = expression.And(x => x.FAlta == FAlta.Value);
    
    		if(FAltaIN != null && FAltaIN.Count() > 0)
    			expression = expression.And(x => FAltaIN.Contains(x.FAlta));
    	
    		if(FAltaFrom.HasValue)
    			expression = expression.And(x => x.FAlta >= FAltaFrom.Value);
    			
    		if(FAltaTo.HasValue)
    			expression = expression.And(x => x.FAlta <= FAltaTo.Value);
    				
    
    		if(FAltaFromOrNull.HasValue)
                expression = expression.And(x => x.FAlta >= FAltaFromOrNull.Value || x.FAlta == null);
    
            if(FAltaToOrNull.HasValue)
                expression = expression.And(x => x.FAlta <= FAltaToOrNull.Value || x.FAlta == null);
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(Compañias_Seguro entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<Compañias_Seguro> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
