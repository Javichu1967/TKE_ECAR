//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_G_VIA_VERDE_IDENTIFICADORESSpecification : ISpecification<T_G_VIA_VERDE_IDENTIFICADORES>
    {
    
        public Nullable<int> ID_IDENTIFICADOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_IDENTIFICADORIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<int> ID_IDENTIFICADORFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<int> ID_IDENTIFICADORTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string IDENTIFICADOR
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> IDENTIFICADORIN
    	{
    		get;
    		set;
    	}
    
    	public string IDENTIFICADORContains
    	{
    		get;
    		set;
    	}
    	
    	public string IDENTIFICADORStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string IDENTIFICADOREndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string ID_EXTRACTO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> ID_EXTRACTOIN
    	{
    		get;
    		set;
    	}
    
    	public string ID_EXTRACTOContains
    	{
    		get;
    		set;
    	}
    	
    	public string ID_EXTRACTOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string ID_EXTRACTOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string MATRICULA
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MATRICULAIN
    	{
    		get;
    		set;
    	}
    
    	public string MATRICULAContains
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MATRICULAEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public string REF_PAGO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> REF_PAGOIN
    	{
    		get;
    		set;
    	}
    
    	public string REF_PAGOContains
    	{
    		get;
    		set;
    	}
    	
    	public string REF_PAGOStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string REF_PAGOEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<decimal> TOTAL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<decimal>> TOTALIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<decimal> TOTALFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<decimal> TOTALTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        #region Navigation Properties
    
    	public T_G_VIA_VERDE_TRANSACCIONESSpecification T_G_VIA_VERDE_TRANSACCIONES
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_G_VIA_VERDE_IDENTIFICADORESSpecification"/> class.
    	/// </summary>
    	public T_G_VIA_VERDE_IDENTIFICADORESSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_G_VIA_VERDE_IDENTIFICADORESSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_G_VIA_VERDE_IDENTIFICADORESSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_VIA_VERDE_TRANSACCIONES = new T_G_VIA_VERDE_TRANSACCIONESSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_G_VIA_VERDE_IDENTIFICADORES, bool>> GetExpression()
    	{
    		Expression<Func<T_G_VIA_VERDE_IDENTIFICADORES, bool>> expression = x => true;
    
    		if(ID_IDENTIFICADOR.HasValue)
    			expression = expression.And(x => x.ID_IDENTIFICADOR == ID_IDENTIFICADOR.Value);
    
    		if(ID_IDENTIFICADORIN != null && ID_IDENTIFICADORIN.Count() > 0)
    			expression = expression.And(x => ID_IDENTIFICADORIN.Contains(x.ID_IDENTIFICADOR));
    	
    		if(ID_IDENTIFICADORFrom.HasValue)
    			expression = expression.And(x => x.ID_IDENTIFICADOR >= ID_IDENTIFICADORFrom.Value);
    			
    		if(ID_IDENTIFICADORTo.HasValue)
    			expression = expression.And(x => x.ID_IDENTIFICADOR <= ID_IDENTIFICADORTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(IDENTIFICADOR))  
    			expression = expression.And(x => x.IDENTIFICADOR.Equals(IDENTIFICADOR));
    			
    		if(!string.IsNullOrWhiteSpace(IDENTIFICADORContains))  
    			expression = expression.And(x => x.IDENTIFICADOR.Contains(IDENTIFICADORContains));
    			
    		if(!string.IsNullOrWhiteSpace(IDENTIFICADORStartsWith))
    			expression = expression.And(x => x.IDENTIFICADOR.StartsWith(IDENTIFICADORStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(IDENTIFICADOREndsWith))
    			expression = expression.And(x => x.IDENTIFICADOR.EndsWith(IDENTIFICADOREndsWith));
    
    		if(IDENTIFICADORIN != null && IDENTIFICADORIN.Count() > 0)
    			expression = expression.And(x => IDENTIFICADORIN.Contains(x.IDENTIFICADOR));
    	
    		if(!string.IsNullOrWhiteSpace(ID_EXTRACTO))  
    			expression = expression.And(x => x.ID_EXTRACTO.Equals(ID_EXTRACTO));
    			
    		if(!string.IsNullOrWhiteSpace(ID_EXTRACTOContains))  
    			expression = expression.And(x => x.ID_EXTRACTO.Contains(ID_EXTRACTOContains));
    			
    		if(!string.IsNullOrWhiteSpace(ID_EXTRACTOStartsWith))
    			expression = expression.And(x => x.ID_EXTRACTO.StartsWith(ID_EXTRACTOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(ID_EXTRACTOEndsWith))
    			expression = expression.And(x => x.ID_EXTRACTO.EndsWith(ID_EXTRACTOEndsWith));
    
    		if(ID_EXTRACTOIN != null && ID_EXTRACTOIN.Count() > 0)
    			expression = expression.And(x => ID_EXTRACTOIN.Contains(x.ID_EXTRACTO));
    	
    		if(!string.IsNullOrWhiteSpace(MATRICULA))  
    			expression = expression.And(x => x.MATRICULA.Equals(MATRICULA));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAContains))  
    			expression = expression.And(x => x.MATRICULA.Contains(MATRICULAContains));
    			
    		if(!string.IsNullOrWhiteSpace(MATRICULAStartsWith))
    			expression = expression.And(x => x.MATRICULA.StartsWith(MATRICULAStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MATRICULAEndsWith))
    			expression = expression.And(x => x.MATRICULA.EndsWith(MATRICULAEndsWith));
    
    		if(MATRICULAIN != null && MATRICULAIN.Count() > 0)
    			expression = expression.And(x => MATRICULAIN.Contains(x.MATRICULA));
    	
    		if(!string.IsNullOrWhiteSpace(REF_PAGO))  
    			expression = expression.And(x => x.REF_PAGO.Equals(REF_PAGO));
    			
    		if(!string.IsNullOrWhiteSpace(REF_PAGOContains))  
    			expression = expression.And(x => x.REF_PAGO.Contains(REF_PAGOContains));
    			
    		if(!string.IsNullOrWhiteSpace(REF_PAGOStartsWith))
    			expression = expression.And(x => x.REF_PAGO.StartsWith(REF_PAGOStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(REF_PAGOEndsWith))
    			expression = expression.And(x => x.REF_PAGO.EndsWith(REF_PAGOEndsWith));
    
    		if(REF_PAGOIN != null && REF_PAGOIN.Count() > 0)
    			expression = expression.And(x => REF_PAGOIN.Contains(x.REF_PAGO));
    
    		if(TOTAL.HasValue)
    			expression = expression.And(x => x.TOTAL == TOTAL.Value);
    
    		if(TOTALIN != null && TOTALIN.Count() > 0)
    			expression = expression.And(x => TOTALIN.Contains(x.TOTAL));
    	
    		if(TOTALFrom.HasValue)
    			expression = expression.And(x => x.TOTAL >= TOTALFrom.Value);
    			
    		if(TOTALTo.HasValue)
    			expression = expression.And(x => x.TOTAL <= TOTALTo.Value);
    				
    
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_VIA_VERDE_TRANSACCIONES != null)
    		{
    			var subExpression = T_G_VIA_VERDE_TRANSACCIONES.GetExpression();
    			expression = expression.And(x => x.T_G_VIA_VERDE_TRANSACCIONES.AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_G_VIA_VERDE_IDENTIFICADORES entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_G_VIA_VERDE_IDENTIFICADORES> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
