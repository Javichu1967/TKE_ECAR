//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class T_R_PERFILES_MENUSpecification : ISpecification<T_R_PERFILES_MENU>
    {
    
        public Nullable<int> ID_PERFIL
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_PERFILIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<int> ID_MENU
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> ID_MENUIN
    	{
    		get;
    		set;
    	}
    
        public Nullable<bool> B_ACTIVO
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<bool>> B_ACTIVOIN
    	{
    		get;
    		set;
    	}
    
        #region Navigation Properties
    
    	public T_G_MENUSSpecification T_G_MENUS
        {
            get;
    		set;
    	}
    
    	public T_M_PERFILESSpecification T_M_PERFILES
        {
            get;
    		set;
    	}

        #endregion

    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="T_R_PERFILES_MENUSpecification"/> class.
    	/// </summary>
    	public T_R_PERFILES_MENUSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="T_R_PERFILES_MENUSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public T_R_PERFILES_MENUSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    		this.T_G_MENUS = new T_G_MENUSSpecification();
    		this.T_M_PERFILES = new T_M_PERFILESSpecification();
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<T_R_PERFILES_MENU, bool>> GetExpression()
    	{
    		Expression<Func<T_R_PERFILES_MENU, bool>> expression = x => true;
    
    		if(ID_PERFIL.HasValue)
    			expression = expression.And(x => x.ID_PERFIL == ID_PERFIL.Value);
    
    		if(ID_PERFILIN != null && ID_PERFILIN.Count() > 0)
    			expression = expression.And(x => ID_PERFILIN.Contains(x.ID_PERFIL));
    
    		if(ID_MENU.HasValue)
    			expression = expression.And(x => x.ID_MENU == ID_MENU.Value);
    
    		if(ID_MENUIN != null && ID_MENUIN.Count() > 0)
    			expression = expression.And(x => ID_MENUIN.Contains(x.ID_MENU));
    
    		if(B_ACTIVO.HasValue)
    			expression = expression.And(x => x.B_ACTIVO == B_ACTIVO.Value);
    
    		if(B_ACTIVOIN != null && B_ACTIVOIN.Count() > 0)
    			expression = expression.And(x => B_ACTIVOIN.Contains(x.B_ACTIVO));
    		
    		//
    		// Navigation properties
    		//
    
    		if(this.T_G_MENUS != null)
    		{
    			var subExpression = T_G_MENUS.GetExpression();
    			expression = expression.And(x => (new[] { x.T_G_MENUS }).AsQueryable().Any(subExpression));
    		}
    
    		if(this.T_M_PERFILES != null)
    		{
    			var subExpression = T_M_PERFILES.GetExpression();
    			expression = expression.And(x => (new[] { x.T_M_PERFILES }).AsQueryable().Any(subExpression));
    		}
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(T_R_PERFILES_MENU entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<T_R_PERFILES_MENU> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
