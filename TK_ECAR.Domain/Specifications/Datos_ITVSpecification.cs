//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;


using System.Collections.Generic;
using TK_ECAR.Domain.DomainModel;

namespace TK_ECAR.Domain.Specifications
{
    
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("GeneratedCode","1.0")]
    
    [Serializable]
    public partial class Datos_ITVSpecification : ISpecification<Datos_ITV>
    {
    
        public Nullable<int> Id
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<int>> IdIN
    	{
    		get;
    		set;
    	}
    
        public string Matricula
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> MatriculaIN
    	{
    		get;
    		set;
    	}
    
    	public string MatriculaContains
    	{
    		get;
    		set;
    	}
    	
    	public string MatriculaStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string MatriculaEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Ultima_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Ultima_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Ultima_ITVFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Ultima_ITVTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Ultima_ITVFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Ultima_ITVToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<System.DateTime> Vto_ITV
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> Vto_ITVIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> Vto_ITVFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> Vto_ITVTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> Vto_ITVFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> Vto_ITVToOrNull
        {
            get;
            set;
        }
    		
    
        public Nullable<double> Tarifa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> TarifaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> TarifaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> TarifaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> Tasa
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> TasaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> TasaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> TasaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> Importe
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> ImporteIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> ImporteFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> ImporteTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> Impuesto_Circulacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> Impuesto_CirculacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> Impuesto_CirculacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> Impuesto_CirculacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public Nullable<double> Pr_Conservacion
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<double>> Pr_ConservacionIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<double> Pr_ConservacionFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<double> Pr_ConservacionTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    
        public string Otros
        {
            get; 
            set;
        }
    		
    	public IEnumerable<string> OtrosIN
    	{
    		get;
    		set;
    	}
    
    	public string OtrosContains
    	{
    		get;
    		set;
    	}
    	
    	public string OtrosStartsWith
    	{
    		get;
    		set;
    	}
    	
    	public string OtrosEndsWith
    	{
    		get;
    		set;
    	}
    
    
        public Nullable<System.DateTime> Falta
        {
            get; 
            set;
        }
    		
    	public IEnumerable<Nullable<System.DateTime>> FaltaIN
    	{
    		get;
    		set;
    	}
    
    	public Nullable<System.DateTime> FaltaFrom
    	{
    		get;
    		set;
    	}
    	
    	public Nullable<System.DateTime> FaltaTo
    	{
    		get;
    		set;
    	}
    	 
        
    
    	public Nullable<System.DateTime> FaltaFromOrNull
        {
            get;
            set;
        }
    
                    
        public Nullable<System.DateTime> FaltaToOrNull
        {
            get;
            set;
        }
    		
    
    
    	/// <summary>
    	/// Default constructor (needed for serialization)
    	/// Initializes a new instance of the <see cref="Datos_ITVSpecification"/> class.
    	/// </summary>
    	public Datos_ITVSpecification()
    	{
    
    	}
    
    	/// <summary>
    	/// Initializes a new instance of the <see cref="Datos_ITVSpecification"/> class.
    	/// </summary>
    	/// <param name="initializeNavigationProperties">if set to <c>true</c> initialize navigation properties.</param>
    	public Datos_ITVSpecification(bool initializeNavigationProperties)
    	{
    		if(!initializeNavigationProperties)
    			return;
    
    	}
    
        #region ISpecification Members
    
    	public Expression<Func<Datos_ITV, bool>> GetExpression()
    	{
    		Expression<Func<Datos_ITV, bool>> expression = x => true;
    
    		if(Id.HasValue)
    			expression = expression.And(x => x.Id == Id.Value);
    
    		if(IdIN != null && IdIN.Count() > 0)
    			expression = expression.And(x => IdIN.Contains(x.Id));
    	
    		if(!string.IsNullOrWhiteSpace(Matricula))  
    			expression = expression.And(x => x.Matricula.Equals(Matricula));
    			
    		if(!string.IsNullOrWhiteSpace(MatriculaContains))  
    			expression = expression.And(x => x.Matricula.Contains(MatriculaContains));
    			
    		if(!string.IsNullOrWhiteSpace(MatriculaStartsWith))
    			expression = expression.And(x => x.Matricula.StartsWith(MatriculaStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(MatriculaEndsWith))
    			expression = expression.And(x => x.Matricula.EndsWith(MatriculaEndsWith));
    
    		if(MatriculaIN != null && MatriculaIN.Count() > 0)
    			expression = expression.And(x => MatriculaIN.Contains(x.Matricula));
    
    		if(Ultima_ITV.HasValue)
    			expression = expression.And(x => x.Ultima_ITV == Ultima_ITV.Value);
    
    		if(Ultima_ITVIN != null && Ultima_ITVIN.Count() > 0)
    			expression = expression.And(x => Ultima_ITVIN.Contains(x.Ultima_ITV));
    	
    		if(Ultima_ITVFrom.HasValue)
    			expression = expression.And(x => x.Ultima_ITV >= Ultima_ITVFrom.Value);
    			
    		if(Ultima_ITVTo.HasValue)
    			expression = expression.And(x => x.Ultima_ITV <= Ultima_ITVTo.Value);
    				
    
    		if(Ultima_ITVFromOrNull.HasValue)
                expression = expression.And(x => x.Ultima_ITV >= Ultima_ITVFromOrNull.Value || x.Ultima_ITV == null);
    
            if(Ultima_ITVToOrNull.HasValue)
                expression = expression.And(x => x.Ultima_ITV <= Ultima_ITVToOrNull.Value || x.Ultima_ITV == null);
    
    		if(Vto_ITV.HasValue)
    			expression = expression.And(x => x.Vto_ITV == Vto_ITV.Value);
    
    		if(Vto_ITVIN != null && Vto_ITVIN.Count() > 0)
    			expression = expression.And(x => Vto_ITVIN.Contains(x.Vto_ITV));
    	
    		if(Vto_ITVFrom.HasValue)
    			expression = expression.And(x => x.Vto_ITV >= Vto_ITVFrom.Value);
    			
    		if(Vto_ITVTo.HasValue)
    			expression = expression.And(x => x.Vto_ITV <= Vto_ITVTo.Value);
    				
    
    		if(Vto_ITVFromOrNull.HasValue)
                expression = expression.And(x => x.Vto_ITV >= Vto_ITVFromOrNull.Value || x.Vto_ITV == null);
    
            if(Vto_ITVToOrNull.HasValue)
                expression = expression.And(x => x.Vto_ITV <= Vto_ITVToOrNull.Value || x.Vto_ITV == null);
    
    		if(Tarifa.HasValue)
    			expression = expression.And(x => x.Tarifa == Tarifa.Value);
    
    		if(TarifaIN != null && TarifaIN.Count() > 0)
    			expression = expression.And(x => TarifaIN.Contains(x.Tarifa));
    	
    		if(TarifaFrom.HasValue)
    			expression = expression.And(x => x.Tarifa >= TarifaFrom.Value);
    			
    		if(TarifaTo.HasValue)
    			expression = expression.And(x => x.Tarifa <= TarifaTo.Value);
    				
    
    
    		if(Tasa.HasValue)
    			expression = expression.And(x => x.Tasa == Tasa.Value);
    
    		if(TasaIN != null && TasaIN.Count() > 0)
    			expression = expression.And(x => TasaIN.Contains(x.Tasa));
    	
    		if(TasaFrom.HasValue)
    			expression = expression.And(x => x.Tasa >= TasaFrom.Value);
    			
    		if(TasaTo.HasValue)
    			expression = expression.And(x => x.Tasa <= TasaTo.Value);
    				
    
    
    		if(Importe.HasValue)
    			expression = expression.And(x => x.Importe == Importe.Value);
    
    		if(ImporteIN != null && ImporteIN.Count() > 0)
    			expression = expression.And(x => ImporteIN.Contains(x.Importe));
    	
    		if(ImporteFrom.HasValue)
    			expression = expression.And(x => x.Importe >= ImporteFrom.Value);
    			
    		if(ImporteTo.HasValue)
    			expression = expression.And(x => x.Importe <= ImporteTo.Value);
    				
    
    
    		if(Impuesto_Circulacion.HasValue)
    			expression = expression.And(x => x.Impuesto_Circulacion == Impuesto_Circulacion.Value);
    
    		if(Impuesto_CirculacionIN != null && Impuesto_CirculacionIN.Count() > 0)
    			expression = expression.And(x => Impuesto_CirculacionIN.Contains(x.Impuesto_Circulacion));
    	
    		if(Impuesto_CirculacionFrom.HasValue)
    			expression = expression.And(x => x.Impuesto_Circulacion >= Impuesto_CirculacionFrom.Value);
    			
    		if(Impuesto_CirculacionTo.HasValue)
    			expression = expression.And(x => x.Impuesto_Circulacion <= Impuesto_CirculacionTo.Value);
    				
    
    
    		if(Pr_Conservacion.HasValue)
    			expression = expression.And(x => x.Pr_Conservacion == Pr_Conservacion.Value);
    
    		if(Pr_ConservacionIN != null && Pr_ConservacionIN.Count() > 0)
    			expression = expression.And(x => Pr_ConservacionIN.Contains(x.Pr_Conservacion));
    	
    		if(Pr_ConservacionFrom.HasValue)
    			expression = expression.And(x => x.Pr_Conservacion >= Pr_ConservacionFrom.Value);
    			
    		if(Pr_ConservacionTo.HasValue)
    			expression = expression.And(x => x.Pr_Conservacion <= Pr_ConservacionTo.Value);
    				
    
    	
    		if(!string.IsNullOrWhiteSpace(Otros))  
    			expression = expression.And(x => x.Otros.Equals(Otros));
    			
    		if(!string.IsNullOrWhiteSpace(OtrosContains))  
    			expression = expression.And(x => x.Otros.Contains(OtrosContains));
    			
    		if(!string.IsNullOrWhiteSpace(OtrosStartsWith))
    			expression = expression.And(x => x.Otros.StartsWith(OtrosStartsWith));
    
    		if(!string.IsNullOrWhiteSpace(OtrosEndsWith))
    			expression = expression.And(x => x.Otros.EndsWith(OtrosEndsWith));
    
    		if(OtrosIN != null && OtrosIN.Count() > 0)
    			expression = expression.And(x => OtrosIN.Contains(x.Otros));
    
    		if(Falta.HasValue)
    			expression = expression.And(x => x.Falta == Falta.Value);
    
    		if(FaltaIN != null && FaltaIN.Count() > 0)
    			expression = expression.And(x => FaltaIN.Contains(x.Falta));
    	
    		if(FaltaFrom.HasValue)
    			expression = expression.And(x => x.Falta >= FaltaFrom.Value);
    			
    		if(FaltaTo.HasValue)
    			expression = expression.And(x => x.Falta <= FaltaTo.Value);
    				
    
    		if(FaltaFromOrNull.HasValue)
                expression = expression.And(x => x.Falta >= FaltaFromOrNull.Value || x.Falta == null);
    
            if(FaltaToOrNull.HasValue)
                expression = expression.And(x => x.Falta <= FaltaToOrNull.Value || x.Falta == null);
    		
    		//
    		// Navigation properties
    		//
    	
    		return expression;
    	}
    	
    	public bool IsSatisfiedBy(Datos_ITV entity)
    	{
    		// convert single entity to a IQueryable object, 
    		// in order to be able to use lambda expressions
    		IQueryable<Datos_ITV> entities = (new[] { entity }).AsQueryable();
    		
    		return entities.Any(this.GetExpression());
    	}
    
        public override string ToString()
        {
            return Evaluator.PartialEval(this.GetExpression()).ToString();
        }

        #endregion

    }
}
